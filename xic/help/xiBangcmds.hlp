
!!  ---------------------------------------------------------------
!!  Xic/WRspice Help System Database
!!  $Id: xiBangcmds.hlp,v 1.175 2017/03/22 07:30:07 stevew Exp $
!!  Copyright (C) Whiteley Research Inc. 2003.  All Rights Reserved
!!  ---------------------------------------------------------------

!!TAG Xic

!!KEYWORD
xiBangcmds.hlp
!!TITLE
xiBangcmds.hlp
!!HTML

!!SUBTOPICS
keybang
!gzip
!gunzip
!md5
!sa
!sqdump
!assemble
!splwrite
!cd
!pwd
!time
!timedbg
!xdepth
!bincnt
!netxp
!pcdump
!showz
!errs
!errlayer
!calc
!check
!regen
!devkeys
!antenna
!netext
!addcells
!find
!ptrms
!ushow
!fc
!fh
!setcolor
!display
!sg
!rg
!help
!helpfont
!helpfixed
!helpreset
!kmap
!ltab
!ltsort
!exlayers
!array
!layer
!mo
!co
!spin
!rename
!svq
!rcq
!box2poly
!path2poly
!poly2path
!bloat
!join
!jw
!split
!manh
!polyfix
!polyrev
!noacute
!togrid
!tospot
!origin
!import
!fileinfo
!summary
!compare
!empties
!area
!perim
!bb
!checkgrid
!checkover
!dups
!wirecheck
!polycheck
!polymanh
!poly45
!polynum
!setflag
!mklib
!lsdb
!mark
!clearall
!vmem
!mmstats
!mmclear
!oaversion
!oadebug
!oanewlib
!oabrand
!oatech
!oasave
!oaload
!oadelete
!rmpcprops
!preload
!dr
!script
!exec
!lisp
!py
!tcl
!tk
!listfuncs
!rehash
!rmfunc
!select
!desel
!zs
!shell
!ssh
!attrvars
!dumpcds
!update
!set
!unset
!setdump
!spcmd


!! 102712
!!KEYWORD
keybang bangcmds !
!!TITLE
Keyboard '!' Commands
!!HTML
    The command line interface through the <a href="promptline">prompt
    area</a> provides an interface to operating system commands, as
    well as to a number of internal commands which are often rather
    specialized and not associated with a menu button.  Each of these
    commands starts with an exclamation point ('!'), and may be
    entered when no other command is active, or inside of many
    commands.  These key presses are not recorded in the "keys" area
    below the side menu.  If the command entered matches one of the
    internal commands listed below, that command is executed. 
    Otherwise, an operating system shell and associated window is
    produced to execute the command, with the exclamation mark
    stripped.

    <p>
    <b>Special Form:  <tt>!</tt></b><br>
    Entering a single exclamation point with no other text will
    produce an interactive terminal window into which the user can
    issue operating system commands.  If any text follows the
    exclamation point, and that text does not match an internal
    command, the exclamation point will be stripped, the remaining
    text sent to the operating system for execution, and the result
    will be displayed in a pop-up window.

    <p>
    Giving the bare exclamation point is equivalent to giving the <a
    href="!shell"><b>!shell</b></a> command without arguments.  Giving
    something like <tt>!xyz</tt> is equivalent to giving <tt>!shell
    xyz</tt>, provided that <tt>!xyz</tt> is not one of the built-in
    commands.  The use of <tt>!shell</tt> removes the ambiguity.

    <p>
    <a name="bangbang"></a>
    <b>Special Form:  <tt>!!</tt></b><br>
    If a line starts with "<tt>!!</tt>" the rest of the line is taken
    as a <a href="xicscript">script</a>, and executed by the script
    parser.  This is how to map script interface functions into a
    macro.  For example, below is a macro to reset the current
    transform:
    <blockquote>
    <tt>!!SetTransform(0,0,1)</tt> <b>Ctrl-Return</b>
    </blockquote>

    <p>
    <b>Special Form:  <tt>!?</tt></b><br>
    Entering "<tt>!?</tt>" will bring up help about the '<tt>!</tt>'
    commands.

    <p>
    <b>Special Form:  <tt>!?</tt></b><i>name</i><br>
    This special form will bring up help about the help database keyword
    <i>name</i>.

    <p>
    <b>Special Form:  <tt>!??</tt></b><br>
    This special form will print a listing of the '!' commands
    actually available in the program, from internal tables.

    <p>
    <b>Special Form:  <tt>!#</tt></b><br>
    The last six commands given are saved, and can be recalled with the
    form "<tt>!#[<i>n</i>]</tt>", that is, an exclamation point and a
    pound sign followed by an optional integer.  The <i>n</i> is an
    optional integer 0-5, and if not given (the square brackets
    indicate "optional" and are not literal) a value of 0 is taken. 
    The <i>n</i>'th previous command will be printed in the prompt
    area, where it can be edited and re-executed.  If no matching
    command is found, there is no action.

    <p>
    When a command from the history list is in the prompt area, the
    <b>Up Arrow</b> and <b>Down Arrow</b> keys can be used to cycle
    through the other commands in the history list, each of which will
    be entered into the prompt line in response to the key press.

    <p>
    Each '<tt>!</tt>' command given, including those from
    '<tt>!#</tt>', will be pushed onto the history list in the 0
    position if it is not identical to the previous command given.
     
    <p>
    The following table summarizes the internal commands available.

!! 102214
    <p>
    <table border=1 align="center" bgcolor="#ffffee" cellpadding=2>
    <tr><th colspan=2 align="center">Compression</th></tr>
    <tr><td><a href="!gzip"><b>!gzip</b></a></td>
        <td>Apply compression to file</td></tr>
    <tr><td><a href="!gunzip"><b>!gunzip</b></a></td>
        <td>Uncompress a file</td></tr>
    <tr><td><a href="!md5"><b>!md5</b></a></td>
        <td>Print file digest</td></tr>

!! 102712
    <tr><th colspan=2 align="center">Create Output</th></tr>
    <tr><td><a href="!sa"><b>!sa</b></a></td>
        <td>Save modified cells</td></tr>
    <tr><td><a href="!sqdump"><b>!sqdump</b></a></td>
        <td>Save selections as native cell</td></tr>
    <tr><td><a href="!assemble"><b>!assemble</b></a></td>
        <td>Process or merge archive files</td></tr>
    <tr><td><a href="!splwrite"><b>!splwrite</b></a></td>
        <td>Split a layout into multiple pieces</td></tr>

!! 102712
    <tr><th colspan=2 align="center">Current Directory</th></tr>
    <tr><td><a href="!cd"><b>!cd</b></a></td>
        <td>Change working directory</td></tr>
    <tr><td><a href="!pwd"><b>!pwd</b></a></td>
        <td>Print working directory</td></tr>

!! 102614
    <tr><th colspan=2 align="center">Diagnostics</th></tr>
    <tr><td><a href="!time"><b>!time</b></a></td>
        <td>Print elapsed run time in seconds in console</td></tr>
    <tr><td><a href="!timedbg"><b>!timedbg</b></a></td>
        <td>Print timing info in console</td></tr>
    <tr><td><a href="!xdepth"><b>!xdepth</b></a></td>
        <td>Print transform stack depth in console</td></tr>
    <tr><td><a href="!bincnt"><b>!bincnt</b></a></td>
        <td>Database diagnostic</td></tr>
    <tr><td><a href="!netxp"><b>!netxp</b></a></td>
        <td>Net expression checking</td></tr>
    <tr><td><a href="!pcdump"><b>!pcdump</b></a></td>
        <td>Parameterized cell database dump</td></tr>

!! 102712
    <tr><th colspan=2 align="center">Design Rule Checking</th></tr>
    <tr><td><a href="!showz"><b>!showz</b></a></td>
        <td>Show DRC partitioning</td></tr>
    <tr><td><a href="!errs"><b>!errs</b></a></td>
        <td>Rebuild DRC error highlighting from file</td></tr>
    <tr><td><a href="!errlayer"><b>!errlayer</b></a></td>
        <td>Create error polygons on some layer</td></tr>

!! 021713
    <tr><th colspan=2 align="center">Electrical</th></tr>
    <tr><td><a href="!calc"><b>!calc</b></a></td>
        <td>Calculate parameter expression value</td></tr>
    <tr><td><a href="!check"><b>!check</b></a></td>
        <td>Check electrical input for consistency</td></tr>
    <tr><td><a href="!regen"><b>!regen</b></a></td>
        <td>Regenerate damaged file</td></tr>
    <tr><td><a href="!devkeys"><b>!devkeys</b></a></td>
        <td>Print device key table</td></tr>

!! 090714
    <tr><th colspan=2 align="center">Extraction</th></tr>
    <tr><td><a href="!antenna"><b>!antenna</b></a></td>
        <td>Test for MOS antenna effect</td></tr>
    <tr><td><a href="!netext"><b>!netext</b></a></td>
        <td>Batch physical net extraction</td></tr>
    <tr><td><a href="!addcells"><b>!addcells</b></a></td>
        <td>Add missing cells</td></tr>
    <tr><td><a href="!find"><b>!find</b></a></td>
        <td>Find devices</td></tr>
    <tr><td><a href="!ptrms"><b>!ptrms</b></a></td>
        <td>Physical terminal manipulations</td></tr>
    <tr><td><a href="!ushow"><b>!ushow</b></a></td>
        <td>Show unassociated elements</td></tr>
    <tr><td><a href="!fc"><b>!fc</b></a></td>
        <td>Control capacitance extraction interface</td></tr>
    <tr><td><a href="!fh"><b>!fh</b></a></td>
        <td>Control inductance/resistance extraction interface</td></tr>

!! 102712
    <tr><th colspan=2 align="center">Graphics</th></tr>
    <tr><td><a href="!setcolor"><b>!setcolor</b></a></td>
        <td>Set attribute color</td></tr>
    <tr><td><a href="!display"><b>!display</b></a></td>
        <td>Display graphics in a foreign X window</td></tr>

!! 102712
    <tr><th colspan=2 align="center">Grid</th></tr>
    <tr><td><a href="!sg"><b>!sg</b></a></td>
        <td>Save the current grid</td></tr>
    <tr><td><a href="!rg"><b>!rg</b></a></td>
        <td>Restore saved grid</td></tr>

!! 102712
    <tr><th colspan=2 align="center">Help</th></tr>
    <tr><td><a href="!help"><b>!help</b></a></td>
        <td>Call the help system</td></tr>
    <tr><td><a href="!helpfont"><b>!helpfont</b></a></dt>
        <td>Set help base font family</td></tr>
    <tr><td><a href="!helpfixed"><b>!helpfixed</b></a></dt>
        <td>Set help fixed font family</td></tr>
    <tr><td><a href="!helpreset"><b>!helpreset</b></a></dt>
        <td>Clear help topic cache</td></tr>

!! 011114
    <tr><th colspan=2 align="center">Keyboard</th></tr>
    <tr><td><a href="!kmap"><b>!kmap</b></a></td>
        <td>Read keyboard mapping file</td></tr>

!! 012016
    <tr><th colspan=2 align="center">Layers</th></tr>
    <tr><td><a href="!ltab"><b>!ltab</b></a></td>
        <td>Manipulate layer table</td></tr>
    <tr><td><a href="!ltsort"><b>!ltsort</b></a></td>
        <td>Alphanumerically sort layer table</td></tr>
    <tr><td><a href="!exlayers"><b>!exlayers</b></a></td>
        <td>List layers by applied keywords in console</td></tr>

!! 092717
    <tr><th colspan=2 align="center">Layout Editing</th></tr>
    <tr><td><a href="!array"><b>!array</b></a></td>
        <td>Manipulate instance arrays</td></tr>
    <tr><td><a href="!layer"><b>!layer</b></a></td>
        <td>Create layers/objects using expression</td></tr>
    <tr><td><a href="!mo"><b>!mo</b></a></td>
        <td>Move objects</td></tr>
    <tr><td><a href="!co"><b>!co</b></a></td>
        <td>Copy objects</td></tr>
    <tr><td><a href="!spin"><b>!spin</b></a></td>
        <td>Rotate objects</td></tr>
    <tr><td><a href="!rename"><b>!rename</b></a></td>
        <td>Rename subcells</td></tr>
    <tr><td><a href="!svq"><b>!svq</b></a></td>
        <td>Save selections in register</td></tr>
    <tr><td><a href="!rcq"><b>!rcq</b></a></td>
        <td>Recall selections from register</td></tr>
    <tr><td><a href="!box2poly"><b>!box2poly</b></a></td>
        <td>Convert boxes to polygons</td></tr>
    <tr><td><a href="!path2poly"><b>!path2poly</b></a></td>
        <td>Convert wire paths to polygons</td></tr>
    <tr><td><a href="!poly2path"><b>!poly2path</b></a></td>
        <td>Convert polygon boundaries to wires</td></tr>
    <tr><td><a href="!bloat"><b>!bloat</b></a></td>
        <td>Expand/contract object</td></tr>
    <tr><td><a href="!join"><b>!join</b></a></td>
        <td>Join objects into polygon</td></tr>
    <tr><td><a href="!jw"><b>!jw</b></a></td>
        <td>Join similar wires with common endpoints</td></tr>
    <tr><td><a href="!split"><b>!split</b></a></td>
        <td>Split polygon into trapezoids</td></tr>
    <tr><td><a href="!manh"><b>!manh</b></a></td>
        <td>Convert to Manhattan polygons</td></tr>
    <tr><td><a href="!polyfix"><b>!polyfix</b></a></td>
        <td>Fix polygon errors</td></tr>
    <tr><td><a href="!polyrev"><b>!polyrev</b></a></td>
        <td>Reverse polygon winding</td></tr>
    <tr><td><a href="!noacute"><b>!noacute</b></a></td>
        <td>Eliminate acute angles</td></tr>
    <tr><td><a href="!togrid"><b>!togrid</b></a></td>
        <td>Move selected object vertices to grid</td></tr>
    <tr><td><a href="!tospot"><b>!tospot</b></a></td>
        <td>Condition object for spot size</td></tr>
    <tr><td><a href="!origin"><b>!origin</b></a></td>
        <td>Set origin of current cell</td></tr>
    <tr><td><a href="!import"><b>!import</b></a></td>
        <td>Import structures into the current cell</td></tr>

!! 012016
    <tr><th colspan=2 align="center">Layout Information</th></tr>
    <tr><td><a href="!fileinfo"><b>!fileinfo</b></a></td>
        <td>Print info about archive file in console</td></tr>
    <tr><td><a href="!summary"><b>!summary</b></a></td>
        <td>Print summary info of current hierarchy</td></tr>
    <tr><td><a href="!compare"><b>!compare</b></a></td>
        <td>Compare geometry in files</td></tr>
    <tr><td><a href="!diffcells"><b>!diffcells</b></a></td>
        <td>Create cells from <b>!compare</b> output</td></tr>
    <tr><td><a href="!empties"><b>!empties</b></a></td>
        <td>Check for empty cells</td></tr>
    <tr><td><a href="!area"><b>!area</b></a></td>
        <td>Measure object area</td></tr>
    <tr><td><a href="!perim"><b>!perim</b></a></td>
        <td>Measure object perimeter</td></tr>
    <tr><td><a href="!bb"><b>!bb</b></a></td>
        <td>Print bounding box of current cell</td></tr>
    <tr><td><a href="!checkgrid"><b>!checkgrid</b></a></td>
        <td>Check object for off-grid vertices</td></tr>
    <tr><td><a href="!checkover"><b>!checkover</b></a></td>
        <td>Report cells that overlap</td></tr>
    <tr><td><a href="!check45"><b>!check45</b></a></td>
        <td>Select polygons and/or wires with angle non-45 degree multiple</td></tr>
    <tr><td><a href="!dups"><b>!dups</b></a></td>
        <td>Select coincident identical objects</td></tr>
    <tr><td><a href="!wirecheck"><b>!wirecheck</b></a></td>
        <td>Check wire characteristics</td></tr>
    <tr><td><a href="!polycheck"><b>!polycheck</b></a></td>
        <td>Check polygon characteristics</td></tr>
    <tr><td><a href="!polymanh"><b>!polymanh</b></a></td>
        <td>Select Manhattan polygons</td></tr>
    <tr><td><a href="!poly45"><b>!poly45</b></a></td>
        <td>Select polygons with angle not a 45 degree multiple</td></tr>
    <tr><td><a href="!polynum"><b>!polynum</b></a></td>
        <td>Show polygon vertex indices</td></tr>
    <tr><td><a href="!setflag"><b>!setflag</b></a></td>
        <td>Set cell flags</td></tr>

!! 102712
    <tr><th colspan=2 align="center">Libraries</th></tr>
    <tr><td><a href="!mklib"><b>!mklib</b></a></td>
        <td>Create or append to a library file</td></tr>
    <tr><td><a href="!lsdb"><b>!lsdb</b></a></td>
        <td>List "special" databases in memory</td></tr>

!! 102712
    <tr><th colspan=2 align="center">Marks</th></tr>
    <tr><td><a href="!mark"><b>!mark</b></a></td>
        <td>Create user marks in layout</td></tr>

!! 071815
    <tr><th colspan=2 align="center">Memory Management</th></tr>
    <tr><td><a href="!clearall"><b>!clearall</b></a></td>
        <td>Clear all memory</td></tr>
    <tr><td><a href="!vmem"><b>!vmem</b></a></td>
        <td>Windows only, print virtual memory statistics</td></tr>
    <tr><td><a href="!mmstats"><b>!mmstats</b></a></td>
        <td>Print memory manager statistics</td></tr>
    <tr><td><a href="!mmclear"><b>!mmclear</b></a></td>
        <td>Clear caches</td></tr>

!!IFDEF OpenAccess
!! 062313
    <tr><th colspan=2 align="center">OpenAccess Interface</th></tr>
    <tr><td><a href="!oaversion"><b>!oaversion</b></a></td>
        <td>Print OpenAccess release number</td></tr>
    <tr><td><a href="!oadebug"><b>!oadebug</b></a></td>
        <td>Enable log files</td></tr>
    <tr><td><a href="!oanewlib"><b>!oanewlib</b></a></td>
        <td>Create new OpenAccess Library</td></tr>
    <tr><td><a href="!oabrand"><b>!oabrand</b></a></td>
        <td>Permit save from <i>Xic</i> in OA library</td></tr>
    <tr><td><a href="!oatech"><b>!oatech</b></a></td>
        <td>Query OpenAccess technology database</td></tr>
    <tr><td><a href="!oasave"><b>!oasave</b></a></td>
        <td>Save cell to OpenAccess library</td></tr>
    <tr><td><a href="!oaload"><b>!oaload</b></a></td>
        <td>Read cell from OpenAccess library</td></tr>
    <tr><td><a href="!oadelete"><b>!oadelete</b></a></td>
        <td>Delete OpenAccess object</td></tr>
!!ENDIF

!! 081318
    <tr><th colspan=2 align="center">Parameterized Cells</th></tr>
    <tr><td><a href="!rmpcprops"><b>!rmpcprops</b></a></td>
        <td>Remove pcell properties from pcell sub-masters</td></tr>
    <tr><td><a href="!preload"><b>!preload</b></a></td>
        <td>Pre-load sub-masters to resolve as cell data are read</td></tr>

!!IFDEF MRouter
    <tr><th colspan=2 align="center">Router</th></tr>
    <tr><td><a href="!mr"><b>!mr</b></a></td>
        <td>Interface to the maze router plug-in</td></tr>
!!ENDIF

!! 102712
    <tr><th colspan=2 align="center">Rulers</th></tr>
    <tr><td><a href="!dr"><b>!dr</b></a></td>
        <td>Delete rulers</td></tr>

!! 100315
    <tr><th colspan=2 align="center">Scripts</th></tr>
    <tr><td><a href="!script"><b>!script</b></a></td>
        <td>Add a script to the <b>User Menu</b></td></tr>
    <tr><td><a href="!rehash"><b>!rehash</b></a></td>
        <td>Re-read script libraries and rebuild <b>User Menu</b></td></tr>
    <tr><td><a href="!exec"><b>!exec</b></a></td>
        <td>Execute a script</td></tr>
    <tr><td><a href="!lisp"><b>!lisp</b></a></td>
        <td>Execute a Lisp script</td></tr>
    <tr><td><a href="!py"><b>!py</b></a></td>
        <td>Execute a Python script</td></tr>
    <tr><td><a href="!tcl"><b>!tcl</b></a></td>
        <td>Execute a Tcl script (no Tk)</td></tr>
    <tr><td><a href="!tk"><b>!tk</b></a></td>
        <td>Execute a Tcl/Tk script</td></tr>
    <tr><td><a href="!listfuncs"><b>!listfuncs</b></a></td>
        <td>Pop-up list of saved functions</td></tr>
    <tr><td><a href="!rmfunc"><b>!rmfunc</b></a></td>
        <td>Delete a saved function</td></tr>
    <tr><td><a href="!mkscript"><b>!mkscript</b></a></td>
        <td>Create script that generates current cell hierarchy</td></tr>
    <tr><td><a href="!ldshared"><b>!ldshared</b></a></td>
        <td>Load a script interface plug-in</td></tr>

!! 102712
    <tr><th colspan=2 align="center">Selections</th></tr>
    <tr><td><a href="!select"><b>!select</b></a></td>
        <td>Select objects</td></tr>
    <tr><td><a href="!desel"><b>!desel</b></a></td>
        <td>Deselect objects</td></tr>
    <tr><td><a href="!zs"><b>!zs</b></a></td>
        <td>Zoom to selected objects</td></tr>

!! 102712
    <tr><th colspan=2 align="center">Shell</th></tr>
    <tr><td><a href="!shell"><b>!shell</b></a></td>
        <td>Open terminal window</td></tr>
    <tr><td><a href="!ssh"><b>!ssh</b></a></td>
        <td>Open terminal window to remote system</td></tr>

!! 021615
    <tr><th colspan=2 align="center">Technology File</th></tr>
    <tr><td><a href="!attrvars"><b>!attrvars</b></a></td>
        <td>List the variables that are recognized as tech file
        keywords</td></tr>
    <tr><td><a href="!dumpcds"><b>!dumpcds</b></a></td>
        <td>Create Cadence Virtuoso&#174 technology and DRF files</td></tr>

!! 102817
    <tr><th colspan=2 align="center">Update Release</th></tr>
    <tr><td><a href="!update"><b>!update</b></a></td>
        <td>Download/install new release</td></tr>

!! 102712
    <tr><th colspan=2 align="center">Variables</th></tr>
    <tr><td><a href="!set"><b>!set</b></a></td>
        <td>Set/examine variables</td></tr>
    <tr><td><a href="!unset"><b>!unset</b></a></td>
        <td>Unset variables</td></tr>
    <tr><td><a href="!setdump"><b>!setdump</b></a></td>
        <td>Dump variables</td></tr>

!! 102712
    <tr><th colspan=2 align="center"><i>WRspice</i> Interface</th></tr>
    <tr><td><a href="!spcmd"><b>!spcmd</b></a></td>
        <td>Execute <i>WRspice</i> command</td></tr>
    </table>

!!SEEALSO
keyboard


!! ----------------------------------------------------------------------------
!! Compression
!! ----------------------------------------------------------------------------

!! 053108
!!KEYWORD
!gzip
!!TITLE
!gzip
!!HTML
    <b>Syntax: <tt>!gzip</tt> <i>infile</i> [<i>outfile</i>]</b>

    <p>
    The will compress the file given as <i>infile</i> using the
    <tt>gzip</tt> method.  If <i>outfile</i> is not given, output is
    written to a file with the same name as <i>infile</i> but with a
    "<tt>.gz</tt>" extension.  Otherwise, the file name given for
    <i>outfile</i> must have a "<tt>.gz</tt>" extension.  Under
    Unix/Linux this uses 64-bit file offsets so can be applied to
    files larger than 2Gb, unlike some versions of the GNU
    <tt>gzip</tt> utility.  Unlike the GNU <tt>gzip</tt> program, this
    will not delete <i>infile</i>.

!!SEEALSO
!gunzip
keybang

!! 053105
!!KEYWORD
!gunzip
!!TITLE
!gunzip
!!HTML
    <b>Syntax: <tt>!gunzip</tt> <i>infile</i> [<i>outfile</i>]</b>

    <p>
    This will uncompress the file given as <i>infile</i>, which was
    previously compressed with <tt>gzip</tt>, and has a "<tt>.gz</tt>"
    extension.  If no <i>outfile</i> is given, output is written to a
    file with the same name as the <i>infile</i> but with the
    "<tt>.gz</tt>" suffix stripped.  Under Unix/Linux this uses 64-bit
    file offsets so can be applied to files larger than 2Gb, unlike
    some versions of the GNU <tt>gunzip</tt> utility.  Unlike the GNU
    <tt>gunzip</tt> program, this will not delete <i>infile</i>.

!!SEEALSO
!gzip
keybang

!! 102214
!!KEYWORD
!md5
!!TITLE
!md5
!!HTML
    <b>Syntax: <tt>!md5</tt> <i>filepath</i></b>

    <p>
    This command will compute and print on the prompt line the MD5
    digest of a file.  The digest is a sequence of 32 hex digits that
    is very unlikely to duplicate that of another file.  It can be
    used to determine if a file is incorrect or has been tampered
    with.

    <p>
    The same digest can be obtained from the following command, which
    is available on most Unix/Linux/OS X systems:
    <blockquote>
    <tt>openssl dgst -md5</tt> <i>filepath</i>
    </blockquote>

!!SEEALSO
keybang

!! ----------------------------------------------------------------------------
!! Create Output
!! ----------------------------------------------------------------------------

!! 102712
!!KEYWORD
!sa
!!TITLE
!sa
!!HTML
    <b>Syntax: <tt>!sa</tt></b>

    <p>
    Invoking this command is the same as invoking the <a
    href="xic:sv"><b>Save</b></a> command in the <b>File Menu</b>.  If
    there are modified cells, the <a href="xic:sv"><b>Modified
    Cells</b></a> pop-up will appear, from which the cells can be
    saved to disk.

!!SEEALSO
keybang

!! 053108
!!KEYWORD
!sqdump
!!TITLE
!sqdump
!!HTML
    <b>Syntax: <tt>!sqdump</tt> <i>cellpath</i></b>

    <p>
    This will save the current selections to a native file named in
    <i>cellpath</i>.  Unlike the <a href="xic:crcel"><b>Create
    Cell</b></a> command in the <b>Edit Menu</b>, no cell is
    created in memory.

!!SEEALSO
keybang

!! 022916
!!KEYWORD
!assemble
!!TITLE
!assemble
!!HTML
    <table border=0>
    <tr><td valign=top><b>jump to</b></td> <td>
    <a href="!assemble#input"><b>File and Option Argument Format</b></a><br>
    <a href="!assemble#header"><b>Header Block</b></a><br>
    <a href="!assemble#source"><b>Source Block</b></a><br>
    <a href="!assemble#sbcmds"><b>Source Block Directives</b></a><br>
    <a href="!assemble#place"><b>Placement Blocks</b></a><br>
    <a href="!assemble#pbcmds"><b>Placement Block Directives</b></a>
    </td></tr></table>

    <p>
    The <b>!assemble</b> command automates reading of cells from
    archives, subsequent processing, and writing to a new archive
    file.  It provides the capabilities of the <a
    href="xic:convt"><b>Format Conversion</b></a> panel in the <a
    href="xic:cvrtmenu"><b>Convert Menu</b></a>, such as format
    translation, windowing, and flattening.  Additionally, multiple
    input files and cells can be processed and merged into a larger
    archive, on-the-fly or by using a <a href="xic:hier">Cell
    Hierarchy Digest</a> (CHD) so as to avoid memory limitations. 
    Cell definitions for the read and possibly modified cells are
    streamed into the output file, and the output file can contain a
    new top-level cell in which the cells read are instantiated.  The
    input and output can be any of the supported <a
    href="xic:fsaf">archive formats</a>, in any combination.
    <br clear=all>

    <br>
    <b>Syntax: <tt>!assemble</tt> <i>specfile</i> | <i>argument_list</i></b>

    <p>
    The operation can be controlled by a specification script file, the
    path to which is given as the argument.  The script uses a
    language that is unique to this command, which will be described. 
    This supplies the output file name and the description of the
    top-level cell (if any), the files to be used as input, the cells
    to extract from these files, and the operations to perform.  It is
    a simple text file, prepared by the user, containing a number of
    keywords with values.  The specification script can also be
    obtained from the <a href="xic:assem"><b>Assemble</b></a> command
    in the <b>Convert Menu</b>, which is a graphical front-end to the
    <b>!assemble</b> command.

    <p>
    Alternatively, the argument list can consist of a series of option
    tokens and values.  These are logically almost equivalent to the
    language of the specification file.  This gives the user the
    option to enter job descriptions entirely from the command line. 
    These command-line options start with a '-' character.  If the
    first argument given starts with '-', a list of option arguments
    is assumed, otherwise the argument is taken as a file name.  If
    the specification file name starts with '-', one should prepend
    the name with "<tt>./</tt>" to avoid a parse error.

    <p>
    Only physical data are read, electrical data will be stripped in
    output.  A log file is produced when the <b>!assemble</b> command
    is run.  If not explicitly set with a
    <tt>LogFile</tt>/<tt>-log</tt> specification, this is named
    "<tt>assemble.log</tt>" and is written in the current directory. 
    The log file contains warning and error messages emitted by the
    readers during file processing, and should be consulted if a
    problem occurs.

    <a name="input"></a>
    <h2>File and Option Argument Format</h2>

    The <b>!assemble</b> command parses and executes a specification
    file or option list in the format described below.  The file text
    contains keyword directives and values which specify the
    operations to be performed.  Each active line begins with a
    keyword, and all keywords are case-insensitive.  Blank lines and
    lines that begin with non-alpha characters are taken as comments
    and are ignored.  Unrecognized tokens will generate an error and
    no processing will be done.  There is an almost one-to-one
    correspondence between file keywords and equivalent command-line
    options.  For options that require a string, the string can be
    double-quoted ("..."), and these <b>must</b> be quoted if they
    contain white-space.

    <p>
    The command input can either come from a file, or from the
    command-line arguments, but not both.

    <p>
    Overall, the input logically contains three levels of directives:

    <p>
    Header Block<br>
    Source Block<br>
    &nbsp;&nbsp;&nbsp;&nbsp;[Placement Block]<br>
    &nbsp;&nbsp;&nbsp;&nbsp;[...]<br>
    [...]

    <p>
    The Header Block contains a mandatory output file specification
    line, and optional additional lines.  The Source Block contains a
    reference to a source file, and may contain zero or more Placement
    Blocks, which identify a particular cell from that file.  The
    specification must contain at least one Source Block.

    <p>
    Indentation can be used in the specification file to highlight the
    scoping.  The same logic applies in an argument list, but may be
    less visible since all options appear in one line.

    <a name="header"></a>
    <h2>Header Block</h2>

    The Header Block contains global directives.  This must be
    followed by at least one Source Block, which specifies an input
    source.

    <dl>
    <dt><tt>OutFile</tt> <i>out_file_name</i><br>
    (option: <tt>-o</tt> <i>out_file_name</i>)<dd>
    This line or option is mandatory, and provides the name of the
    file to be used for output.  This must appear before any Source
    Blocks.  The output file name <b>must</b> have a recognized
    extension that corresponds to the format to be used.  These are:
    <table border = 0 cellpadding=2>
    <tr><td>CGX</td>     <td><tt>.cgx</tt></td></tr>
    <tr><td>CIF</td>     <td><tt>.cif</tt></td></tr>
    <tr><td>GDSII</td>   <td><tt>.gds, .str, .strm, .stream</tt></td></tr>
    <tr><td>OASIS</td>   <td><tt>.oas</tt></td></tr>
    </table>
    Only these extensions are recognized, however CGX and GDSII allow
    an additional <tt>.gz</tt> which will imply compression.

    <p>
    Basic defaults for the various output formats are as specified in
    the <a href="xic:exprt"><b>Export Control</b></a> panel
    from the <b>Convert Menu</b>, or from the corresponding variables.
    </dl>

    <dl>
    <dt><tt>LogFile</tt> <i>logfile</i><br>
    (option: <tt>-log</tt> <i>logfile</i>)<dd>
    This specifies the name of a log file which is produced during the
    run.  This will record messages, warnings, and errors that are
    emitted.  If not given, a log will be written using a default file
    name, which is "<tt>assemble.log</tt>" in the current directory,
    for the <b>!assemble</b> command.
    </dl>

    <dl>
    <dt><tt>TopCell</tt> <i>cellname</i><br>
    (option: <tt>-t</tt> <i>cellname</i>)<dd>
    This optional line or option specifies that a new top-level cell
    is to be created in output.  At most one <tt>TopCell</tt> can be
    given.  This must appear before any Source Block.

    <p>
    If a <tt>TopCell</tt> is given, a corresponding cell definition
    will be created in the output file, and all cells specified in
    Placement Blocks (the "placements") will be instantiated in the
    new cell.  Whether or not a <tt>TopCell</tt> is given, the
    placements will be streamed to the output file, meaning that the
    cell definitions needed to describe the cell and possibly its
    hierarchy will be added to the output file.  With a
    <tt>TopCell</tt> given, the placements will be instantiated in
    the new top cell in output.  Otherwise, there is no placement, and
    redundant Placement Blocks will be ignored.  The output file can
    end up with multiple top-level cells, which may be desirable when
    creating a library.
    </dl>

    <p>
    The Header can also contain any of the Source Block or Placement
    Block directives below.  These will be used as defaults in all
    blocks that follow, but can be overridden from within the blocks,
    or set, modified, or reset between Source Blocks.

    <a name="source"></a>
    <h2>Source Blocks</h2>

    The Source Blocks specify an input file or CHD, and provide
    directives that are active when the source is read.  The Source
    Block may contain Placement Blocks, which identify individual
    cells or cell hierarchies to be read.

    <p>
    The same file might be used in more than one Source Block, if the
    directives, such as cell name modification, are different in the
    two blocks.

    <p>
    The Source Blocks start with the following keyword:

    <dl>
    <dt><tt>Source</tt> <i>filename</i><br>
    (option: <tt>-i</tt> <i>filename</i>)<dd>
    This line or option represents the start of a Source Block for the
    given input file.  The file must be in one of the supported
    archive formats, and the format is recognized automatically, so
    there is no name suffix requirement as with the output file name.

    <p>
    The absence of any Placement Blocks defined in the Source Block
    implies that all cells found in the file will be read.

    <p>
    The <i>filename</i> can also be the access name of a <a
    href="xic:hier">CHD</a> which already exists in memory.  In this
    case, the CHD is used for access, and cell names given in
    Placement Blocks must include any cell name mapping which is used
    in the CHD.

    <p>
    Further, the <i>filename</i> can be that of a CHD saved to disk,
    such a with the <b>Save</b> button in the <b>Cell Hierarchy
    Digests</b> panel.  In this case, the CHD will be read into
    memory, and used as the source.

    <p>
    In any case where a Source Block contains a Placement Block, a
    temporary CHD will be created anyway if one is not given, so
    explicitly naming the CHD may save time/space in some cases.

    <p>
    In cases where a CHD is named, but no Placement Blocks are given,
    the hierarchy of the CHD's default cell will be streamed.  The
    default cell is the first top-level cell found in the file, or can
    be <a href="xic:chdconfig">configured</a> into the CHD.
    </dl>

    The Source Blocks can be terminated with:

    <dl>
    <dt><tt>EndSource</tt><br>
    (option: <tt>-i-</tt>)<dd>
    This optional keyword or option terminates the present Source
    Block.  Lines or text tokens that follow, up to another
    <tt>Source</tt> keyword or <tt>-i</tt> option, are taken in the
    context of the Header Block.  Thus, directives can be set,
    modified, or reset between Source Blocks, and will remain in force
    (in the Header Block context) until reset or modified between
    subsequent Source Blocks.  This keyword is optional, as it is
    implicit if another <tt>Source</tt> line or <tt>-i</tt> option is
    given.  It is required only if one wishes to change the directives
    in the Header context for subsequent Source Blocks.
    </dl>

    Within the Source Block, one may find Placement Blocks, Source
    Block directives, and Placement Block directives.

    <a name="sbcmds"></a>
    <h2>Source Block Directives</h2>

    The Source Block directives can be given in the context of the
    Header Block, in which case they serve as defaults for the Source
    Blocks that follow.  They can also be given in a Source Block, in
    which case they apply in that Source Block only, and override a
    similar directive active from a definition in the Header Block
    context.  The term "Header Block context" means that the
    definition appears before any Source Block, or after an
    <tt>EndSource</tt> line (<tt>-i-</tt> option) but before the next
    <tt>Source</tt> line (<tt>-i</tt> option).

    <p>
    The Source Block directives can not appear inside of Placement
    Blocks, where they would have no meaning.  Thus, in a Source
    Block, Source Block directives can appear before the Placement
    Blocks, or between <tt>EndPlace</tt> lines (<tt>-c-</tt> option)
    and the next <tt>Place</tt> (<tt>-c</tt> option) or
    <tt>PlaceTop</tt> line (<tt>-ctop</tt> option).  The directives
    that apply are those logically in force at the end of the Source
    Block.  The Source Block directives apply to the Source Block, and
    will have the same effect for all contained Placement Blocks,
    regardless of ordering.

    <p>
    The following lines define Source Block directives:

    <dl>
    <dt><tt>LayerList</tt> <i>list_of_layer_names</i><br>
    (option: <tt>-l</tt> <i>list_of_layer_names</i>)<dd>
    This saves a list of space-separated <a href="layername">layer
    names</a> or hex-encoded pseudo-names to be used with the layer
    filtering directives <tt>OnlyLayers</tt> (<tt>-n</tt> option) and
    <tt>SkipLayers</tt> (<tt>-k</tt> option).  This directive in
    itself does not alter output.  This list is implied when a
    <i>list_of_layer_names</i> is provided with these keywords.  In
    the command line, the list of layer names must be quoted if it
    contains more than one entry, but this is not required in a file.
    </dl>

    <dl>
    <dt><tt>OnlyLayers</tt> [<i>list_of_layer_names</i>]<br>
    (option: <tt>-n</tt>)<dd>
    When active, only the listed layers will be used in output,
    geometry on other layers will be skipped.  Arguments following
    this keyword will be used to set or reset the <tt>LayerList</tt>,
    and have the same interpretation as for that keyword.  If no
    arguments follow, the <tt>LayerList</tt> currently in scope will
    be used.  The <tt>-n</tt> command line token <i>does not</i>
    accept a list of layer names, unlike the corresponding keyword. 
    This must be separately specified with a <tt>-l</tt> option.
    </dl>

    <dl>
    <dt><tt>NoOnlyLayers</tt><br>
    (option: <tt>-n-</tt>)<dd>
    Turn off restriction to layers in the <tt>LayerList</tt>, if the
    <tt>OnlyLayers</tt> directive (<tt>-n</tt> option) is in force. 
    The corresponding <tt>LayerList</tt> remains defined.
    </dl>

    <dl>
    <dt><tt>SkipLayers</tt> [<i>list_of_layer_names</i>]<br>
    (option: <tt>-k</tt>)<dd>
    When active, listed layers will not appear in output, geometry on
    layers not listed will appear in output.  Arguments following this
    keyword will be used to set or reset the <tt>LayerList</tt>, and
    have the same interpretation as for that keyword.  If no arguments
    follow, the <tt>LayerList</tt> currently in scope will be used. 
    The <tt>-k</tt> command line token <i>does not</i> accept a list
    of layer names, unlike the corresponding keyword.  This must be
    separately specified with a <tt>-l</tt> option.
    </dl>

    <dl>
    <dt><tt>NoSkipLayers</tt><br>
    (option: <tt>-k-</tt>)<dd>
    Turn off layer skipping, if the <tt>SkipLayers</tt> directive
    (<tt>-k</tt> option) is currently in force.  The associated
    <tt>LayerList</tt> remains defined.
    </dl>

    <dl>
    <dt><tt>LayerAliases</tt> <i>name1</i>=<i>alias1</i>
      <i>name2</i>=<i>alias2</i> ...<br>
    (option: <tt>-a</tt> <i>name1</i>=<i>alias1</i>
      <i>name2</i>=<i>alias2</i> ...)<dd>
    This keyword provides a list a layer aliasing definitions to apply
    in output.  The layer names can be hex-encoded pseudo-names when
    applicable.  This is similar to the <a href="layerchange">layer
    aliasing</a> found in the <b>Format Conversion</b> panel and
    elsewhere.  In the command line, the list must be quoted if it
    contains more than one entry, but this is not required in a file. 
    </dl>

    <dl>
    <dt><tt>ConvertScale</tt> <i>scale_factor</i><br>
    (option: <tt>-cs</tt> <i>scale_factor</i>)<dd>
    This directive has effect only in the case where there are no
    Placement Blocks, and is ignored otherwise.  This will scale all
    coordinates read from the source by the given factor, which can be
    in the range 0.001 through 1000.0.  Thus, in output, the
    corresponding cell definitions will be scaled by this factor. 
    This is similar to the <tt>Scale</tt> Placement Block directive
    (<tt>-s</tt> option), but applies when there are no Placement
    Blocks and Placement Block directives are ignored.
    </dl>

    <dl>
    <dt><tt>ToLower</tt><br>
    (option: <tt>-tlo</tt>)<dd>
    This sets a flag to indicate conversion of upper case cell names
    to lower case in output.  Mixed-case cell names are unaffected.
    </dl>

    <dl>
    <dt><tt>NoToLower</tt><br>
    (option: <tt>-tlo-</tt>)<dd>
    Turn off lower-casing, if the <tt>ToLower</tt> directive
    (<tt>-tlo</tt> option) is currently in force.
    </dl>

    <dl>
    <dt><tt>ToUpper</tt><br>
    (option: <tt>-tup</tt>)<dd>
    This sets a flag to indicate conversion of lower case cell names
    to upper case.  Mixed-case cell names are unaffected.
    </dl>

    <dl>
    <dt><tt>NoToUpper</tt><br>
    (option: <tt>-tup-</tt>)<dd>
    Turn off upper-casing, if the <tt>ToUpper</tt> directive
    (<tt>-tup</tt> option) is currently in force.
    </dl>

    <dl>
    <dt><tt>CellNamePrefix</tt> <i>prefix_string</i><br>
    (option: <tt>-p</tt> <i>prefix_string</i>)<dd>
    Cell name change prefix.  This operation occurs after case
    conversion.  The <i>prefix_string</i> is interpreted in the manner
    of the <a href="InCellNamePrefix"><b>InCellNamePrefix</b></a>
    variable.
    </dl>

    <dl>
    <dt><tt>CellNameSuffix</tt> <i>suffix_string</i><br>
    (option: <tt>-u</tt> <i>suffix_string</i>)<dd>
    Cell name change suffix.  This operation occurs after case
    conversion.  The <i>suffix_string</i> is interpreted in the manner
    of the <a href="InCellNameSuffix"><b>InCellNameSuffix</b></a>
    variable.
    </dl>

    <a name="place"></a>
    <h2>Placement Blocks</h2>

    Placement Blocks can appear only within Source Blocks.  Each
    Source Block can have zero or more Placement Blocks.  If no
    Placement Blocks are given, all cells in the source file are
    written to output, and Placement Block directives that may be in
    force are ignored.  If the Source Block specifies a CHD source,
    absent any Placement Blocks, the hierarchy of the CHD's default
    cell will be streamed to output.

    <p>
    A Placement Block is used to indicate a specific cell within the
    source file, which will be written to output.  The Placement Block
    directives specify actions to take, for example whether to process
    just this cell or its hierarchy, whether to use flattening and/or
    windowing, and the placement transform if the cell is to be
    instantiated in a given <tt>TopCell</tt>.

    <p>
    As cells are written to output, a table is maintained to prevent
    writing duplicate cell definitions.  Each cell needed to represent
    the cell hierarchies contained in the output file is written once
    only.  When different versions of the same cell are needed, such
    as with different scaling, the names of the cells are altered to
    avoid a name clash.  This is accomplished by appending
    "<tt>$</tt><i>N</i>", where <i>N</i> is an integer which makes the
    new name unique, to the cell names.

    <p>
    A new Placement Block, which can appear only within a Source
    Block, will begin with either of the following keywords or
    options:

    <dl>
    <dt><tt>Place</tt> <i>cellname</i> [<i>placement_name</i>]<br>
    (option: <tt>-c</tt> <i>cellname</i>)<dd>
    The <i>cellname</i>, which must name a cell in the source file,
    will be included in the output file.  If a <tt>TopCell</tt> was
    given, the cell will also be instantiated in the given top cell. 
    The <i>placement_name</i>, if given, will replace <i>cellname</i>
    in output.  In either case, any cell name alteration presently in
    force will be applied.  If a Placement Block matches a previous
    block except for the transformation parameters
    (<tt>Translate</tt>, <tt>Rotate</tt>, <tt>Magnify</tt>,
    <tt>Reflect</tt>), then if a <tt>TopCell</tt> was given, an
    instance will be added with the new transform, but the cell
    definitions are already in the output and will not be streamed. 
    Thus, in this case with no <tt>TopCell</tt>, there would be no
    addition to output.

    <p>
    In a command line, the <i>placement_name</i> can not follow the
    <i>cellname</i> as in a file.  Rather, there is a special option
    token
    <blockquote>
    <tt>-ca</tt> <i>placement_name</i>
    </blockquote>
    that can appear within the Placement Block which specifies the
    name change.
    </dl>

    <dl>
    <dt><tt>PlaceTop</tt> [<i>placement_name</i>]<br>
    (option: <tt>-ctop</tt>)<dd>
    The <tt>PlaceTop</tt> line (<tt>-ctop</tt> option) is equivalent
    to a <tt>Place</tt> line (<tt>-c</tt> option), except that it will
    automatically select the first top-level cell found in the source. 
    It is equivalent to the <tt>Place</tt> line (<tt>-c</tt> option)
    with the name of this cell as the first (only) argument.  This is
    convenient when the top-level cell name is unknown.  Unlike the
    keyword, the <tt>-ctop</tt> option does not take a following
    <i>placement_name</i>, which must be given by a <tt>-ca</tt> option
    within the Placement Block.
    </dl>

    A Placement Block can be terminated with:

    <dl>
    <dt><tt>PlaceEnd</tt><br>
    (option: <tt>-c-</tt>)<dd>
    This optional keyword will end the current Placement Block. 
    Subsequent lines will be accepted in the scope of the containing
    Source Block.  This keyword is optional, as it is implicit if a
    <tt>Place</tt> or <tt>PlaceTop</tt> keyword (<tt>-c</tt> or
    <tt>-ctop</tt> option) is given.  It is useful if one needs to
    add, modify, or reset Placement Block directives in the Source
    Block scope, which will apply to subsequent Placement Blocks.
    </dl>

    <p>
    A Placement Block may contain any of the Placement Block
    directives, which control how the cell is treated in output.  The
    transformations apply only when a <tt>TopCell</tt> was given in
    the Header Block, and control the location and orientation of the
    instantiation.

    <a name="pbcmds"></a>
    <h2>Placement Block Directives</h2>

    The Placement Block directives can appear in the Header Block
    context, the Source Block context, or within a Placement Block. 
    Thus, they can appear virtually anywhere in the specification file
    or command line, though the location alters the scope.

    <p>
    If given in the Header Block context, meaning that the directive
    appears before the first Source Block, or after an
    <tt>EndSource</tt> line (<tt>-i-</tt> option) but ahead of the
    next <tt>Source</tt> line (<tt>-i</tt> option), then the directive
    will be active as a default in all Source Blocks that follow,
    until the directive is changed or reset in the Header Block
    context.

    <p>
    Similarly, if a Placement Block directive is given in a Source
    Block, it will override a similar directive set in the Header
    Block scope, and will apply to all Placement Blocks that follow
    within the Source Block, until changed or reset in the context of
    the same Source Block.  Being given in a Source Block, or in the
    context of a Source Block, means that the directive appears before
    the first <tt>Place</tt> or <tt>PlaceTop</tt> line (<tt>-c</tt> or
    <tt>-ctop</tt> option), or after an <tt>EndPlace</tt> line
    (<tt>-c-</tt> option) but before the next <tt>Place</tt> or
    <tt>PlaceTop</tt> line or equivalent options.

    <p>
    If the Placement Block directive appears within a Placement Block,
    it will override a similar directive set in the Source Block or
    Header Block, and will apply to the current Placement Block only.

    <p>
    Placement Block directives are ignored when reading a source that
    has no Placement Blocks.

    <p>
    The following directives define the transformation applied to an
    instantiation of the cell in the <tt>TopCell</tt>.  These will be
    ignored unless a <tt>TopCell</tt> was given.

    <dl>
    <dt><tt>Translate</tt> <i>x y</i><br>
    (options: <tt>-x</tt> <i>x</i> <tt>-y</tt> <i>y</i>)<dd>
    Specify the translation coordinates.  If not given, the default is
    0, 0.  Note that the keyword corresponds to two command-line
    options.
    </dl>

    <dl>
    <td><tt>Rotate</tt> <i>angle</i><br>
    (option: <tt>-ang</tt> <i>angle</i>)<dd>
    Specify a rotation angle, which must be a multiple of 45 degrees. 
    If not given, the default is no rotation.
    </dl>

    <dl>
    <td><tt>Magnify</tt> <i>magn</i><br>
    (option: <tt>-m</tt> <i>magn</i>)<dd>
    Specify an instance magnification.  If not given, the default is 1.0.
    Values from .001 to 1000.0 are accepted.
    </dl>

    <dl>
    <dt><tt>Reflect</tt><br>
    (option: <tt>-my</tt>)<dd>
    Apply a mirror-Y transformation (before rotation, if any).
    </dl>

    <dl>
    <dt><tt>NoReflect</tt><br>
    (option: <tt>-my-</tt>)<dd>
    Turn off the mirror-Y transformation, if the <tt>Reflect</tt>
    directive (<tt>-my</tt> option) is currently in force.
    </dl>

    <p>
    The following directives initiate operations on the cell
    definition, as it is written to output.  These are performed
    whether or not a <tt>TopCell</tt> was defined.

    <dl>
    <dt><tt>Scale</tt> <i>scale_factor</i><br>
    (option: <tt>-s</tt> <i>scale_factor</i>)<dd>
    The cells read from the source will have all coordinates
    multiplied by the scale factor, which can be in the range .001 -
    1000.0.  This is distinct from the <tt>Magnify</tt> factor, which
    applies only to the instance created in the <tt>TopCell</tt>, and
    will in effect multiply the scale factor.  When there are no
    Placement Blocks, and so Placement Block directives are ignored,
    the <tt>ConvertScale</tt> Source Block directive (<tt>-cs</tt>
    option) can be used to obtain the same effect.
    </dl>

    <dl>
    <dt><tt>NoHier</tt><br>
    (option: <tt>-h</tt>)<dd>
    If given, only the specified cell is written to output, and not
    its complete hierarchy as is the normal case.  This can produce
    output files with unresolved subcell references, which must be
    satisfied by some means.
    </dl>

    <dl>
    <dt><tt>NoNoHier</tt><br>
    (option: <tt>-h-</tt>)<dd>
    Turn off the no-hierarchy mode, if the <tt>NoHier</tt> directive
    (<tt>-h</tt> option) is currently in force.
    </dl>

    <dl>
    <dt><tt>NoEmpties [<i>N</i>]</tt><br>
    (option: <tt>-e[<i>N</i>]</tt>)<dd>
    These enable various permutations of the empty cell filtering
    operations, as <a href="ecfilt">described</a> for the
    <b>Format Conversion</b> panel.  These are:
    <dl>
    <dt>"<tt>NoEmpties</tt>" or "<tt>NoEmpties 1</tt>"<br>
    (option: "<tt>-e</tt>" or "<tt>-e1</tt>")<dd>
    Turn on both pre- and post-filtering.
    <dt>"<tt>NoEmpties 2</tt>"<br>
    (option: "<tt>-e2</tt>")<dd>
    Turn on pre-filtering only.
    <dt>"<tt>NoEmpties 3</tt>"<br>
    (option: "<tt>-e3</tt>")<dd>
    Turn on post-filtering only.
    <dt>"<tt>NoNoEmpties</tt>" or "<tt>NoEmpties 0</tt>"<br>
    (option: "<tt>-e-</tt>" or "<tt>-e0</tt>")<dd>
    Turn off all empty cell filtering.
    </dl>
    </dl>

    <dl>
    <dt><tt>NoNoEmpties</tt><br>
    (option: <tt>-e-</tt>)<dd>
    Turn off empty cell filtering, if the <tt>NoEmpties</tt> directive
    (<tt>-e</tt> option) is currently in force (above).  These have
    synonyms "<tt>NoEmpties 0</tt>" and "<tt>-e0</tt>".
    </dl>

    <dl>
    <dt><tt>Flatten</tt><br>
    (option: <tt>-f</tt>)<dd>
    If given, all geometry under the cell being read will be written
    as part of the cell being read, i.e., the cell hierarchy will be
    flattened.  The <tt>NoHier</tt> directive (<tt>-h</tt> option) is
    ignored if this is active.
    </dl>

    <dl>
    <dt><tt>NoFlatten</tt><br>
    (option: <tt>-f-</tt>)<dd>
    Turn off flattening, if the <tt>Flatten</tt> directive (<tt>-f</tt>
    option) is currently in force.
    </dl>

    <dl>
    <dt><tt>Window</tt> <i>left bottom right top</i><br>
    (option: <tt>-w</tt> <i>left</i>,<i>bottom</i>,<i>right</i>,<i>top</i>)<dd>
    If given, only the subcells (if <tt>NoHier</tt> is not active) and
    objects needed to describe the given area in the cell being placed
    will be written.  The coordinates apply to <i>cellname</i> after
    any scaling is applied, and are given in microns.  The four
    numbers can be separated by commas and/or white space.  In the
    command line, if white space is present between numbers, the four
    numbers must be quoted.  but this is not required in a file.
    </dl>

    <dl>
    <dt><tt>Clip</tt><br>
    (option: <tt>-cl</tt>)<dd>
    If <tt>Window</tt> was given, this will cause geometry to be
    clipped to the window.
    </dl>

    <dl>
    <dt><tt>NoClip</tt><br>
    (option: <tt>-cl-</tt>)<dd>
    Turn off clipping, if the <tt>Clip</tt> directive (<tt>-cl</tt>
    option) is currently in force.
    </dl>

!!SEEALSO
keybang

!! 120310
!!KEYWORD
!splwrite
!!TITLE
!splwrite
!!HTML
    <b>Syntax: <tt>!splwrite</tt> <tt>-i</tt> <i>filename</i>
      <tt>-o</tt> <i>basename</i>.<i>ext</i> &nbsp;
     [<tt>-c</tt> <i>cellname</i>]<br>
      <tt>-g</tt> <i>gridsize</i> &nbsp;|
      <tt>-r</tt> <i>l,b,r,t</i>&nbsp;[<i>,l,b,r,t</i>&nbsp;]...
      &nbsp;[<tt>-b</tt> <i>bloatval</i>] [<tt>-w</tt> <i>l,b,r,t</i>&nbsp;]
      [<tt>-f</tt>] [<tt>-m</tt>] [<tt>-cl</tt>] [<tt>-e</tt>[<i>N</i>]]
      [<tt>-p</tt>]</b>

    <p>
    This command will write output files corresponding to a list of
    rectangular regions, or to the partitions of a square grid
    logically covering all or part of a specified cell in a given
    layout file.  The output files contain physical data only.  These
    files can be flat or hierarchical.

    <p>
    The arguments are as follows:

    <p>
    <dl>
    <dt><tt>-i</tt> <i>filename</i><dd>
    This mandatory argument specifies a path to a layout file, the
    access name of a <a href="xic:hier">Cell Hierarchy Digest</a> (CHD)
    in memory, or a path to a saved CHD file.  This source will provide
    cell data as input.
    </dl>

    <dl>
    <td><tt>-o</tt> <i>basename</i>.<i>ext</i><dd>
    This mandatory argument provides the base name of the output files
    that will be created, and the type of file to write.  There are
    generally two components of the argument, separated by a period. 
    The <i>basename</i> component may be absent, but the period must
    remain.  If the <i>basename</i> is absent, the name of the
    top-level cell being split will be used. 

    <p>
    The <i>ext</i>, which follows the period, must be one of the
    following to indicate the file format to be used for output.
    <table border = 0 cellpadding=2>
    <tr><td>CGX</td>     <td><tt>.cgx</tt></td></tr>
    <tr><td>CIF</td>     <td><tt>.cif</tt></td></tr>
    <tr><td>GDSII</td>   <td><tt>.gds, .str, .strm, .stream</tt></td></tr>
    <tr><td>OASIS</td>   <td><tt>.oas</tt></td></tr>
    </table>
    The GDSII and CGX extensions can be followed by "<tt>.gz</tt>",
    which will indicate <tt>gzip</tt> compression.

    <p>
    When writing a list of regions, the file names produced will have
    the form
    <blockquote>
    <i>basename</i><i>N</i>.<i>ext</i>
    </blockquote>
    where <i>N</i> is a 1-based index of the region in the order
    given.  When writing grid cells, the file names produced will have
    the form
    <blockquote>
    <i>basename</i>_<i>X</i>_<i>Y</i>.<i>ext</i>
    </blockquote>
    where <i>X</i> and <i>Y</i> are the 0-based indices of the
    corresponding grid cell (the origin is the lower-left corner).
    </dl>

    <dl>
    <dt><tt>-c</tt> <i>cellname</i><dd>
    This optional argument specifies the name of the cell to be used
    as the top-level in output.  If not given, this will be the first
    top-level cell found in the input file, or, if the input source is
    a CHD, the default cell <a href="xic:chdconfig">configured</a>
    into the CHD will be used.
    </dl>

    Exactly one of the following two options must be given.

    <dl>
    <dt><tt>-g</tt> <i>gridsize</i><dd>
    This argument specifies the length, in microns, of the side of a
    square grid cell.  The area to be written will be tiled with a
    grid of this size, with the origin at the lower left corner.  Each
    grid cell with nonzero overlap area with the area to be written
    will have a corresponding output file produced.
    </dl>

    <dl>
    <dt><tt>-r</tt> <i>l,b,r,t</i>&nbsp;[<i>,l,b,r,t</i>]&nbsp;...<dd>
    This provides a list of rectangular regions to write, as a
    comma-separated list of coordinates in microns.  Each region is
    specified by four coordinates in the order given, with no white
    space.

    <p>
    The regions can be given with a single <tt>-r</tt> followed by any
    number of concatenated regions, as implied above.  However, any
    number of <tt>-r</tt> options with region lists can be given, the
    regions will be processed in order.  Some users may find it more
    convenient to specify the regions individually, each with a
    separate <tt>-r</tt> option.
    </dl>

    <dl>
    <dt><tt>-b</tt> <i>bloatval</i><dd>
    This optional argument specifies how much, in microns, the grid
    cells will be bloated before the write operation.  If positive,
    the grid cells will be expanded, and the files will logically
    overlap.  The value can also be negative, which will leave
    logically unwritten area between output files.

    <p>
    If a region list is specified rather than a grid, the bloating
    will be applied to each region.
    </dl>

    <dl>
    <dt><tt>-w</tt> <i>l,b,r,t</i><dd>
    This specifies a rectangular area, in the top-level cell being
    written, which will be included in the output files.  The four
    numbers are given in microns, separated by commas, with no
    intervening white space.  If not provided, the entire cell area is
    understood.
    </dl>

    <dl>
    <dt><tt>-f</tt><dd>
    If this flag is given, the output files will be flat.  All geometry
    will be contained in the top-level cell of each file.  Be aware that
    this can consume a lot of disk space.

    <p>
    If not given, the output files will maintain the hierarchy of the
    original file.  In this mode, only the geometry needed to fully
    render the area of the top-level cell corresponding to the
    (possibly bloated) grid cell area is retained.  Subcells may
    therefor contain only part of the original geometry, or may not
    appear at all if not instantiated within the area.  Subcells may
    also become empty, these are not automatically stripped.
    </dl>

    <dl>
    <dt><tt>-m</tt><dd>
    If flattening, this option specifies that a suffix "_<i>N</i>"
    is added to the top cell name in each file, with <i>N</i> an
    integer, so as to make the cell names unique in the collection. 
    This will facilitate subsequent merging of data from the files
    by avoiding cell name clashes.  Without this option, the files
    would have the same cell name, the same name as the original
    top-level cell.  This option is ignored if not flattening
    (<tt>-f</tt> not given).
    </dl>

    <dl>
    <dt><tt>-cl</tt><dd>
    This flag will cause geometry to be clipped at the (possibly
    bloated) grid cell boundaries.  This applies whether flattening or
    not.  Note that when not flattening, clipping does not guarantee that
    geometry is confined to the clip area.
    </dl>

    <dl>
    <dt><tt>-e[<i>N</i>]</tt><dd>
    This will enable empty cell filtering, as <a
    href="ecfilt">described</a> for the <b>Format Conversion</b> panel. 
    The options are:
    <dl>
    <dt><tt>-e</tt> or <tt>-e1</tt><dd>
    Turn on both pre- and post-filtering.
    <dt><tt>-e2</tt><dd>
    Turn on pre-filtering only.
    <dt><tt>-e3</tt><dd>
    Turn on post-filtering only.
    <dt><tt>-e0</tt><dd>
    Turn off all empty cell filtering (no operation).
    </dl>
    </dl>

    <dl>
    <dt><tt>-p</tt><dd>
    This option specifies that an alternative "parallel" writing
    algorithm is used when creating output.  In this case, the
    input file is read once only, and content is dispatched to the
    appropriate output files.  The normal operation is sequential,
    where the input file is scanned for each output file.  The
    parallel method is expected to be faster, though results may
    vary.
    </dl>

    <p>
    The command will create a temporary CHD, if necessary.  Each grid
    region is written out sequentially, in the manner of <a
    href="xic:convt#region">windowing</a> from the <b>Format
    Conversion</b> panel from the <b>Convert Menu</b>.

!!SEEALSO
keybang
ChdWriteSplit


!! ----------------------------------------------------------------------------
!! Current Directory
!! ----------------------------------------------------------------------------

!! 053108
!!KEYWORD
!cd
!!TITLE
!cd
!!HTML
    <b>Syntax: <tt>!cd</tt> [<i>directory</i>]</b>

    <p>
    The <b>!cd</b> command changes the current working directory, as
    known to <i>Xic</i>, to <i>directory</i>.  If no directory is
    given, the user's home directory is understood.

!!SEEALSO
keybang

!! 053108
!!KEYWORD
!pwd
!!TITLE
!pwd
!!HTML
    <b>Syntax: <tt>!pwd</tt></b>

    <p>
    This command will print the <i>Xic</i> current working directory on the
    <a href="promptline">prompt line</a>.

!!SEEALSO
keybang


!! ----------------------------------------------------------------------------
!! Diagnostics
!! ----------------------------------------------------------------------------

!! 053108
!!KEYWORD
!time
!!TITLE
!time
!!HTML
    <b>Syntax: <tt>!time</tt></b>

    <p>
    Print the elapsed program run time, in seconds, in the console
    window.

!!SEEALSO
keybang

!! 080910
!!KEYWORD
!timedbg
!!TITLE
!timedbg
!!HTML
    <b>Syntax: <tt>!timedbg</tt> [<tt>y</tt>|<tt>n</tt> [-<i>level</i>]
    [<i>logfile</i>]]</b>

    <p>
    This command enables or disables printing of internal timing
    information for display and DRC operations, and others.

    <p>
    If given with no arguments, a message is printed on the prompt line
    indicating whether or not timing info is being printed.

    <p>
    If the first argument is "<tt>y</tt>" or "<tt>on</tt>", timing
    information will be printed.  This can be followed by an optional
    <i>level</i> which is an integer (following a hyphen) that sets the
    maximum level of sub-timing info to print.  If 0, only the "top
    level" timing results are shown.  If a file name appears, it gives
    a path to a file where the information will be written. 
    Otherwise, or if the file can't be opened, output goes to the
    console window.

    <p>
    If the first argument is "<tt>n</tt>" or "<tt>off</tt>", timing
    information will not be printed.  This has no effect unless timing
    info printing is enabled.

    <p>
    In the output, indentation is used to indicate the "level" of the
    measurement.  Times printed for a given level include all of the
    times listed above at a greater indentation level after a previous
    line at the same level.  A greater indentation level indicates a
    timing measurement of a sub-component of the operation.

!!SEEALSO
keybang

!! 053108
!!KEYWORD
!xdepth
!!TITLE
!xdepth
!!HTML
    <b>Syntax: <tt>!xdepth</tt></b>

    <p>
    This prints two numbers on the console.  The first number is the
    current transform stack depth, which should always be 0.  The
    second number is the transform stack maximum depth used since the
    last <b>!xdepth</b> call or program start.  This is rather useless
    except for debugging "Transform stack full" errors.

!!SEEALSO
keybang

!! 053108
!!KEYWORD
!bincnt
!!TITLE
!bincnt
!!HTML
    <b>Syntax: <tt>!bincnt</tt> [<i>layername</i> [<i>level</i>]]</b>

    <p>
    This is for debugging purposes, and for the curious.

    <p>
    This command prints some database statistics on the console
    window.  If no <i>layername</i> is given, the layer examined will
    be "$$", the internal layer that contains subcell instances.  The
    message will look something like

    <blockquote><tt>
    Cell noname Layer CSP<br>
    levels 3, nodes 7, frac 0.928571, items 46 (allocated 46)
    </tt></blockquote>

    This indicates that the tree structure for the data items on layer
    CSP has depth 3, 7 nodes other than the data nodes, occupancy
    fraction 0.93, and 46 data items, which matches the cached
    allocation number.

    <p>
    If a number follows the layer name, the enclosing bounding box for
    each sub-tree at the given level is transiently shown on-screen.

!!SEEALSO
keybang

!! 062313
!!KEYWORD
!netxp
!!TITLE
!netxp
!!HTML
    <b>Syntax: <tt>!netxp</tt> <i>net expression</i></b>

    <p>
    This will parse the given <a href="elec:netname">net
    expression</a> into an internal representation, then reconvert
    this to a string which is printed in the console window.  The
    expression will be iterated, and each bit expression will also be
    printed.  This is a diagnostic for the net expression parser, but
    may also be useful to the user who is learning about net
    expressions.

!!SEEALSO
keybang

!! 102614
!!KEYWORD
!pcdump
!!TITLE
!pcdump
!!HTML
    <b>Syntax: <tt>!pcdump</tt> [<i>filename</i>]</b>

    <p>
    This will dump the default parameter list for every parameterized
    cell (pcell) evaluated during the session.  The list is in the
    format of the <a href="prpty:pc_params"><b>pc_params</b></a>
    property, including <a href="constraint">constraints</a>.
!!IFDEF OpenAccess
    This
    can be useful for viewing the parameters and constraints of
    OpenAccess pcells, as they lack a native super-master and thus the
    <b>pc_params</b> property.
!!ENDIF

    <p>
    The argument is the name of a file to create for output.  If not
    given, output goes to the console window.

!!SEEALSO
keybang


!! ----------------------------------------------------------------------------
!! Design Rule Checking
!! ----------------------------------------------------------------------------

!! 053108
!!KEYWORD
!showz
!!TITLE
!showz
!!HTML
    <b>Syntax: <tt>!showz [y|n]</tt></b>

    <p>
    The <b>!showz</b> command will turn on/off a transient display
    of the test areas used during DRC.  This is for debugging, or for
    the curious.  Given without an argument, the current show state is
    toggled.

!!SEEALSO
keybang

!! 091509
!!KEYWORD
!errs
!!TITLE
!errs
!!HTML
    <b>Syntax: <tt>!errs</tt></b>

    <p>
    This command will update the DRC error highlighting from an
    existing DRC error log file.  The action is identical with that of
    the <a href="xic:erupd"><b>Update Highlighting</b></a> button in
    the <b>DRC Menu</b>.

    <p>
    As it is redundant, this command may be removed in a future release.

!!SEEALSO
xic:drcmenu
keybang

!! 091509
!!KEYWORD
!errlayer
!!TITLE
!errlayer
!!HTML
    <b>Syntax: <tt>!errlayer</tt> <i>layer_name</i> [<i>prpty_num</i>]</b>

    <p>
    This command will create polygons on <i>layer_name</i>
    corresponding to the error regions currently stored in the list of
    highlighted design rule errors.  The layer will be created if it
    does not already exist, and will be cleared before updating (<i>be
    careful!</i>).  All objects are created in the current cell.  The
    second argument, if given, is an integer greater than 0 that is
    taken as a property number.  Each created object will be given a
    property with this number, with the text being the error message
    for the error.  If the argument is given but is not an unsigned
    integer larger than 0, no properties are stored.

    <p>
    This action is identical with that of the <a
    href="xic:erlyr"><b>Create Layer</b></a> button in the <b>DRC
    Menu</b>.  As it is redundant, this command may be removed in a
    future release.

!!SEEALSO
xic:drcmenu
keybang


!! ----------------------------------------------------------------------------
!! Electrical
!! ----------------------------------------------------------------------------

!! 030412
!!KEYWORD
!calc
!!TITLE
!calc
!!HTML
    <b>Syntax: <tt>!calc</tt> <i>expression</i></b>

    <p>
    This command started out as a debugging aid for the parameter
    handling code, but is actually pretty useful.

    <p>
    The <i>expression</i> is a math expression involving constants,
    parameter names, and the usual math operations and functions as
    provided for <i>WRspice</i> expressions.  This is separate from the
    <a href="xicscript">script</a> expression parser, but rather
    similar in operation (the two may merge some day).  The new
    expression handler accepts the <i>a</i> ?  <i>b</i> :  <i>c</i>
    construct, which is one difference.

    <p>
    Before evaluation, all parameter definitions in the electrical
    current cell are tabulated.  This includes the <b>param</b> properties
    of the cell, and any <tt>.param</tt> lines found in labels on the
    SPTX layer.  Parameters found can be used by name in the expression.

!!SEEALSO
keybang

!! 110613
!!KEYWORD
!check
!!TITLE
!check
!!HTML
    <b>Syntax: <tt>!check</tt></b>

    <p>
    This command will perform a consistency check of the electrical
    part of the current cell, and report any problems on the console
    screen.  Additionally, all labels which are not associated with
    a device or other property will become selected.  This command
    is for debugging purposes.  These checks are also performed when
    a new cell is read into <i>Xic</i>, with error messages directed
    to the log file.  If errors are found, in many cases they are
    repaired.  Use the <b>!check</b> command a second time to verify
    if the condition still exists.

    <p>
    Messages may be added to the <tt>read_</tt><i>xxx</i><tt>.log</tt>
    file produced when input is read if repairs were made.

!!SEEALSO
keybang

!! 053108
!!KEYWORD
!regen
!!TITLE
!regen
!!HTML
    <b>Syntax: <tt>!regen</tt></b>

    <p>
    The <b>!regen</b> command will regenerate all missing property
    labels in the schematic.  This is useful if a label was accidently
    deleted or otherwise lost due to some error.

!!SEEALSO
keybang

!! 030415
!!KEYWORD
!devkeys
!!TITLE
!devkeys
!!HTML
    <b>Syntax: <tt>!devkeys</tt></b>

    <p>
    This will dump the current device key mapping table to the console
    window.  The device keys are set in an internal table, which can
    be augmented or overridden by setting <a
    href="DeviceKeyV2"><b>DeviceKeyV2</b></a> properties in the device
    library (<a href="devlib"><tt>device.lib</tt></a>) file.

!!SEEALSO
keybang


!! ----------------------------------------------------------------------------
!! Extraction
!! ----------------------------------------------------------------------------

!! 051809
!!KEYWORD
!antenna
!!TITLE
!antenna
!!HTML
    <b>Syntax: <tt>!antenna</tt> [<i>layer_name</i> <i>layer_min_ratio</i>]...
    [<i>min_ratio</i>]</b>

    <p>
    In the design of CMOS circuits, design rules and guidelines often
    provide a limit on the area of a wire net connected to a MOS gate. 
    During processing, the wire net can act as an "antenna" which
    accumulates charge, potentially damaging the thin MOS gate oxide. 
    This command provides checking of antenna nets.

    <p>
    Note that this is part of the extraction system and not DRC.  The
    DRC system presently does not maintain a sophisticated enough
    state to identify device contacts or follow wire nets.

    <p>
    The <b>!antenna</b> command utilizes the values of the technology
    file extraction keywords <a href="Antenna"><tt>Antenna</tt></a>
    (in physical layer blocks) and <a
    href="AntennaTotal"><tt>AntennaTotal</tt></a>.  These keywords
    provide values which are used as defaults, which can be overridden
    from the command line.

    <p>
    If given without arguments, the <b>!antenna</b> command will
    generate an argument list constructed from the defaults (if any). 
    This is displayed in the prompt area, where it can be edited by
    the user.  The run begins when the user presses the <b>Enter</b>
    key.  If there are no defaults, or if an argument was given to the
    command, there is no prompt and the command runs immediately.

    <p>
    With no parameters given, the command will identify and print an
    entry for each wire net in the hierarchy of the current cell which
    connects to a MOS gate.  The results go to a file, created in the
    current directory, named <i>cellname</i><tt>.antenna.log</tt>,
    where <i>cellname</i> is the name of the current cell.  The user
    is given a chance to view this file when the operation completes.

    <p>
    The parameters provide a "filtering" function, whereby only
    entries outside of the filter range are printed in the file.  The
    filtering parameter is the ratio of wire net area to total gate
    area connected to the net.  These ratios can apply to individual
    layers contained in the wire net, or the total wire net area. 
    Only entries that exceed given parameters are printed in the log
    file.

    <p>
    For example,
    <blockquote>
    <tt>!antenna POLY 20 M1 30 50</tt>
    </blockquote>

    <p>
    This will print wire nets where at least one of the following is
    true:
    <ol>
    <li>The ratio of POLY area to gate area exceeds 20.
    <li>The ratio of M1 area to gate area exceeds 30.
    <li>The ratio of total wire net area to gate area exceeds 50.
    </ol>

    <p>
    Thus, the log file will typically contain only those nets that
    exceed the guidelines.

    <p>
    These "bad" nets can be displayed in the <b>Select Path</b> mode
    of the <a href="xic:exsel"><b>Path Selection Control</b></a>
    panel.  After the <b>!antenna</b> command has been run, and/or
    with the log file in the current directory, pressing the <b>Load
    Antenna file</b> button or the <b>f</b> key will prompt for an
    antenna net number.  This is the number in the log file that
    begins the report for each net.

    <p>
    The file will be accessed, and the corresponding wire net will be
    extracted and highlighted.  The wire net is identified via the
    reference bounding box provided in the log file, on the same line
    as the net number.

!! 021318
!!KEYWORD
!netext
!!TITLE
!netext
!!HTML
    <table border=0>
    <tr><td valign=top><b>jump to</b></td> <td>
    <a href="!netext#stage1"><b>Stage 1</b></a><br>
    <a href="!netext#stage2"><b>Stage 2</b></a><br>
    <a href="!netext#stage3"><b>Stage 3</b></a><br>
    <a href="!netext#args"><b>Command Arguments</b></a>
    </td></tr></table>

    <p>
    <b>Syntax: <tt>!netext</tt> <i>arguments</i>...</b>

    <p>
    <font color=red>This is an early implementation of a new
    capability.  Feedback and wish-lists from users is
    encouraged.</font>

    <p>
    The <b>!netext</b> command performs identification and extraction
    of physical wire nets from a layout.  There are a number of modes
    and features, but the final result is generally an <a
    href="oasis">OASIS</a> file containing a top-level cell with the
    same name as the original top-level cell, which contains a subcell
    for every wire net.  Each subcell contains all of the conductors
    that comprise the net, as if the original hierarchy were flat. 
    This file can be used as a starting point for further analysis,
    such as parasitic extraction using a field solver.

    <p>
    The full operation is performed in three stages.

    <a name="stage1"></a>
    <h2>Stage 1</h2>

    <ol>
    <li>Create a <a href="xic:hier">Cell Hierarchy Digest</a> (CHD) in
    memory for the input file, if necessary.

    <li>Divide the area of the top-level cell into a logical grid.

    <li>For each grid area, the CHD is used to read into memory a flat
    representation of the grid area, clipped to the grid.

    <li>The wire nets for this area are identified.  This can take
    into account device structures and exclusion areas.

    <li>An OASIS file is written to disk, which contains a subcell for
    each net found.  Up to four edge-mapping files are also produced,
    one each for the edges that are shared with another grid cell. 
    These files map the parts of the edge which coincide with the edge
    of a conducting object.
    </ol>

    <p>
    At the end of Stage 1, the work area on disk contains a number of
    OASIS files, one for each grid cell, and associated edge mapping
    files.

    <p>
    Note that the grid areas are processed sequentially.  On a
    computer with limited memory, the grid size should be "small" so
    as to not exhaust available memory, but even a modest computer can
    process very large files.  Note also that in theory this stage
    could easily be accelerated by use of multiple computers.  Stage 1
    is the most compute-intensive part of the flow.

    <a name="stage2"></a>
    <h2>Stage 2</h2>

    The second stage compares the two edge files for each shared grid
    boundary, and generates an equivalence file.  The equivalence file
    maps between the nets that abut at grid boundaries.  Once the edge
    files have been processed, the edge files are deleted.

    <a name="stage3"></a>
    <h2>Stage 3</h2>

    In the final stage, the individual OASIS files for each grid cell
    are combined, using the equivalence file, into a single OASIS
    file.  There are two ways that nets that extend across grid
    boundaries can be handled.  The "easy" way is to simply copy all
    net cells from all grid areas into the output.  For the nets that
    connect to other nets, choose a "primary" subnet (cell).  In this
    cell, instantiate the other net cells to which the primary subnet
    connects.

    <p>
    The alternative is to actually copy the subnet cell geometry into
    the primary cell.  This format is easier to work with, but
    requires more time and memory to construct.

    <p>
    When the output file is written, the equivalence file and the
    Stage 1 OASIS files are deleted, and the operation is complete.

    <p>
    If a net has an assigned name in the source file, (e.g., through a
    label or from a terminal) A NXNAME property will be given to the
    created net files.  This is property number 7149, and the string
    is the net name.  This is not presently used by <i>Xic</i>, but
    the net name may be useful to the user.  Beware if using a grid: 
    if flattening, the top net cell will contain the net name
    properties from all grid cells, so there may be duplicate or
    inconsistent name properties.  If not flattening, the primary and
    all subcells should be checked, each property applies only to the
    corresponding grid location.  In either case, conflicting names
    would need to be dealt with somehow.

    <a name="args"></a>
    <h2>Command Arguments</h2>

    <dl>
    <dt><tt>-f</tt> <i>filename</i><dd>
      This mandatory argument specifies the input source for batch net
      extraction.  the <i>filename</i> can be a path to a layout file
      in a <a href="xic:fsaf">supported format</a>, the access name of
      a CHD in memory, or a path to a saved CHD file.

      <p>
      The <a href="techfile">technology file</a> in use must match the
      source file, with the extraction parameters and keywords
      properly <a href="ext:setup">set up</a>.
    </dl>

    <dl>
    <dt><tt>-c</tt> <i>cellname</i><dd>
      This provides the name of the top-level cell for extraction.  If
      not given, the top-level cell used will be either the cell <a
      href="xic:chdconfig">configured</a> into the CHD source, if any,
      or the lowest-offset top-level cell found in the source layout
      file.
    </dl>

    <dl>
    <dt><tt>-g</tt> <i>gridsize</i><dd>
      if the "<tt>-w</tt>" (windowing) option is not given,
      this sets the grid size, in microns.  Use of a grid minimizes
      memory consumption for handling large designs.  For smaller
      designs gridding may not be necessary, so this option can be
      skipped or given as 0.  In this case the entire bounding box of
      the top-level cell is understood.  The OASIS file is produced,
      but there are no edge files, and no Stage 2 or Stage 3 steps.

      <p>
      The choice of a grid size is machine and layout dependent.  The
      objective is to choose as large a grid as possible, without
      exceeding memory limits or causing excessive page-swapping.  In
      general, some experimentation may be required to find the "best"
      grid size.  A starting point of 400 microns may be reasonable.
    </dl>

    <dl>
    <dt><tt>-v</tt><dd>
      If given, via objects will be included in the netlist cells and
      files.  Via layers are the layers with the <a
      href=Via"><tt>Via</tt></a> keyword given in the technology file. 
      The objects on these layers are clipped to the intersection
      areas of the two associated conductors.
    </dl>

    <dl>
    <dt><tt>-v+</tt><dd>
      This is similar to <tt>-v</tt>, but in addition the "check
      layers" (if any), clipped to the via object, will also be
      included in net cells and files.  The check layers are the
      layers used in the optional layer expression supplied on the
      <tt>Via</tt> line.  This expression must be "true" for a via
      object to actually represent a connection.  With <tt>-v</tt>
      given, the included vias are those that pass the check criteria,
      but the check layers are not included.  With <tt>-v+</tt>, the
      check layers will be included.

      <p>
      If the generated netlist file is read back into <i>Xic</i> and
      extraction run, the <tt>-v+</tt> option will allow the nets to
      be correctly re-extracted.  If the check layers are missing,
      this may fail, and extraction would certainly fail if vias are
      not included at all.
    </dl>

    <dl>
    <dt><tt>-vs</tt><dd>
      When there is no windowing or gridding in use and this option is
      given, standard vias will be retained as they are rather than
      being converted to equivalent geometry.  The net cells will
      contain the standard via placements from the net, from all
      hierarchy levels, as subcells.  Presently, this requires that
      the standard via sub-masters not be included in the source
      layout file, i.e., they are created within <i>Xic</i> as the
      file is read.
    </dl>

    <dl>
    <dt><tt>-w</tt> <i>l</i>,<i>b</i>,<i>r</i>,<i>t</i><dd>
      If a window is given, a grid size should not be given and will
      be ignored.  In this case, there is no grid, and the rectangular
      area given, as comma-separated dimensions in microns, is read
      into memory and processed as if it were a grid cell.  The OASIS
      file is produced, but there are no edge files, and no Stage 2 or
      Stage 3 steps.  If all values are 0, the effective area is the
      bounding box of the top-level cell, which is the default when no
      area or grid is given.
    </dl>

    <dl>
    <dt><tt>-b</tt> <i>basename</i><dd>
      This supplies a basename for the generated files.  It can have a
      path prefix, which will cause the generated files to be written
      in the given directory, which must exist.  If this argument is
      not given, the name of the top-level cell is used as the
      basename.
    </dl>

    <dl>
    <dt><tt>-nf</tt><dd>
      By default, in Stage 3 processing, the net cells will be flat. 
      If this argument is given, subnets will appear is cell instances
      in the "primary" net cell.
    </dl>

    <dl>
    <dt><tt>-nc</tt><dd>
      This will turn off compression in OASIS output files.  This is
      not a good idea, unless compression is not supported by the
      reader.
    </dl>

    <dl>
    <dt><tt>-ne</tt><dd>
      This turns off the part of the extraction that recognizes device
      structures, leaving only conductor grouping for connectivity
      determination.  This may be fine fo some applications, and
      avoids computation.  In MOS circuits, for example, if the Active
      layer is assumed to be a conductor, then all FETs will be
      shorted, drain to source.  However, using a <a
      href="Conductor"><tt>Conductor Exclude</tt></a> directive for
      Poly on Active should fix this.
    </dl>

    <dl>
    <dt><tt>-l</tt><dd>
      If this is given, when the flat data are read into memory for
      processing, any existing layer filtering is kept.  Without this
      option, when <tt>-ne</tt> is not given, all layers are read
      since these may affect device recognition.  When <tt>-ne</tt> is
      given, only <a href="Conductor"><tt>Conductor</tt> and <a
      href="Via"><tt>Via</tt></a> layers are read.
    </dl>

    <dl>
    <dt><tt>-k</tt><dd>
      If given, all working files are retained.  Without this option,
      edge files, etc.  are deleted when no longer needed.
    </dl>

    <dl>
    <dt><tt>-s1</tt><dd>
      If given, the operation will stop at the end of Stage 1.
    </dl>

    <dl>
    <dt><tt>-s2</tt><dd>
      If given, the operation will stop ath the end of Stage 2.
    </dl>

    <p>
    The grid cells are assigned x,y index numbers, according to
    position, with the 0,0 cell located in the lower left corner.  The
    cells are traversed left to right by row, from bottom to top. 
    Each net in a grid is assigned a number, which is the group number
    from extraction.  All three numbers are non-negative, and the
    triplets represent a unique designation for a subnet.  The net
    cells in the Stage 1 OASIS files files are names "<i>x_y_n</i>",
    i.e., the three numbers separated by underscores.

    <p>
    In the final OASIS file, the net cells are renamed <tt>n1</tt>,
    <tt>n2</tt>, ..., replacing the triples with an index number.  If
    instantiation is used, the subnet cells that are not primary nets
    retain their original names.  The primary subnet from among a group
    of connected subnets is the one that is lowest in "traversal
    order", which is the lowest group number in the first grid cell
    seen in a sweep left to right in the rows, ascending in y.

!!SEEALSO
xic:extmenu

!! 020615
!!KEYWORD
!addcells
!!TITLE
!addcells
!!HTML
    <b>Syntax: <tt>!addcells</tt></b>
 
    <p>
    This command adds "missing" instances to the current cell, in
    physical or electrical mode.  An instance is "missing" if it is
    referenced in the opposite mode of the current cell, but does not
    appear in the current cell.  Cells are not added if they are
    empty.  The new instances are arrayed below existing objects.  For
    example, suppose one creates a schematic consisting of several
    subcells from some library.  One can then switch to physical mode
    and use this command to obtain the physical instances, which can
    then be moved into place.  This avoids having to use the <a
    href="xic:place"><b>place</b></a> command (in the side menu).

!!SEEALSO
keybang

!! 070809
!!KEYWORD
!find
!!TITLE
!find
!!HTML
    <b>Syntax: <tt>!find</tt>
      [<i>devicename</i>[<tt>.</tt><i>prefix</i>[<tt>.</tt><i>indices</i>]]]</b>

    <p>
    This command will find and highlight devices in physical layout
    windows showing the current cell, and also highlight the
    corresponding device symbols in windows showing the schematic of
    current cell.  It is basically a command line version of the
    device listing/highlighting feature of the <a
    href="xic:dvsel"><b>Show/Select Devices</b></a> panel from the
    <b>Device Selections</b> button in the <b>Extract Menu</b>.

    <p>
    The argument list consists of at most three fields, separated by
    periods.  Missing fields are wildcards.  The <i>devicename</i> is
    one of the names from a <a href="deviceblock">device block</a> in
    the technology file.  The <i>prefix</i> is from the
    <tt>Prefix</tt> line of the device block.  The <i>indices</i> is a
    list of space or comma-separated integers, or hyphen-separated
    ranges of integers.  The integers are the index values of the
    physical devices.  If this field is not given, any index value
    will be highlighted, otherwise only the devices with an index that
    matches a value or falls in a range will be highlighted.

    <p>
    With no argument, any existing device highlighting will be erased.

    <p>
    If the first component is empty, or the keyword <tt>all</tt>, all
    devices known from the technology file are acted on.  Thus,
    "<tt>!find all</tt>" or "<tt>!find .</tt>" will display all known
    devices.  One can also give, for example, "<tt>!find ..1</tt>"
    which will show all devices with index 1.

!!SEEALSO
keybang

!! 053108
!!KEYWORD
!ptrms
!!TITLE
!ptrms
!!HTML
    <b>Syntax: <tt>!ptrms</tt> <tt>l|t [r]</tt></b>

    <p>
    Options can be space separated or grouped.  At least one of
    <tt>l</tt>, <tt>t</tt> must be given.  If <tt>l</tt> is given, the
    cell label markers will be moved to the default locations to the
    right of the parent cell.  If <tt>t</tt> is given, all device
    terminals will be undefined and moved to the lower left of the
    parent cell.  These actions can not be undone.  If <tt>r</tt> is
    given, the operation is performed recursively on subcells.  The
    characters <tt>c</tt>, <tt>d</tt> are equivalent to <tt>l</tt>,
    <tt>t</tt>.  This command is used primarily for debugging
    purposes.

!!SEEALSO
keybang

!! 013013
!!KEYWORD
!ushow
!!TITLE
!ushow
!!HTML
    <b>Syntax: <tt>!ushow</tt> [<i>types</i>]</b>

    <p>
    This command will highlight unassociated objects.  These are
    objects in physical mode that have no identified electrical
    counterpart, and vice-versa.

    <p>
    The <i>types</i> argument is a word containing characters that
    indicate the object types to display:
    <blockquote>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><td><tt>g</tt> or <tt>n</tt></td> <td>groups/nodes</td></tr>
    <tr><td><tt>d</tt></td> <td>devices</td></tr>
    <tr><td><tt>s</tt> or <tt>c</tt></td> <td>subcells/subcircuits</td></tr>
    </table>
    </blockquote>

    <p>
    If this argument is omitted, "<tt>gds</tt>" is the effective
    value, which will show all unassociated groups, devices, and
    subcircuits.

    <p>
    The command works in physical and electrical modes.  Display
    windows will highlight the appropriate unassociated objects for
    the window's display mode.

    <p>
    The highlighting is removed on a <a href="xic:desel">deselect</a>
    operation, with the menu button or otherwise.  Mostly, the objects
    are simply selected, however objects such as physical devices use
    other highlighting methods.

!!SEEALSO
keybang


!! 090714
!!KEYWORD
!fc
!!TITLE
!fc
!!HTML
    <b>Syntax: <tt>!fc keyword</tt> [<i>arg</i> ...]</b>

    <p>
    This command is a prompt-line equivalent to some of the
    functionality of the <a href="fcinterf">capacitance extraction
    interface</a>.  This interface is also controlled from the <a
    href="fcpanel"><b>Cap Extraction</b></a> panel, which is produced
    by the <a href="xic:exc"><b>Extract C</b></a> button in the <a
    href="xic:extmenu"><b>Extract Menu</b></a>.

    <p>
    The first argument is a keyword, which must be present and must be
    one of those listed below.  Additional arguments are specific to the
    keyword.  The keywords perform an operation that is equivalent to
    pressing one of the buttons in the <b>Cap Extraction</b> panel.

    <dl>
    <dt><tt>dump</tt> [<i>filename</i>]<dd>
    This will dump a unified list file using the name given in the
    argument, or the default name if no name is given.  The default
    name is the name of the current cell with a "<tt>.lst</tt>"
    suffix.

    <p>
    This is equivalent to pressing the <b>Dump Unified List File</b>
    button in the <b>Run</b> page of the <b>Cap Extraction</b> panel. 
    The format is compatible with the <i>FasterCap</i> program from <a
    href="http://fastfieldsolvers.com"><tt>FastFieldSolvers.com</tt></a>,
    and also the Whiteley Research version of <i>FastCap</i>, the
    latter requires use of the <a
    href="FcPanelTarget"><b>FcPanelTarget</b></a> variable.
    </dl>

    <dl>
    <dt><tt>run</tt> [<tt>-i</tt> <i>infile</i>] [<tt>-o</tt> <i>outfile</i>]
      [<tt>-r</tt> <i>resultfile</i>]<dd>
    If an <i>infile</i> is specified, that file will be taken as input
    to the capacitance extraction program, as if the <b>Run File</b> button
    in the <b>Run</b> page of the <b>Cap Extraction</b> panel was pressed
    and the <i>infile</i> specified in the text input area.  Otherwise, the
    action is as if the <b>Run Extraction</b> button was pressed instead.

    <p>
    The <i>outfile</i> is the file used for standard output from the
    extraction program during the run.  If not given, a temporary file
    will be used, and destroyed when the run completes, after copuying
    the content to the results file.  If a name is provided, that file
    name will be used, and the file will not be destroyed.

    <p>
    If no name is given for the <i>resultfile</i>, a default name will
    be used.  This file will contain input to and output from the
    extraction run.
    </dl>

!!SEEALSO
keybang

!! 090714
!!KEYWORD
!fh
!!TITLE
!fh
!!HTML
    <b>Syntax: <tt>!fh keyword</tt> [<i>arg</i> ...]</b>

    <p>
    This command is a prompt-line equivalent to some of the
    functionality of the <a href="fhinterf">inductance/resistance
    extraction interface</a>.  This interface is also controlled from
    the <a href="fhpanel"><b>LR Extraction</b></a> panel, which is
    produced by the <a href="xic:exlr"><b>Extract LR</b></a> button in
    the <a href="xic:extmenu"><b>Extract Menu</b></a>.

    <p>
    The first argument is a keyword, which must be present and must be
    one of those listed below.  Additional arguments are specific to
    the keyword.  The keywords perform an operation that is equivalent
    to pressing one of the buttons in the <b>Cap Extraction</b> panel.

    <dl>
    <dt><tt>dump</tt> [<i>filename</i>]<dd>
    This will dump a <i>FastHenry</i> input file using the name given
    in the argument, or the default name if no name is given.  The
    default name is the name of the current cell with a
    "<tt>.inp</tt>" suffix.

    <p>
    This is equivalent to pressing the <b>Dump FastHenry File</b>
    button in the <b>Run</b> page of the <b>LR Extraction</b> panel. 
    </dl>

    <dl>
    <dt><tt>run</tt> [<tt>-i</tt> <i>infile</i>] [<tt>-o</tt> <i>outfile</i>]
      [<tt>-r</tt> <i>resultfile</i>]<dd>
    If an <i>infile</i> is specified, that file will be taken as input
    to the inductance/resistance extraction program, as if the <b>Run
    File</b> button in the <b>Run</b> page of the <b>LR Extraction</b>
    panel was pressed and the <i>infile</i> specified in the text
    input area.  Otherwise, the action is as if the <b>Run
    Extraction</b> button was pressed instead.

    <p>
    The <i>outfile</i> is the file used for standard output from the
    extraction program during the run.  If not given, a temporary file
    will be used, and destroyed when the run completes, after copuying
    the content to the results file.  If a name is provided, that file
    name will be used, and the file will not be destroyed.

    <p>
    If no name is given for the <i>resultfile</i>, a default name will
    be used.  This file will contain input to and output from the
    extraction run.
    </dl>

!!SEEALSO
keybang


!! ----------------------------------------------------------------------------
!! Graphics
!! ----------------------------------------------------------------------------

!! 053108
!!KEYWORD
!setcolor
!!TITLE
!setcolor
!!HTML
    <b>Syntax: <tt>!setcolor</tt> <i>resourcename</i> <i>colorspec</i></b>

    <p>
    This command changes the <a href="techfile:attr#color">attribute
    colors</a> used within <i>Xic</i>.  The <i>resourcename</i> is a
    color keyword or alias from the list of attribute colors (follow
    the link above).  The <i>colorspec</i> is the name of a color or
    RGB triple in the same format as used in the <a
    href="resourcefile">resource file</a>.  Changing the colors will
    in general not change appearance until the feature is redrawn.

!!SEEALSO
keybang

!! 053108
!!KEYWORD
!display
!!TITLE
!display
!!HTML
    <b>Syntax: <tt>!display</tt> <i>display_string win_id</i></b>

    <p>
    This command will render the current cell in a foreign X window. 
    The X window id is passed as an integer in the second argument. 
    The first argument is the X display string corresponding to the
    server in which the window is cached.  The area to display is the
    same area currently defined for the main drawing window.  See the
    corresponding <a href="Display"><tt>Display</tt></a> script
    function for more information.

!!SEEALSO
keybang


!! ----------------------------------------------------------------------------
!! Grid
!! ----------------------------------------------------------------------------

!! 043009
!!KEYWORD
!sg
!!TITLE
!sg
!!HTML
    <b>Syntax: <tt>!sg</tt> [<i>regnum</i>]</b>

    <p>
    There is a set of eight registers that can hold grid parameters. 
    Thus, grids can be saved and quickly restored.  Whenever the grid
    is changed, for example with the <a href="xic:grid"><b>Set
    Grid</b></a> command in the <b>Main Window</b> sub-menu of the <a
    href="xic:attrmenu">Attributes Menu</a>, the previous grid is
    saved in register 0. 

    <p>
    This will save the grid of the drawing window containing the
    pointer (or the main drawing window if the pointer is not in a
    drawing window) into register <i>regnum</i>.  The <i>regnum</i>
    must be an integer 0-7, and is taken as 0 if not given.

    <p>
    The grid can be restored from a register with the <a
    href="!rg"><b>!rg</b></a> command.

!!SEEALSO
keybang

!! 053108
!!KEYWORD
!rg
!!TITLE
!rg
!!HTML
    <b>Syntax: <tt>!rg</tt> [<i>regnum</i>]</b>

    <p>
    This will set the grid of the drawing window containing the
    pointer (or the main drawing window if the pointer is not in a
    drawing window) to the grid stored in <i>regnum</i>.  The
    <i>regnum</i>, if given, is an integer 0-7.  If not given, 0 is
    understood.  A register that has not been saved will return a
    default grid style (1 micron, no snapping, dot grid).  In
    addition, the grid storage register 0 takes the value of the
    previous grid.

    <p>
    The grid can be saved to a register with the <a
    href="!sg"><b>!sg</b></a> command.

!!SEEALSO
keybang


!! ----------------------------------------------------------------------------
!! Help
!! ----------------------------------------------------------------------------

!! 012016
!!KEYWORD
!help
!!TITLE
!help
!!HTML
    <b>Syntax: <tt>!help</tt> <i>word</i></b>

    <p>
    This is a back-door to the <a href="helpsys">help system</a>.  The
    <i>word</i> may be a keyword expected to be found in the help
    database, or a path to a text, HTML, or image file to view, or a
    URL string to access on the internet.  If no <i>word</i> is given,
    a default help topic is shown.

    <p>
    The command invocation is aliased to the <a
    href="keyquest">question mark ('<tt>?</tt>')</a> key.

    <p>
    Information on the help database is provided in the <a
    href="helpfiles">Help Database Files</a> topic.  All menu commands
    have a short name which is given in the "tooltip" which appears
    when the pointer is stationary over the command button for a
    second or two.  The help database keyword is generally this name,
    prefixed with "<tt>xic:</tt>".

    <p>
    General URLs must have the protocol specifier given.  For example,
    "<tt>http://wrcad.com</tt>" is correct, giving only
    "<tt>wrcad.com</tt>" will not work.

    <p>
    The "help mode", where pressing menu buttons brings up help
    topics, which is active when the help is accessed through the <a
    href="xic:helpmenu"><b>Help Menu</b></a>, is not active when the
    <b>!help</b> command is used.

!!SEEALSO
keybang

!! 012016
!!KEYWORD
!helpfont
!!TITLE
!helpfont
!!HTML
    <b>Syntax: <tt>!helpfont</tt> [ <i>fontfamily-size</i> ]</b>

    <p>
    This specifies the default proportional font family used in HTML
    viewer (help) windows, and applies to Linux/OS X releases
    only.  Under Microsoft Windows, this command does nothing.  This
    is the font used to render most text in the help windows.

    <p>
    If no argument is given, the font reverts to the internal default.

    <p>
    The <i>fontfamily-size</i> is given as a face name, followed by
    white space, followed by the base pixel size.  The internal
    default is "<tt>Sans 9</tt>".

    <p>
    This command has limited value, as the fonts are most conveniently
    set with the <b>Font Selection</b> panel available in the
    <b>Attributes Menu</b> and from the help windows.

!!SEEALSO
keybang
!helpfixed

!! 012016
!!KEYWORD
!helpfixed
!!TITLE
!helpfixed
!!HTML
    <b>Syntax: <tt>!helpfixed</tt> [ <i>fontfamily-size</i> ]</b>

    <p>
    This specifies the default fixed font family used in HTML viewer
    (help) windows, in Linux/OS X releases only.  Under Microsoft
    Windows, this command does nothing.  The fixed font is used to
    render typewriter and preformatted text.

    <p>
    If no argument is given, the font reverts to the internal default.

    <p>
    The <i>fontfamily-size</i> is given as a face name, followed by
    white space, followed by the base pixel size.  The internal
    default is "<tt>Monospace 9</tt>".

    <p>
    This command has limited value, as the fonts are most conveniently
    set with the <b>Font Selection</b> panel available in the
    <b>Attributes Menu</b> and from the help windows.

!!SEEALSO
keybang
!helpfont

!! 053108
!!KEYWORD
!helpreset
!!TITLE
!helpreset
!!HTML
    <b>Syntax: <tt>!helpreset</tt></b>

    <p>
    This will clear the internal topic cache used by the help system. 
    The cache saves topic references as offsets into the help
    (<tt>.hlp</tt>) files, so that if the text of a help file is
    modified, the offsets are probably no longer valid.  This function
    is useful when editing the text of a help file, while viewing the
    entry in <i>Xic</i>.  Use this function when editing is complete,
    before reloading the topic into the viewer.  Although the offset
    to the present topic does not change when editing, so that simply
    reloading would look fine, other topics in the file that come
    after the present topic would not display correctly if the offsets
    change.

!!SEEALSO
keybang

!! ----------------------------------------------------------------------------
!! Keyvboard
!! ----------------------------------------------------------------------------

!! 011114
!!KEYWORD
!kmap
!!TITLE
!kmap
!!HTML
    <b>Syntax: <tt>!kmap</tt> <i>mapfile</i></b>

    <p>
    This will read a key mapping file as produced from the <a
    href="xic:keymp"><b>Key Map</b></a> button in the <b>Attributes
    Menu</b>.  The key mapping feature allows non-standard keyboards
    to be used with <i>Xic</i> without loss of features.

    <p>
    This command allows a mapping to be applied at any time.  Older
    <i>Xic</i> releases would automatically read a mapping file if
    found at startup.  This is no longer true, map files must be read
    explicitly, either with this command, or with the <a
    href="ReadKeymap"><tt>ReadKeymap</tt></a> script funtion.  The
    operation can be performed from a <a href="initfiles">starcup
    script</a> if the mapping is expected to always be applied.

    <p>
    If the <i>mapfile</i> is not rooted, it will be searched for in
    the current directory, the user's home directory, and along the
    library <a href="xicpaths">search path</a>, in that order.

!!SEEALSO
keybang

!! ----------------------------------------------------------------------------
!! Layers
!! ----------------------------------------------------------------------------

!! 101212
!!KEYWORD
!ltab
!!TITLE
!ltab
!!HTML
    <dl><dt>
    <b>Syntax:</b><dd>
    <b><tt>!ltab</tt> <tt>a</tt>[<tt>dd</tt>] <i>layername ...</i></b><br>
    <b><tt>!ltab</tt> <tt>i</tt>[<tt>nsert</tt>] <i>layername</i> [<i>index</i>]</b><br>
    <b><tt>!ltab</tt> <tt>rem</tt>[<tt>ove</tt>] <i>layername ...</i></b><br>
    <b><tt>!ltab</tt> <tt>ren</tt>[<tt>ame</tt>] <i>oldname newname</i></b>
    </dl>

    <p>
    This command has multiple forms, corresponding to the keyword
    given as the first argument.  Only the initial letters needed to
    identify the keyword are required.  The manipulations available
    from this command can also be performed graphically with the <a
    href="xic:edlyr"><b>Layer Editor</b></a> from the <a
    href="xic:attrmenu"><b>Attributes Menu</b></a>.

    <p>
    If the second word is recognized as "<tt>add</tt>", and the
    remaining tokens are valid layer names, layers are created (or
    extracted from the removed list) and added to the end of the layer
    table.

    <p>
    If the second word is recognized as "<tt>insert</tt>", and the
    token that follows is a valid layer name, the layer will be
    inserted into the layer table at a position given by the integer
    <i>index</i>.  If the <i>index</i> is missing, negative, or larger
    than the number of layers in the table, the layer is appended to
    the table.  If the index is zero, the layer will be inserted at
    the index of the current layer.  Otherwise, the layer is inserted
    into the table at the position given by the index, with one being
    the first (topmost) position.

    <p>
    The "<tt>remove</tt>" form removes the listed layers from the
    layer table.  Removed layers are saved, and can be reinserted if
    needed.

    <p>
    The "<tt>rename</tt>" form renames the layer named <i>oldname</i>
    to <i>newname</i>.

!!SEEALSO
keybang
!layer

!! 053108
!!KEYWORD
!ltsort
!!TITLE
!ltsort
!!HTML
    <b>Syntax: <tt>!ltsort</tt></b>

    <p>
    This command will sort the layers in the layer table into
    alphanumeric order.  This may be useful when examining the layers
    from an unknown archive file when <i>Xic</i> is started without a
    technology file.  This operation is not undoable.

!!SEEALSO
keybang

!! 012016
!!KEYWORD
!exlayers
!!TITLE
!exlayers
!!HTML
    <b>Syntax: <tt>!exlayers</tt></b>

    <p>
    This command will list in the console window layers in the current
    technology that have the following keywords set:
    <a href="Conductor"><b>Conductor</b></a>,
    <a href="Routing"><b>Routing</b></a>,
    <a href="GroundPlane"><b>GroundPlane</b></a>,
    <a href="Contact"><b>Contact</b></a>,
    <a href="Via"><b>Via</b></a>,
    <a href="Dielectric"><b>Dielectric</b></a>,
    <a href="Planarize"><b>Planarize</b></a>,
    <a href="DarkField"><b>DarkField</b></a>.

!!SEEALSO
keybang


!! ----------------------------------------------------------------------------
!! Layout Editing
!! ----------------------------------------------------------------------------

!! 012309
!!KEYWORD
!array
!!TITLE
!array
!!HTML
    <b>Syntax:<br>
    <tt>!array -u</tt><br>
    <tt>!array -d</tt> [<i>nx1</i>[-<i>nx2</i>] , [<i>ny1</i>[-<i>ny2</i>]]<br>
    <tt>!array -r</tt> [<tt>nx</tt> [+]= <i>val</i>]
      [<tt>ny</tt> [+]= <i>val</i>]
      [<tt>dx</tt> [+]= <i>val</i>] [<tt>dy</tt> [+]= <i>val</i>]</b><br>

    <p>
    This command manipulates instance arrays.  There are three forms:

    <p>
    <b><tt>!array -u</tt></b><br>
    This will "unarray" all selected arrays.  The arrays are converted
    to individual instance placements, in the same location and
    orientation as the original array elements.

    <p>
    <b><tt>!array -d</tt>
      [<i>nx1</i>[-<i>nx2</i>] , [<i>ny1</i>[-<i>ny2</i>]]</b><br>
    This form will delete a rectangular region of array elements.  The
    undeleted elements will be configured into a new collection of arrays
    or single instance placements.

    <p>
    The command operates on a selected instance array, the most
    recently selected if there is more than one.

    <p>
    If no arguments follow the option character, the user is asked to
    click on or drag over the array, to define two points.  The two
    points are transformed back into the coordinate system of the
    instance master, and define a rectangular region in the array
    indices in that space.  The elements corresponding to this
    rectangle are deleted, and new arrays or separate instances are
    created to replace the undeleted elements.

    <p>
    Otherwise, the range of x and y indices to delete is given on the
    command line.  These indices are non-negative 0-based, and the x
    and y ranges are separated by a comma.  A range can be a single
    number, or two numbers separated by '-'.  If a single number, the
    range is taken as that number only.

    <p>
    In the untransformed array, the 0,0 location is the lower-left
    corner.

    <p>
    <b>Example</b>:<br>
    Suppose that a 3x3 array is selected.<br>
    Erase the middle element: <tt>!array -d 1,1</tt><br>
    Erase the rightmost column: <tt>!array -d 2,0-2</tt>

    <p>
    <b><tt>!array -r</tt> [<tt>nx</tt> [+]= <i>val</i>]
     [<tt>ny</tt> [+]= <i>val</i>] [<tt>dx</tt> [+]= <i>val</i>]
     [<tt>dy</tt> [+]= <i>val</i>]</b><br>
    This will reconfigure the array parameters of the first selected
    instance.  It can convert instances into arrays and vice-versa.

    <p>
    All of the parameter groups are optional, but at least one group
    should be given or the operation does nothing.  Each is in the
    form <i>keyword</i> [+]= <i>value</i>.  It a '+' appears ahead of
    the '=', the <i>value</i> will be added to the existing value,
    otherwise the <i>value</i> is assigned.  White space around '=' or
    '+=' is optional.  The <tt>nx</tt> and <tt>ny</tt> are the number
    of columns and rows in the untransformed array.  These integer
    values must be one or larger.  The <tt>dx</tt> and <tt>dy</tt> are
    the array cell spacing in the untransformed x and y directions,
    given in microns.

    <p>
    <b>Examples</b>:<br>
    Add a column to the selected array:  <tt>!array -r nx+=1</tt><br>
    Add 1.5um additional space between elements:
      <tt>!array -r dx+=1.5 dy+=1.5</tt>

!!SEEALSO
keybang
xic:place

!! 101515
!!KEYWORD
!layer
!!TITLE
!layer
!!HTML
    <table border=0>
    <tr><td valign=top><b>jump to</b></td> <td>
    <a href="!layer#examp"><b>Examples</b></a><br>
    <a href="!layer#extln"><b>Extended Layer Names</b></a><br>
    <a href="!layer#adv"><b>Advanced Examples</b></a>
    </td></tr></table>

    <p>
    This command produces new geometry on a new or existing layer, by
    applying a layer expression which takes as input geometry from the
    same or other layers, from the current cell or from other cells in
    memory.  The <a href="xic:lexpr"><b>Layer Expression</b></a>
    button in the <b>Edit Menu</b> provides a panel which duplicates
    the functionality of this command.
    <br clear=all>

    <br>
    <b>Syntax: <tt>!layer</tt> [<tt>join|split|splitv</tt>]
     [<tt>-j</tt> | <tt>-s</tt>[<tt>h</tt>] | <tt>-sv</tt>]
     [<tt>-d</tt> <i>depth</i> | <tt>-da</tt>] [<tt>-r</tt>]
     [<tt>-c</tt>] [<tt>-m</tt>]
     [<tt>-f</tt>] <i>layer_name</i> [=] [<i>expression</i>]</b>

    <p>
    This new geometry can appear as an assemblage of trapezoids if
    either of the <tt>split</tt> or <tt>splitv</tt> keywords is given,
    or alternatively as a minimal number of complex polygons if the
    <tt>join</tt> keyword is given instead.  If <tt>splitv</tt> is
    given, a vertical orientation is favored for the decomposition,
    whereas similarly <tt>split</tt> will produce a decomposition
    favoring a horizontal orientation.  The default is the joined form
    if none of these optional keywords is given, except when simply
    copying from another layer in which case the default is to copy
    objects without change.  The keyword "<tt>splith</tt>" is a
    synonym for "<tt>split</tt>".  The options <tt>-j</tt>,
    <tt>-s</tt> or <tt>-sh</tt>, and <tt>-sv</tt> are equivalent to
    giving the <tt>join</tt>, <tt>split</tt>, and <tt>splitv</tt>
    keywords.

    <p>
    The <b>!layer</b> command, when using boolean operations, uses
    gridding to improve efficiency for large data sets.  Internally, a
    square grid with origin at the lower-left corner of the cell
    bounding box is logically defined.  The calculations are performed
    for each grid square that overlaps the cell area, and the results
    are combined.  This can be more efficient that calculating the
    whole cell in one shot.

    <p>
    The default grid size is 100 microns square, which can be changed
    with the <a href="PartitionSize"><b>PartitionSize</b></a>
    variable.  This can be set to an alternate grid size in microns,
    as a floating-point number.  The cell lower left corner is on the
    grid boundary.  The operations are performed piecewise in each
    grid area that intersects the cell.

    <p>
    If this variable is set to "0", no grid is used, and operations
    will be performed over the entire cell at once.

    <p>
    The <b>PartitionSize</b> variable can be set with a control in the
    <b>Evaluate Layer Expression</b> panel from the <b>Layer
    Expression</b> button in the <b>Edit Menu</b>, or with the <a
    href="!set"><b>!set</b></a> command.

    <p>
    When joining objects, there are several variables which fine-tune
    the operation.  See the description of the <a
    href="!join"><b>!join</b></a> command for information.

    <p>
    If <i>layer_name</i> does not exist in the layer table, it will be
    created.  Otherwise, the <i>layer_name</i> is the short or long
    name of an existing layer.  If a new layer is created, its name is
    generated from the given name in the same way as in the <a
    href="techfile:layers">technology file</a> layer definitions.

    <p>
    The <i>expression</i>, if given, involves layer names and
    operators as in the DRC <a href="layer_exp">layer expressions</a>. 
    The result of the expression is created on <i>layer_name</i>. 
    Thus, this command provides a means of creating a new layer from
    geometry on existing layers.  It operates on the physical part of
    the current cell.  Labels are ignored.  The same <i>layer_name</i>
    can exist on both sides of the expression, in which case the
    contents of the <i>layer_name</i> is replaced with the result of
    <i>expression</i>.  The equal sign between <i>layer_name</i> and
    <i>expression</i> is optional.

    <p>
    If no <i>expression</i> is given, the new layer will be created if
    necessary, which will be the only effect if done.  If the
    <i>layer_name</i> already exists, and one of the <tt>split</tt>,
    <tt>splitv</tt>, or <tt>join</tt> keywords is given, the operation
    will be applied to that layer, much like the <a
    href="!split"><b>!split</b></a> and <a
    href="!join"><b>!join</b></a> commands.

    <p>
    If the <i>expression</i> consists of a layer name only, the
    objects on that layer will be copied to <i>layer_name</i>, and
    split/joined if the keywords are given.  When simply copying
    and/or joining/splitting, no grid partitioning is used.

    <p>
    Copying and splitting/joining are available in electrical mode. 
    Other operations require running the <b>!layer</b> command in
    physical mode, and apply to physical data.

    <p>
    There are several option flags which can be given.  These must
    appear before <i>layer_name</i> in the command line.  The options
    can be given separately as shown in the syntax example above, or
    grouped, e.g., "<tt>-dmf</tt> <i>depth</i>" is equivalent to
    "<tt>-d</tt> <i>depth</i> <tt>-m</tt> <tt>-f</tt>".  Any
    combination of grouped or single flags can be used.  If a group
    contains '<tt>d</tt>', the token that follows must be the
    <i>depth</i>.

    <dl>
    <dt><tt>-j</tt><dd>
    Equivalent to giving the <tt>join</tt> keyword.
    </dl>

    <dl>
    <dt><tt>-s</tt> or <tt>-sh</tt><dd>
    Equivalent to giving the <tt>split</tt> keyword.
    </dl>

    <dl>
    <dt><tt>-sv</tt><dd>
    Equivalent to giving the <tt>splitv</tt> keyword.
    </dl>

    <dl>
    <dt><tt>-d</tt> <i>depth</i>, <tt>-da</tt><dd>
    The <i>depth</i> is a non-negative integer indicating the depth
    into the cell hierarchy to process.  It can also be a word
    starting with the letter '<tt>a</tt>' to indicate all levels.  If
    0 (the default) only objects in the current cell are processed. 
    If "<tt>all</tt>", all objects in the hierarchy may be used to
    generate the new objects, effectively flattening.  The <tt>-da</tt>
    form is equivalent to "<tt>-d all</tt>".
    </dl>

    <dl>
    <dt><tt>-r</tt><dd>
    This applies when the <i>depth</i> is larger than 0.  When given,
    the <b>expression</b> is evaluated in all cells in the hierarchy
    to <i>depth</i>, using only objects in that cell and creating
    objects in that cell.  This is very different from the behavior
    without this flag given, which is to create all objects in the
    current cell.
    </dl>

    <dl>
    <dt><tt>-c</tt><dd>
    By default, <i>layer_name</i> is cleared before the
    <i>expression</i> is evaluated, so that the layer contains only
    the result of the operation on command completion.  If this flag
    is given, the layer will not be cleared, so that the original
    objects will be retained on the layer.
    </dl>

    <dl>
    <dt><tt>-m</tt><dd>
    When this flag is set, objects added to <i>layer_name</i> will be
    merged with existing objects, using the same merging as
    established with the <b>Merge new boxes and polys with existing
    boxes/polys</b> and <b>Clip and merge new boxes only, not
    polys</b> check boxes in the <a href="xic:edset"><b>Editing
    Setup</b></a> panel from the <b>Edit Menu</b>, or the
    corresponding variables.  Use of full polygon merging can greatly
    increase processing time, simple box clipping/merging has much
    lower overhead.  Merging may reduce the object count in the
    layout.

    <p>
    The merging will defeat the purpose of the split keywords, so the
    user should consider whether merging is appropriate.  Merging
    includes the initial objects on the <i>layer_name</i> if it is not
    cleared, and the accumulated objects as evaluation takes place.
    </dl>

    <dl>
    <dt><tt>-f</tt><dd>
    This flag indicates "fast" mode, where undo list generation and any
    merging (other than a join operation) are skipped.  This operation
    is not undoable, so this option should be used with care.  It
    speeds processing and reduces memory use.

    <p>
    The user will be prompted to confirm before the operation is
    actually initiated.
    </dl>

    <a name="examp"></a>
    <h2>Examples</h2>

    Clear layer M0:
    <blockquote>
    <tt>!layer M0 0</tt>
    </blockquote>
    Copy M1 to layer NEW:
    <blockquote>
    <tt>!layer NEW M1</tt>
    </blockquote>
    Copy the inverse of layer M1 to layer NEW:
    <blockquote>
    <tt>!layer NEW !M1</tt>
    </blockquote>
    Copy the intersection areas of I1 and I2 to NEW:
    <blockquote>
    <tt>!layer NEW I1&I2</tt>
    </blockquote>
    Copy the R1 and R2 areas to NEW:
    <blockquote>
    <tt>!layer NEW R1|R2</tt>
    </blockquote>

    <a name="extln"></a>
    <h2>Extended Layer Names</h2>
    
    <p>
    The layer names in layer expressions in the <b>!layer</b> command
    can acutally be given in an extended form:

    <blockquote>
    <i>lname</i>[<tt>.</tt><i>stname</i>][<tt>.</tt><i>cellname</i>]
    </blockquote>

    <p>
    Most generally, the "layer" name consists of three tokens, two of
    which are optional (indicated by square brackets above).  The
    tokens are separated by a period ('<tt>.</tt>') character.  The
    individual tokens can be double-quoted (i.e., using the
    double-quote ('<tt>"</tt>') character), which must be used if the
    tokens contain non-alphanumeric characters.  The period
    separators must appear outside the scope of any quoting.

    <p>
    <dl>
    <dt><i>lname</i><dd>
    This is a short or long layer name, as found in the layer table.
    <dt><i>stname</i><dd>
    The name of a <a href="xic:stabs">symbol table</a> which contains
    the <i>cellname</i>.
    <dt><i>cellname</i><dd>
    The name of a cell.
    </dl>

    <p>
    If only one separator appears, the token that follows is taken as the
    <i>cellname</i>, and the current symbol table is assumed.

    <p>
    The <i>cellname</i> is the name of a cell used as the source for
    geometry.  If no <i>cellname</i> is given, the name of the
    current cell is understood.  The odd case of an empty
    <i>stname</i> indicates the "<tt>main</tt>" symbol table, e.g.,
    <tt>layer..cell</tt> is equivalent to <tt>layer.main.cell</tt>.

    <p>
    If the <i>cellname</i> starts with the '<tt>@</tt>' character, and
    no symbol table name is given, then the rest of the
    <i>cellname</i> is taken as the name of a "special" database, as
    created with script functions like <a
    href="ChdOpenZdb"><tt>ChdOpenZdb</tt></a>.  If found, geometry
    will be obtained from the database rather than a cell.  Otherwise,
    when a <i>cellname</i> is given, the geometry is obtained from the
    given cell, as if it were overlaid on the current cell.  The
    <i>cellname</i> (or any of the three tokens) can be double quoted,
    and must be quoted if the name contains a '<tt>.</tt>' character,
    for example <tt>CPG."mycell.xic"</tt>.

    <p>
    If a <i>stname</i> is given, and the name matches an existing
    symbol table name, the cell is obtained from that symbol table. 
    If the symbol table name is given, the <i>cellname</i> field must
    appear, but can be empty (a trailing period) which indicates the
    name of the current cell.

    <p>
    If the <i>stname</i> is given, and the cell is not in this table,
    it will be opened from disk into the given table (not the current
    table) if found as a native cell file in the search path.

    <p>
    The coordinate origin of the source cell is taken as the origin of
    the current cell.  The source cell must be in memory, or be in a
    native cell in the search path.

    <p>
    Objects read from a "special" database are clipped to the boundary
    of the cell being added to.  No such clipping is done when objects
    are read from another cell.

    <a name="adv"></a>
    <h2>Advanced Examples</h2>

    <p>
    Suppose one has two versions of a cell, <tt>cell</tt> and
    <tt>cell_old</tt>, and one needs to know if they differ on layer
    <tt>M1</tt>.  Open a dummy cell for editing, then issue
    <blockquote>
      <tt>!layer ZZ = M1.cell^M1.cell_old</tt>
    </blockquote>
    Press the <b>Home</b> key to view the entire cell space.  Any
    geometry shown on the new dummy layer <tt>ZZ</tt> is the
    exclusive-OR of the geometry on <tt>M1</tt> of the two cells,
    i.e., the difference.  If there is no geometry on <tt>ZZ</tt>,
    <tt>M1</tt> is the same in <tt>cell</tt> and <tt>cell_old</tt>.

    <p>
    As a variation, suppose that the user has done the following:
    <blockquote><tt>
      <i>set <a href="xic:stabs">symbol table</a> to</i> "<tt>old</tt>"<br>
      open oldstuff/mycell<br>
      <i>return to previous symbol table</i><br>
      open newstuff/mycell
    </tt></blockquote>
    There are two versions of <tt>mycell</tt> in memory.  To compare
    the layer <tt>M1</tt> in the two cells, one could then enter
    <blockquote>
      <tt>!layer ZZ M1^M1.old.</tt>
    </blockquote>
    Then the <tt>ZZ</tt> layer, which consists of the exclusive-OR of
    old and new <tt>M1</tt> in <tt>mycell</tt>, would be added to the
    current <tt>mycell</tt>.  Pressing the <b>Tab</b> key undoes the
    addition.

    <p>
    Suppose one wants to import the inverse of the geometry on layer
    <tt>VIA</tt> from <tt>cell</tt> into the current cell, also on
    layer <tt>VIA</tt>:
    <blockquote>
      <tt>!layer VIA = !VIA.cell</tt>
    </blockquote>
    The <tt>VIA</tt> layer now consists of the inverse from
    <tt>cell</tt>.  Any geometry that existed on <tt>VIA</tt> in the
    current cell before the command was given is deleted.  The
    bounding box of the current cell may have been expanded to include
    the bounding box of <tt>cell</tt>.  The area used to create an
    inversion is the rectangle bounding all cells referenced in the
    expression, plus the current cell.

    <p>
    Suppose one simply wants to copy the geometry from layer M2 of
    <tt>cell</tt> into the current cell:
    <blockquote>
      <tt>!layer M2 = M2.cell</tt>
    </blockquote>
    The <tt>M2</tt> layer now consists of the geometry on <tt>M2</tt>
    from <tt>cell</tt>.  The bounding box of the current cell may have
    been expanded, in which case some of the <tt>M2</tt> features may
    be off-screen (press the <b>Home</b> key to view the entire cell). 
    Any objects previously existing on <tt>M2</tt> in the current cell
    are deleted before the operation.

!!SEEALSO
keybang

!! 100412
!!KEYWORD
!mo
!!TITLE
!mo
!!HTML
    <b>Syntax: <tt>!mo</tt> <i>x</i> [<i>y</i> [<i>layer_name</i>]]</b>

    <p>
    The <b>!mo</b> command will move selected objects to a new
    location offset by <i>x</i>, <i>y</i> (in microns) from the
    original object.  If not given, <i>y</i> is zero.

    <p>
    The third argument, if given, will allow a layer change during the
    move.  It should be the name of a layer that is not the current
    layer.  How this is applied depends on the setting of the <a
    href="LayerChangeMode"><tt>LayerChangeMode</tt></a> variable, or
    equivalently the settings of the <b>Layer Change Mode</b> pop-up
    from the <a href="xic:mvlcg"><b>Set Layer Chg Mode</b></a>
    button in the <b>Modify Menu</b>.  For the layer change, the
    passed <i>layer_name</i> is taken as the "new current layer",
    however the actual current layer does not change.  Subcells are
    moved without regard to <i>layer_name</i> or the layer change
    mode.

    <p>
    There is a companion <a href="!co"><b>!co</b></a> (copy) command.

!!SEEALSO
keybang
xic:move
button1

!! 100412
!!KEYWORD
!co
!!TITLE
!co
!!HTML
    <b>Syntax: <tt>!co</tt> <i>dx</i> [<i>dy</i> [[-l] <i>layer_name</i>]
    [[-r] <i>rep_count</i>]]</b>

    <p>
    The <b>!co</b> command will copy selected objects to new
    locations.  The <i>dx</i> and <i>dy</i> are translation values in
    microns.  If <i>dy</i> is not given, it is taken as 0.  A <i>dy</i>
    value must be given if additional arguments are given.

    <p>
    There are two additional arguments than can appear:  a replication
    count, and a layer name.  An integer value that is not identical
    to a layer name is taken as a replication count, otherwise a layer
    name is assumed.  The optional flags "<tt>-l</tt>" and
    "<tt>-r</tt>" can appear ahead of the token to enforce the
    interpretation.

    <p>
    The replication count specifies how many copies, spaced by
    <i>dx</i>,<i>dy</i>, are generated.  For example, if the count is
    2, new objects would be created at offset <i>dx</i>, <i>dy</i>,
    and 2*<i>dx</i>,2*<i>dy</i>.  If not given, or the value is not in
    the range 1-100000, only one copy is made.

    <p>
    The <i>layer_name</i> argument, if given, will allow a layer
    change during the copy.  It should be the name of a layer that is
    not the current layer.  How this is applied depends on the setting
    of the <a href="LayerChangeMode"><tt>LayerChangeMode</tt></a>
    variable, or equivalently the settings of the <b>Layer Change
    Mode</b> pop-up from the <a href="xic:mvlcg"><b>Set Layer Chg 
    Mode</b></a> button in the <b>Modify Menu</b>.  For the layer
    change, the passed <i>layer_name</i> is taken as the "new current
    layer", however the actual current layer does not change. 
    Subcells are copied without regard to <i>layer_name</i> or the
    layer change mode.

    <p>
    There is a companion <a href="!mo"><b>!mo</b></a> (move) command.

!!SEEALSO
keybang
xic:copy
button1

!! 012815
!!KEYWORD
!spin
!!TITLE
!spin
!!HTML
    <b>Syntax: <tt>!spin</tt> <i>x y angle</i> [<i>layer_name</i>]</b>

    <p>
    This command will rotate all selected objects about
    <i>x</i>,<i>y</i> (given in microns) by <i>angle</i> (given in
    degrees) counter-clockwise.  The functionality is similar to the
    <a href="xic:spin"><b>spin</b></a> command in the side menu.

    <p>
    Subcells and labels will be rotated in increments of 45 degrees in
    physical mode, 90 degrees in electrical mode, to the closest angle
    to that given.  Other objects can be rotated by any angle.

    <p>
    The <i>layer_name</i> argument, if given, will allow a layer
    change during the rotation.  It should be the name of a layer that is
    not the current layer.  How this is applied depends on the setting
    of the <a href="LayerChangeMode"><tt>LayerChangeMode</tt></a>
    variable, or equivalently the settings of the <b>Layer Change
    Mode</b> pop-up from the <a href="xic:mvlcg"><b>Set Layer Chg
    Mode</b></a> button in the <b>Modify Menu</b>.  For the layer
    change, the passed <i>layer_name</i> is taken as the "new current
    layer", however the actual current layer does not change. 
    Subcells are rotated without regard to <i>layer_name</i> or the
    layer change mode.

!!SEEALSO
keybang

!! 053108
!!KEYWORD
!rename
!!TITLE
!rename
!!HTML
    <b>Syntax: <tt>!rename</tt> [<i>prefix</i>] [[-s] <i>suffix</i>]</b>

    <p>
    The purpose of the <b>!rename</b> command is to allow modification
    of all of the cell names in a hierarchy.  In <i>Xic</i>, every
    cell name in the symbol table must be unique.  When combining
    designs from various sources, it is necessary to take measures to
    avoid name clashes.  The <b>!rename</b> command allows the
    manipulation of prefixes/suffixes of all of the cell names in a
    hierarchy.  For example, each cell name can be prepended with a
    unique prefix, say the author's initials.

    <p>
    The <i>prefix</i> and <i>suffix</i> are string tokens.  If two
    string tokens are given, the "<tt>-s</tt>", which implies suffix,
    can be skipped.  The string tokens can contain any alphanumeric
    characters plus '$', '?', '_'.  String tokens given in this form
    will be prepended/appended to the current cell name, and each cell
    name used in the hierarchy.  The string tokens can also have the
    form /<i>str</i>/<i>sub</i>/ which indicates a substitution.  This
    causes the <i>str</i> if it appears as a prefix/suffix of a cell
    name to be replaced by <i>sub</i>.  The <i>sub</i> can be empty
    (i.e., the form is /<i>str</i>//) which can be used to undo the
    previous addition of a prefix or suffix.  Forms like //<i>sub</i>/
    are equivalent to just giving <i>sub</i> as a string.

!!SEEALSO
keybang

!! 012016
!!KEYWORD
!svq
!!TITLE
!svq
!!HTML
    <b>Syntax: <tt>!svq</tt> [<i>regnum</i>]</b>

    <p>
    This will save the current selections into a "register" which can
    be recalled later with the <a href="!rcq"><b>!rcq</b></a> command. 
    There are ten registers corresponding to given digits 0-9, or if
    no number is given 0 is understood.

    <p>
    The registers are actually just dummy cells in memory, which will
    appear in listings as "<tt>$$$$REG0</tt>" through
    "<tt>$$$$REG9</tt>".  These should not be edited directly or
    instantiated.

!!SEEALSO
keybang

!! 053108
!!KEYWORD
!rcq
!!TITLE
!rcq
!!HTML
    <b>Syntax: <tt>!rcq</tt> [<i>regnum</i>]</b>

    <p>
    This will recall the contents of the register whose index 0-9 is
    given, attaching the objects to the mouse pointer where they can
    be placed by clicking in an active drawing window.  The register
    must have been defined previously with the <a
    href="!svq"><b>!svq</b></a> command.  If no number is given, 0 is
    understood.

!!SEEALSO
keybang

!! 053108
!!KEYWORD
!box2poly
!!TITLE
!box2poly
!!HTML
    <b>Syntax: <tt>!box2poly</tt></b>

    <p>
    This command converts selected boxes to polygons in the database. 
    The command is not expected to be useful except for debugging
    purposes.  The box database entry uses less space than that of a
    single polygon.

!!SEEALSO
keybang

!! 053108
!!KEYWORD
!path2poly
!!TITLE
!path2poly
!!HTML
    <b>Syntax: <tt>!path2poly</tt></b>

    <p>
    This will convert selected wires to polygons representing the wire
    path.  The first and last vertex of the wire must be the same. 
    The width and end style of the wire are ignored.  The polygon
    represents the internal area specified by the path vertices.

!!SEEALSO
keybang

!! 033009
!!KEYWORD
!poly2path
!!TITLE
!poly2path
!!HTML
    <b>Syntax: <tt>!poly2path</tt></b>

    <p>
    This will convert each selected polygon to a wire, using the same
    path as the polygon boundary, and the same layer as the polygon. 
    The wire width will be the default width for wires on the layer. 
    The end style of the wire will always be "flush ends", the default
    wire end style for the layer will be ignored.

!!SEEALSO
keybang

!! 040316
!!KEYWORD
!bloat
!!TITLE
!bloat
!!HTML
    <b>Syntax: <tt>!bloat</tt> <i>dimen</i> [<i>mode</i>]</b>

    <p>
    The <i>dimen</i> is a dimension in microns.  The command will
    operate on selected objects, and alter the dimensions according to
    the <i>dimen</i> given.  If the <i>dimen</i> is positive, the
    parts of edges that do not contact or overlap with a selected
    object on the same layer will be pushed out by <i>dimen</i>,
    expanding the objects.  If <i>dimen</i> is negative, the reverse
    occurs:  objects will shrink, but adjacent objects will remain
    touching.  Objects may be severed into two or more pieces if the
    <i>dimen</i> is negative, or may disappear entirely.

    <p>
    Only <a href="xic:box">boxes</a>, <a href="xic:wire">wires</a> and
    <a href="xic:polyg">polygons</a> are affected.  Wires and possibly
    boxes become polygons after the operation.  An object is
    deselected if it is modified.

    <p>
    There are a number of operational details and choices available
    with the <i>mode</i> integer, whose bits represent flags.  This
    value can be given as a decimal integer, or as a hexadecimal
    number following "<tt>0x</tt>".  If the <i>mode</i> argument is
    missing, a value of 0 is implied.

    <dl>
    <dt><b>bits 0-1</b> (0x1, 0x2)<dd>
      The two LSBs specify the basic algorithm mode, as described below.
    </dl>

    <dl>
    <dt><b>bit 2</b> (0x4)<dd>
      When set, the algorithm mode calls the "old" bloating
      algorithms, as used in releases prior to 2.5.67.  If this bit is
      set, all of the other flag bits are ignored.
    </dl>

    <dl>
    <dt><b>bit 3</b> (0x8)<dd>
     When set, the return is the edge template, and no bloating is
     done.  The edge template is a collection of polygons that cover
     the edges of objects that would be bloated, as a path, whose
     width is twice the <i>dimen</i>.  When bloating, the edge
     template is either added to the objects being bloated, or clipped
     from them, depending on the sign of <i>dimen</i>.
    </dl>

    <dl>
    <dt><b>bits 4-6</b> (0x70)<dd>
    These three bits specify the corner "fill-in" mode, used when
    constructing the edge template.  Consider a vertex and two
    adjacent edges.  Imagine the rectangles formed from these edges by
    constructing parallel edges plus and minus <i>dimen</i>
    perpendicular to the edges, and using the four endpoints of the
    parallel segments to define two rectangles.  The two rectangles
    will overlap, with a notch at the original vertex location. 
    Adding a suitable shape to fill in this notch, thus creating a
    smooth transition, is the purpose of the corner fill-in.

    <p>
    The corner fill-in shape has three points initially defined, the
    vertex, and the two projections along the ends of the constructed
    rectangles.  The differences between the fill-in modes is where (or if)
    we add the fourth point to the fill-in polygon.  The choices are
    as follows:
        <dl>
        <dt>bits 4-6: 000 ("clip" mode)<dd>
        The angle is bisected, and the point added is a distance given
        by the absolute value of <i>dimen</i> from the vertex, along
        the bisector.  This produces a rounding effect at the corner.

        <dt>bits 4-6: 001 ("flat" mode)<dd>
        No fourth point is added, only a triangle formed by the existing
        three points is used.

        <dt>bits 4-6: 010 ("extend" mode)<dd>
        The point added is the projected intersection of the outer
        edges of the two rectangles.  For acute angles, the distance
        to the extended vertex is unconstrained. 

        <dt>bits 4-6: 011 ("extend-1" mode)<dd>
        The point added is the projected intersection of the outer
        edges of the two rectangles.  For acute angles, if the corner
        would extend too far, is is clipped (similar to the "clip"
        mode).

        <dt>bits 4-6: 100 ("extend-2" mode)<dd>
        This mode is similar to the "extend-1" mode, but provides a
        different and more aggressive clipping of acute angles.

        <dt>bits 4-6: 101 (unused)<dd>
        This code is reserved for expansion, produces no corner fill.

        <dt>bits 4-6: 110 (unused)<dd>
        This code is reserved for expansion, produces no corner fill.

        <dt>bits 4-6: 111 (no fill)<dd>
        This produces no corner fill.
        </dl>

        <p>
        Small angles will use the "flat" corner fill mode to avoid
        adding unnecessary vertices, in all modes.
    </dl>

    <dl>
    <dt><b>bit 7</b> (0x80)<dd>
    When using the "extend" corner modes, it is possible in certain
    geometries that the extended corner will occur on the opposite
    side of an edge rectangle from some other edge, which will produce
    unexpected features in the bloating result.  In order to prevent
    this, a rather expensive test is performed.  Setting this bit will
    skip the test, speeding up the operation somewhat.  In Manhattan
    geometry, this test can always be skipped.
    </dl>

    <dl>
    <dt><b>bit 8</b> (0x100)<dd>
    Internally, the grouping operation that is part of the preparation
    for the edge template generation is skipped.  This is an internal
    artifact, and this flag should not be set.  However, if only a
    single object is being bloated, this flag may provide a slight
    speed improvement.
    </dl>

    <dl>
    <dt><b>bit 9</b> (0x200)<dd>
    Internally, clipping/merging of the trapezoid list passed to the
    bloating function is skipped.  This is an internal artifact and
    this flag should not be set.
    </dl>

    <dl>
    <dt><b>bit 10</b> (0x400)<dd>
    When this bit is set, a scaling algorithm is applied during the
    bloating, which very slightly (+/- one internal unit) affects
    output coordinates.  This is the result of a very specialized
    customer request that output exactly match that from another tool,
    and is not likely to be generally useful.

    <p>
    The scale fix will provide more accurate bloating when all angles
    are multiples of 45 degrees.  It is not needed for Manhattan
    geometry, and for angles other than 45 degree multiples, it can
    actually reduce accuracy.  For best accuracy in the all-angle
    case, the <a
    href="DatabaseResolution"><b>DatabaseResolution</b></a> variable
    can be set to a larger value.
    </dl>

    <dl>
    <dt><b>bit 11</b> (0x800)<dd>
    When this bit is set, the trapezoid collection used to define the
    edge template will not be clipped and merged before use.  This is
    an internal artifact and this flag should not be set.
    </dl>

    <dl>
    <dt><b>bit 12</b> (0x1000)<dd>
    When this bit is set, the resulting trapezoid collection produced
    for the edge template or by the bloating operation will not be
    joined into polygons.
    </dl>
 
    <p>
    The basic algorithm for modes 0-2 works as follows:
    <ol>
    <li>The collection of objects to bloat is converted to a trapezoid
    representation.
    <li>The resulting trapezoid list is grouped into multiple lists of
    spatially disjoint lists, where each list is mutually connected
    and no trapezoid touches or overlaps a trapezoid from another list.
    <li>For each list, the line segments representing the trapezoid edges
    are tabulated.
    <li>The edge list is clipped against itself to remove mutually
    overlapping regions.  The remaining edges are the "external"
    edges, where one side is area outside of the trapezoid group.
    <li>Each edge is converted to a rectangle that covers the edge and
    extends +/- the bloat width normal from the edge (note that these
    rectangles are rotated by an arbitrary angle, depending on the
    angle of the line segment).
    <li>The rectangles are converted to trapezoids.  The non-Manhattan
    rotated rectangles are represented by three trapezoids.
    <li>A polygon, implemented as trapezoids, is added at each vertex,
    to fill in the transition between edge segments.  The list of all
    these trapezoids represents a path along the external edges of the
    original trapezoid group.
    <li>If the bloat value is positive, the edge list is or'ed with
    the original trapezoid list.  If the bloat value is negative, the
    edge list is clipped from the original trapezoid group.  If bit 3
    is set, this step is skipped, and the edge list is passed to the
    next step.
    <li>The resulting trapezoid list is merged into polygons,
    representing the operation result.
    </ol>

    <dl>
    <dt><b>bloat mode 0</b><dd>
    If a trapezoid group is entirely Manhattan, meaning that all edges
    are horizontal or vertical, no corner vertex fill-in takes place. 
    Instead, the vertical line segments are extended by the (positive)
    bloat dimension.  Thus, bloated Manhattan objects always remain
    Manhattan.

    <p>
    Otherwise, the polygon to fill the empty area at a vertex between
    the segment rectangles is computed, according to the corner
    fill-in mode.  This may add vertices to the resulting figures,
    giving rounded corners.
    </dl>

    <dl>
    <dt><b>bloat mode 1</b><dd>
    This mode is faster, but is not recommended for non-Manhattan
    geometry.  The vertical segment ends are extended by the bloat
    dimension to cover (assumed) Manhattan corners.  Non-Manhattan
    segments are added as a single trapezoid with a width computed
    from the bloat dimension.  Note that this can cause small
    protrusions and other anomalies to appear after bloating.
    </dl>

    <dl>
    <dt><b>bloat mode 2</b><dd>
    This is the same as bloat mode 0, however the corners of Manhattan
    and non-Manhattan objects will be treated the same.  The corners
    of positive-bloated boxes may be rounded, unlike mode 0.
    </dl>

    <dl>
    <dt><b>bloat mode 3</b><dd>
    This mode uses the DRC sizing functions to perform the bloating
    operation, with results similar to mode 2.  All of the other flags
    except for bit 3 (edge template) are ignored with this choice.  If
    bit 3 is set, an edge template is created, extending out of the
    original figure if the bloat value is positive, or inward if the
    bloat value is negative.

    <p>
    This mode works best if a <a href="!join"><b>!join</b></a> is
    performed before the bloat.  This algorithm is rather compute
    intensive and slower than the other algorithms.  In this
    algorithm, parts of edges that touch an object on the same layer
    will not be moved, whether or not the adjacent object was
    selected.  In the other algorithms, unselected objects are
    completely ignored.
    </dl>

    <p>
    Presently, if bit 2 is set, the "old" algorithms will be used.
    These give results similar to the new algorithms, but are slower.

    <dl>
    <dt><b>old mode 0</b><dd>
    In the description, we assume that the object is being expanded,
    i.e., the <i>dimen</i> is greater than zero.  For each edge, an
    extension out of the object normal to the edge is created.  For
    each corner where the edge projections do not overlap, a 4-sided
    polygon is created.  Three of the vertices are the figure corner
    vertex and the ends of the two adjacent projections.  The fourth
    vertex is placed along the bisector of the angle formed by the
    other three vertices, a distance <i>dimen</i> from the object
    corner vertex.  All of the projections are joined to the original
    object to create the expanded object.  Note that the corners
    become rounded, i.e., bloated rectangles become polygons.  The
    figure below illustrates the algorithm.

    <p>
    <center>
    <img src="bloat.gif">
    </center>

    <p>
    If the <i>dimen</i> is less than zero, the object will be shrunk. 
    In this case, the projections extend into the object, and the new
    object is formed by clipping these regions from the object. 
    </dl>

    <dl>
    <dt><b>old mode 1</b><dd>
    This algorithm works with a trapezoid decomposition of the objects
    to be modified.  An expansion is very fast, but a shrink requires
    polarity inversion of the trapezoid list, so is somewhat slower. 
    This algorithm is not really recommended for non-Manhattan
    geometry, since in working at the trapezoid level without
    considering adjacency, small artifacts are often introduced at
    non-Manhattan corners.

    <p>
    The algorithm takes the following steps:

    <p>
    If <i>dimen</i> > 0 (expanding)<br>
    <ol>
    <li>Decompose all selected objects on a given layer into a
      trapezoid list.
    <li>Create a second list containing trapezoids derived from the
      edges of trapezoids in the first list, created to enclose each
      edge and the surrounding area to +/- <i>dimen</i> normal to the
      edge.
    <li>Merge the two lists and join into polygons.
    </ol>

    <p>
    If <i>dimen</i> &#60; 0 (shrinking)
    <ol>
    <li>Decompose all selected objects on a given layer into a
      trapezoid list.
    <li>Invert the list in a rectangle that encloses all trapezoids
      bloated by <i>dimen<i>.
    <li>Create an edge trapezoid list from the inverted list.
    <li>Clip out the regions of the original list that overlap trapezoids
      in the edge list.
    <li>Merge the resulting list into polygons.
    </ol>
    </dl>

    <dl>
    <dt><b>old mode 2</b><dd>
    In this algorithm, for <i>dimen</i> larger than zero, the objects
    are first joined into maximal polygons, i.e., no two of these
    polygons abut or overlap.  The vertex list of each polygon is used
    to construct a "wire" of width 2*<i>dimen</i>, which is then
    converted to a polygon representation.  The wire polygon covers
    the edge of the original polygon, extending by <i>dimen</i> inside
    and outside of the figure.  Each polygon becomes the union of the
    original polygon and its "wire" polygon.  If <i>dimen</i> is less
    than zero, the geometry is inverted first as in the previous
    algorithm.  Thus, the edge "wires" around the clear areas are
    found.  These are clipped from the dark areas, yielding the final
    figures.  Without the inversion, polygons with holes would not be
    processed correctly.

    <p>
    Note that bloating modes 1 and 2 will not round the corners, i.e.,
    Manhattan corners remain Manhattan.
    </dl>

!!SEEALSO
keybang

!! 070616
!!KEYWORD
!join
!!TITLE
!join
!!HTML
    <b>Syntax: <tt>!join</tt> [-l | -a]</b>

    <p>
    This command will merge boxes, polygons, and optionally wires into
    complex polygons.  Use of merged geometry can reduce memory use
    and the size of the layout data file.

    <p>
    The <b>Join</b>, <b>Join Lyr</b>, and <b>Join All</b> buttons in
    the <b>Join or Split Objects</b> panel from the <a
    href="xic:join"><b>Join/Split</b></a> button in the <b>Edit
    Menu</b> provide an equivalent to the <b>!join</b> command.

    <p>
    There are three basic operating modes.  The <b>!join</b> command
    without arguments will join only selected objects.  With the
    "layer" argument, all objects on the current layer may be joined,
    With the "all" argument, objects on any layer may be joined.  In
    these two cases, objects will be joined whether selected or not. 
    For the arguments, the traditional "<tt>-</tt>" is actually
    optional, and only the first letter is considered, case
    insensitive.  So, "<tt>!join -a</tt>", "<tt>!join All</tt>", and
    "<tt>!join apple</tt>" are all equivalent.

    <p>
    If a layer has the <a href="NoMerge"><tt>NoMerge</tt></a> keyword
    applied, in general joining (merging) is forbidden on the layer. 
    However, this is overridden by the <b>!join</b> command without
    arguments.  In this mode, the user must select the objects to
    join, and it is assumed that the user really wants them joined. 
    In the other modes, objects on layers with this keyword set will
    <b>not</b> be joined.  The user must first remove the keyword with
    the <a href="xic:lpedt"><b>Tech Parameter Editor</b></a> from the
    <b>Attributes Menu</b>, or otherwise.

    <p>
    In any case, the layer must be visible.  With the "all" option,
    the layer must also be selectable.

    <p>
    The <b>!join</b> command, the <b>Join</b>, <b>Join Lyr</b>, and
    <b>Join All</b> buttons, the <a href="Join"><tt>Join</tt></a>, <a
    href="JoinObjects"><tt>JoinObjects</tt></a>, and <a
    href="GroupObjects"><tt>GroupObjects</tt></a> script functions,
    and other commands such as <a href="!layer"><b>!layer</b></a>
    which perform a join operation, are sensitive to four variables
    which fine-tune the behavior and performance.  The default values
    emphasize speed but limit the complexity of resulting polygons. 
    The user may need to set one or more of these variables in order
    for the operation to meet requirements.  These variables can be
    set from the <b>Join or Split Objects</b> panel, using the
    analogous controls.

    <p>
    In addition, the <a
    href="JoinSplitWires"><b>JoinSplitWires</b></a> variable, which
    also has a corresponding check box in the <b>Join or Split
    Objects</b> panel, determines whether wires are included in join
    operations.  By default, wires do not participate in the join,
    however if the variable (or equivalently, the check box) is set,
    wires will behave the same as polygons.

    <p>
    To join a set of objects, the first step internally is to
    decompose each object onto a collection of trapezoids.  As the
    objects are decomposed, the trapezoids are added to a list, which
    will be sent on to the function which performs the join.  The
    variable <a href="JoinMaxPolyQueue"><b>JoinMaxPolyQueue</b></a>
    sets the limit on the number of trapezoids that can accumulate
    before the list is processed.  All or none of the trapezoids from
    a given object are added to the list, i.e., objects are not broken
    up at this point.  If the addition of the trapezoids would cause
    the list to exceed the limit, then the list is sent on for
    processing, and a new list started.  If <b>JoinMaxPolyQueue</b> is
    set to 0, there is no limit, and only a single list will be
    processed.  When this variable is not set, the effective default
    value is 0 (no limit).

    <p>
    When a list is sent on for processing, the first operation is to
    break up the list into groups.  Each group contains one or more
    trapezoids, such that the trapezoids in each group are
    "connected", i.e., the aggregate forms a single figure.  The
    variable <a href="JoinMaxPolyGroup"><b>JoinMaxPolyGroup</b></a>
    specifies a limit on the number of trapezoids in any single group. 
    If this limit is reached, no additional trapezoids are added,
    instead they are placed in a new group or possibly some other
    existing group.  If this variable is set to 0, then no limit is
    applied, and in this case all groups are guaranteed to be
    disjoint.  When this variable is not set, the effective default
    value is 0 (no limit).

    <p>
    For each group, one or more polygons are created, which exactly
    cover the area of the trapezoids.  The variable <a
    href="JoinMaxPolyVerts"><b>JoinMaxPolyVerts</b></a> specifies a
    limit on the number of vertices which can appear in any single
    polygon.  Thus, if the limit is reached, more than one polygon
    will be generated.  If this variable is set to 0, then no limit is
    applied, and a single polygon will be created for each group. 
    When this variable is not set, the effective default value is 600.

    <p>
    When the effective value of <b>JoinMaxPolyVerts</b> is nonzero,
    the <a href="JoinBreakClean"><b>JoinBreakClean</b></a> variable
    determines now the partitioning is done.  If this variable is not
    set, then the polygons are built up by adding trapezoids until the
    vertex limit is reached, at which point a new polygon is started,
    and constructed using the remaining trapezoids.  The process
    continues until all trapezoids have been included in a polygon. 
    The resulting collection of polygons may have complicated
    boundaries that interleave in a rather random way.

    <p>
    If <b>JoinBreakClean</b> is set, the vertex limit is initially
    ignored, and a single polygon is created from all of the
    trapezoids.  If the vertex limit is exceeded, the polygon is split
    in two pieces, either horizontally or vertically.  If either piece
    still exceeds the limit, it is subdivided in the same way, and so
    on until all polygons are within the limit.  In this case, the
    boundaries are Manhattan.  This processing is more
    compute-intensive than the other approach, but provides a better
    looking layout.

!!SEEALSO
keybang
!jw

!! 092717
!!KEYWORD
!jw
!!TITLE
!jw
!!HTML
    <b>Syntax: <tt>!jw</tt> [-l]</b>

    <p>
    Without arguments, this command will take the most recently
    selected wire, and recursively join it with other similar (same
    width and layer) wires that share an end point.

    <p>
    If the <tt>-l</tt> option is given, all wires on the current layer
    in the current cell will be joined with any similar wires that
    share an endpoint.

    <p>
    The command works in electrical and physical modes.  Its initial
    purpose was to fix designs imported from another EDA tool that had
    all wires as two-vertex segments.  Within <i>Xic</i>, an attempt
    is made to keep wires maximally joined in general, which is more
    efficient, so this command is probably rarely needed.

!!SEEALSO
keybang
!join

!! 121713
!!KEYWORD
!split
!!TITLE
!split
!!HTML
    <b>Syntax: <tt>!split [v|V|1]</tt></b>

    <p>
    This is basically the reverse of <a href="!join"><b>!join</b></a>. 
    Selected polygons will be converted to collections of boxes and
    four-sided polygons.

    <p>
    However, objects on layers with the <a
    href="NoMerge"><tt>NoMerge</tt></a> keyword applied cannot be
    split (or joined).  The <a href="xic:lpedt"><b>Edit Tech
    Params</b></a> button in the <b>Attributes Menu</b> brings up an
    editor that allows changing of this status.

    <p>
    This functionality is also available from the <b>Split Horiz</b>
    and <b>Split Vert</b> buttons in the <b>Join or Split Objects</b>
    panel from the <a href="xic:join"><b>Join/Split</b></a> button in the
    <b>Edit Menu</b>.

    <p>
    Wire objects can be split similar to polygons if the <b>Include
    wires (as polygons) in join/split</b> check box in the <b>Join or
    Split Objects</b> panel is set, or equivalently if the <a
    href="JoinSplitWires"><b>JoinSplitWires</b></a> variable is set.

    <p>
    If an argument is given that has v,V, or 1 as a first character,
    the splitting orientation is along the vertical, i.e., objects are
    divided by vertical lines that intersect the vertices.  This is
    the mode used by the <b>Split Vert</b> button.  Otherwise,
    splitting favors the horizontal orientation.

!!SEEALSO
keybang

!! 100412
!!KEYWORD
!manh
!!TITLE
!manh
!!HTML
    <b>Syntax: <tt>!manh</tt> <i>min_box_size</i> [<i>mode</i>]</b>

    <p>
    This command applies to selected polygons.  It will convert each
    polygon to a Manhattan approximation, meaning that all sides will
    be horizontal or vertical.

    <p>
    The first argument is the size, in microns, of the minimum box
    width/height used to approximate non-Manhattan parts of the
    polygon.

    <p>
    The second argument is an integer that provides a choice of
    algorithms.  If this argument is not given, a zero value is
    understood.  Presently, there are two Manhattanizing algorithms
    available, specified if <i>mode</i> is zero or nonzero.

    <p>
    When <i>mode</i> is zero (or not given), the operation works as
    follows.  First, a polygon is decomposed into trapezoids, each of
    which is subdivided horizontally if necessary so that it can be
    further split vertically into rectangular and right-triangular
    pieces.  The triangular pieces are divided, recursively, into a
    rectangular and two residual right-triangular pieces.  All of the
    rectangular pieces whose height and width are <i>min_box_size</i>
    or larger are kept, and reassembled into a new Manhattan polygon.

   <p>
   In this mode, the rectangular elements can have arbitrary size,
   (though sufficiently large), and there is no restriction on
   coordinate locations.

   <p>
   When <i>mode</i> is nonzero, a different approach is taken.  First,
   a polygon is decomposed into a collection of trapezoids, and each
   trapezoid is processed.  For each trapezoid, all coordinates are
   moved to a "grid" of size <i>min_box_size</i>.  If either side is
   non-Manhattan, Bresenham's method is used to scan the trapezoid
   vertically, creating a new Manhattan trapezoid for each "scan line"
   (grid point) where the width changes.  The collection of trapezoids
   produced is reassembled into a new Manhattan polygon.

   <p>
   In this mode, all coordinates are moved to the grid, thus all the
   rectangular elements used to build the trapezoid have height and
   width an integer multiple of <i>min_box_size</i>.

!!SEEALSO
keybang

!! 033009
!!KEYWORD
!polyfix
!!TITLE
!polyfix
!!HTML
    <b>Syntax: <tt>!polyfix</tt></b>

    <p>
    This command will remove duplicate and in-line redundant vertices
    from selected polygons.  In addition, it will repair the following
    conditions:

    <ol>
    <li>If a reentrancy condition can be avoided by moving a vertex by
     one database unit, the vertex will be moved.
    <li>If a "needle" vertex or inline vertex is found, it will be
     removed.  A needle vertex is a vertex where the path doubles back
     on itself.
    </ol>

!!SEEALSO
keybang

!! 053108
!!KEYWORD
!polyrev
!!TITLE
!polyrev
!!HTML
    <b>Syntax: <tt>!polyrev</tt></b>

    <p>
    This will reverse the order of vertices of all selected polygons, 
    i.e., changing the winding from clockwise to counter-clockwise and
    vice-versa.  This should rarely if ever be needed.

!!SEEALSO
keybang

!! 053108
!!KEYWORD
!noacute
!!TITLE
!noacute
!!HTML
    <b>Syntax: <tt>!noacute</tt></b>

    <p>
    This command will look at each currently selected polygon.  For
    vertices that form an acute angle, vertices will be added so that
    no angle is acute, i.e.  the sharp point is clipped off.  This
    command is useful for preprocessing the database for flash
    conversion or other functions where acute angles are undesirable. 
    It does not prevent DRC errors, and in fact may produce them.  It
    also produces tiny (order of the layer's minimum dimension or one
    micron, if the minimum width for the layer is not given) changes
    to the layout.  For example, consider a group of five or more
    polygons, each one of which is a pie section, that together form a
    disk.  Running this command will produce a hole in the center,
    where the angles are clipped. 

    <p>
    The algorithm works as follows.  For each vertex
    <i>V</i><sub>n</sub> of a polygon, check the angle formed with
    adjacent vertices
    <i>V</i><sub>n-1</sub><tt>,</tt><i>V</i><sub>n+1</sub>.  If the
    angle is acute, construct a circle around <i>V</i><sub>n</sub>
    where the radius is the minimum of the layer's minimum dimension
    or the distance to the nearest of
    <i>V</i><sub>n-1</sub><tt>,</tt><i>V</i><sub>n+1</sub>.  Find the
    intersections of the circle with segments
    <i>V</i><sub>n</sub><tt>,</tt><i>V</i><sub>n-1</sub> and
    <i>V</i><sub>n</sub><tt>,</tt><i>V</i><sub>n+1</sub>.  Replace the
    vertex <i>V</i><sub>n</sub> with these two points. 

!!SEEALSO
keybang

!! 053108
!!KEYWORD
!togrid
!!TITLE
!togrid
!!HTML
    <b>Syntax: <tt>!togrid</tt></b>

    <p>
    This will move all vertices in selected boxes, polygons, and wires
    to the nearest snap point, using the grid/snap defined for the
    main window.  There is no effect on subcells or labels.  If the
    new object can not be created due to it having zero area, the old
    object is untouched.  Duplicate vertices are removed from the new
    objects.  Objects with vertices that are off-grid can change size
    and position due to this function.

!!SEEALSO
keybang

!! 100916
!!KEYWORD
!tospot
!!TITLE
!tospot
!!HTML
    <table border=0>
    <tr><td valign=top><b>jump to</b></td> <td>
    <a href="!tospot#algo"><b>The Algorithm</b></a><br>
    <a href="!tospot#cmts"><b>Comments and Warnings</b></a>
    </td></tr></table>

    <p>
    <b>Syntax: <tt>!tospot</tt> [<i>spotsize</i>]</b>

    <p>
    When an e-beam mask is written, the layout is rendered using a
    certain pixel size (known as the "spot size") set by the e-beam
    equipment.  This size may be as large as 0.5 microns but is
    typically much smaller, with smaller sizes providing higher
    resolution, but taking longer to write and therefor costing more. 
    There can be numerical problems in "rasterizing" round objects to
    the e-beam grid.  Since the round object is rendered as a
    collection of spot-pixels, the feature is not particularly round,
    but most importantly the number of pixels used may not be well
    defined, and therefor the figure area may not be as expected, or
    vary depending on position or rotation.

    <p>
    The <b>!tospot</b> command will apply an algorithm (described
    below) to all selected polygons.  The <i>spotsize</i>, if given,
    is the spot size to use in microns.  Values up to 1.0 micron are
    accepted.  If not given, the value is taken from the <a
    href="SpotSize"><b>SpotSize</b></a> variable, or the value of the
    <a href="MfgGrid"><tt>MfgGrid</tt></a> from the technology file if
    <b>SpotSize</b> is not set.
 
    <a name="algo"></a>
    <h2>The Algorithm</h2>
 
    The algorithm is intended to translate small objects with many
    vertices to a representation which will pass unchanged through
    e-beam rasterization.  This will in general change the shape of an
    object, to something close to that which will be rendered on the
    mask. 
 
    <p>
    The algorithm uses the following logic: 
 
    <p>
    <ol>
    <li>Find the bounding box of the figure.
    <p>
    <li>Snap the box edges to the nearest spot boundaries.
    <p>
    <li>If the center of the bounding box has changed, apply the same offset
       to the figure to keep it centered in the new bounding box.
    <p>
    <li>Shrink the box by 1/2 of the spot size.
    <p>
    <li>Clip the figure to the new bounding box.
    <p>
    <li>For each vertex, move the vertex to the center of the closest spot.
    <p>
    <li>Remove duplicate vertices.
    <p>
    <li>Save the modified figure in the database.
    </ol>

    <p>
    Following application of the algorithm, each vertex of the figure
    is centered in an e-beam spot, so it is unlikely that round-off or
    other error will cause the figure to change during rasterization.

    <a name="cmts"></a>
    <h2>Comments and Warnings</h2>

    The algorithm is intended for unconnected, nonconducting objects
    such as vias.  It should not in general be applied to wiring
    objects, since it will generate small gaps between processed
    objects which were originally touching, which will cause the
    extraction functions to detect that the objects are disconnected.

    <p>
    Although the object is shown on-screen as a polygon, The actual
    rendered object will be composed of pixels.  The size of the
    object on-screen is therefor one spot-size smaller than the
    rendered size (since half of the spot for each edge is not shown).

    <p>
    Applying <b>!tospot</b> to circular objects created with a
    <b>SpotSize</b> is <i>not</i> the same as creating the circular
    object with the <a href="xic:round"><b>round</b></a> or <a
    href="xic:donut"><b>donut</b></a> buttons with <b>SpotSize</b>
    nonzero.  When using <b>!tospot</b> on round objects created
    without <b>SpotSize</b> set, it is best to use an even number of
    <a href="xic:sides">sides</a> for round objects.  In particular,
    an 8-sided figure is probably the best choice for a "circular"
    via.

!!SEEALSO
keybang

!! 053108
!!KEYWORD
!origin
!!TITLE
!origin
!!HTML
    <b>Syntax: <tt>!origin</tt> <i>x y</i> | <tt>n|s|e|w|nw|ne|sw|se</tt></b>

    <p>
    In physical mode, this will move the cell origin.  This applies a
    translation to every object in the cell, and rebuilds the
    database.  The operation is more efficient than selecting
    everything and applying a move command, however there is no
    automatic "undo", except by applying the reverse operation.

    <p>
    <b>All instances of the cell will change position if the cell origin
    is changed.</b>

    <p>
    If the arguments are a coordinate <i>x,y</i> pair, the origin is
    shifted to that position (in microns) relative to the lower left
    corner of the cell's bounding box.

    <p>
    Alternatively, the argument can be one of the following compass
    directions:

    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><td><tt>n</td><td>The origin is moved to the top of the bounding
      box, the left/right position does not change.</td></tr>
    <tr><td><tt>s</td><td>The origin is moved to the bottom of the bounding
      box, the left/right position does not change.</td></tr>
    <tr><td><tt>e</td><td>The origin is moved to the right side of the
      bounding box, the up/down position does not change.</td></tr>
    <tr><td><tt>w</td><td>The origin is moved to the left side of the
      bounding box, the up/down position does not change.</td></tr>
    <tr><td><tt>nw</td><td>The origin is moved to the upper left corner of
      the bounding box.</td></tr>
    <tr><td><tt>ne</td><td>The origin is moved to the upper right corner of
      the bounding box.</td></tr>
    <tr><td><tt>sw</td><td>The origin is moved to the lower left corner of
      the bounding box.</td></tr>
    <tr><td><tt>se</td><td>The origin is moved to the lower right corner of
      the bounding box.</td></tr>
    </table>

!!SEEALSO
keybang

!! 053108
!!KEYWORD
!import
!!TITLE
!import
!!HTML
    <b>Syntax: <tt>!import</tt> <i>cellname</i></b>

    <p>
    In physical mode, this will move the contents of the physical part
    of <i>cellname</i> into the physical part of the current cell (the
    electrical parts are unchanged).  The physical part of
    <i>cellname</i> will be empty after the operation.  The
    coordinates of the objects are the same after the move, with
    respect to the origin of the current cell.  This operation is not
    undoable.

!!SEEALSO
keybang


!! ----------------------------------------------------------------------------
!! Layout Information
!! ----------------------------------------------------------------------------

!! 041009
!!KEYWORD
!fileinfo
!!TITLE
!fileinfo
!!HTML
    <b>Syntax: <tt>!fileinfo</tt> <i>filename</i> [<i>flags</i>]
      [<i>outfile</i>]</b>

    <p>
    This will print information about the archive file given as the
    first argument.  The output will go to a text file in the current
    directory.

    <p>
    The optional second argument is an integer or string which
    determines the type of information to print.  If an integer, the
    bits are flags that control the possible data fields and printing
    modes.  The string form is a space or comma-separated list of text
    tokens or hex integers.  The hex numbers or equivalent values for
    the text tokens are or'ed together to form the flags integer.  If
    the string contains white space it must be quoted.

    <p>
    The flag keywords and values are described with the <a
    href="ChdInfo"><tt>ChdInfo</tt></a> script function.

    <p>
    If not given or given as 0, all flags except for
    <tt>allcells</tt>, <tt>instances</tt>, and <tt>flags</tt> are
    taken as set.  This avoids printing the lengthly cells/instances
    list by default.  The keyword <tt>all</tt> or value -1 can be used
    to obtain all available information.

    <p>
    If the <i>outfile</i> is not given, the output will go to a file
    named "<tt>xic_fileinfo.log</tt>" in the current directory,
    otherwise it will go to the given file.  In either case, the user
    is prompted to view the file when the operation is complete.

    <p>
    This function has no effect on the database.

    <p>
    This command creates a transient <a href="xic:hier">Cell Hierarchy
    Digest</a> (CHD) data structure for the given file, and uses the
    CHD to obtain the information in a very similar manner to the
    <tt>ChdInfo</tt> script function.  In the <b>!fileinfo</b>
    command, the keyword flags listed below will show as indicated, as
    for the <a href="FileInfo"><tt>FileInfo</tt></a> script function:

    <dl>
    <dt><tt>scale</tt><dd>
    This will always be 1.0. 
    <dt><tt>alias</tt><dd>
    No aliasing is applied. 
    <dt><tt>flags</tt><dd>
    The flags will always be 0. 
    </dl>

!!SEEALSO
keybang

!! 060108
!!KEYWORD
!summary
!!TITLE
!summary
!!HTML
    <b>Syntax: <tt>!summary</tt> [<tt>-v</tt>] [<i>filename</i>]</b>

    <p>
    This prints summary information (similar to the <a
    href="xic:info"><b>Info</b></a> command) for each cell in the
    hierarchy rooted in the current cell to a file.  If <tt>-v</tt> is
    given, the output will be more verbose.  If no <i>filename</i> is
    given, a file named "<tt>xic_summary.log</tt>" will be created in
    the current directory.

!!SEEALSO
keybang

!! 120110
!!KEYWORD
!compare
!!TITLE
!compare
!!HTML
    <table border=0>
    <tr><td valign=top><b>jump to</b></td> <td>
    <a href="!compare#common"><b>Common Options</b></a><br>
    <a href="!compare#pco"><b>Per-Cell Object Mode Options</b></a><br>
    <a href="!compare#pcg"><b>Per-Cell Geometry Mode Options</b></a><br>
    <a href="!compare#flat"><b>Flat Mode Options</b></a>
    </td></tr></table>

    <p>
    <b>Syntax: <tt>!compare</tt> <i>arguments</i></b>

    <p>
    This function compares the geometry and instance placements in
    cells from two cell hierarchies, or between a cell hierarchy and
    cells in memory, or between cells in memory.  It is also possible
    to compare properties of cells, cell instances, and objects.  The
    results are written to a log file.  It is used as a back-end for
    the <a href="xic:diff"><b>Compare Layouts</b></a> panel, and can
    be used directly.

    <p>
    There are three basic comparison modes.  The per-cell object mode
    compares cell content object-to-object.  A difference will be
    indicated if a given object does not have an exact counterpart in
    the other cell.  The per-cell geometry mode does not look at
    objects, but rather considers the area occupied by the objects. 
    Thus, differences will be indicated only if the covered area
    differs.  The third comparison mode logically flattens the
    hierarchy before comparing the geometry.  Thus, differences will
    be indicated only if the flat geometry (i.e., the mask layout)
    differs.

    <p>
    The results are written to a file named "<tt>diff.log</tt>" in the
    current directory.  Each object or region that appears in one cell
    and not the other corresponding cell is written in a CIF-like
    format to the log file, unless the <tt>-d</tt> (diff only) option
    is given.

    <p>
    When the comparison finishes, the user is given the option to view
    the log file.  The <a href="!diffcells"><b>!diffcells</b></a>
    command can be used to create cells from the log file for
    visualizing the differences.

    <a name="common"></a>
    <h2>Common Options</h2>

    There is a large number of
    arguments that can be applied to set various modes and provide
    further input.  These arguments must be given as separate tokens,
    and all start with a '<tt>-</tt>' symbol.  The following options
    apply to all comparison modes.

    <p>
    <dl><dt><tt>-f1</tt> <i>source1</i><dd>
    This is the "left" source.  It is either the name of an <a
    href="xic:fsaf">archive file</a>, or the access name of a <a
    href="xic:hier">Cell Hierarchy Digest</a> (CHD) in memory, or a
    path to a CHD file.  This argument is not mandatory, and if
    missing implies that cells listed for the left source are found in
    main memory.
    </dl>

    <dl><dt><tt>-f2</tt> <i>source2</i><dd>
    This is the "right" source.  It is either the name of an <a
    href="xic:fsaf">archive file</a>, or the access name of a <a
    href="xic:hier">Cell Hierarchy Digest</a> (CHD) in memory, or a
    path to a CHD file.  This argument is not mandatory, and if
    missing implies that cells listed for the right source are found
    in main memory.
    </dl>

    <p>
    For backward compatibility, the "<tt>-f1</tt>" and "<tt>-f2</tt>"
    are optional.  If otherwise unassociated strings appear in the
    command line, the first will be taken as if given with
    <tt>-f1</tt>, the second (if any) will be taken as if given with
    <tt>-f2</tt>.

    <p>
    If a layout file name is given as a source, a temporary CHD will
    be created in memory and destroyed on command exit.  Thus for
    repeated comparisons using the same file, it is more efficient to
    create the CHD first, and pass its name to this command.

    <dl><dt><tt>-c1</tt> <i>cellname ...</i><dd>
    This is a list of cell names found in the left source.  If more
    than one name appears, the list should be quoted using
    double-quote marks.  If no left source was given, the names should
    match cells in memory.
    </dl>

    <dl><dt><tt>-c2</tt> <i>cellname ...</i><dd>
    This is a list of equivalent cell names found in the right source. 
    If more than one name appears, the list should be quoted using
    double-quote marks.  If no right source was given, the names
    should match cells in memory.
    </dl>

    <p>
    The actual list of cells to compare is generated by logic to be
    described.  The left source is taken as the "reference" for cell
    list creation.

    <p>
    In many cases, there is only one list of cells to compare (given
    in <tt>-c1</tt>), and each cell is sought in both sources.  If a
    cell is found in one source and not the other, this will appear in
    the log file, but is not considered to be an error.

    <p>
    If a <tt>-c2</tt> "equivalence" list is given, there must be
    exactly the same number of entries as given in the <tt>-c1</tt>
    list.  The cells in the two lists will be compared term-by-term,
    in order.  This is how one can compare cells with differing names. 
    In all other cases, the <tt>-c2</tt> list should not appear.  It
    is an error if <tt>-c2</tt> is given without <tt>-c1</tt>, or the
    list lengths differ.  However, the <tt>-c2</tt> list is ignored if
    in a per-cell comparison mode and the <tt>-h</tt> (recurse) option
    is given.

    <p>
    The interpretation of a non-existing <tt>-c1</tt> list depends on
    the comparison mode.  If in flat comparison mode, or in a per-cell
    mode and the <tt>-h</tt> (recurse) option is given, then the
    effective cell list contains only the default cell from the left
    source.  If this was a CHD name, the default cell is the one <a
    href="xic:chdconfig">configured</a> into the CHD, or the first
    top-level cell found in the source file.  In the other cases, a
    missing <tt>-c1</tt> list is interpreted as all cells found in the
    left source.

    <p>
    In the special case that neither a left or right source is
    specified, then the <tt>-c1</tt> and <tt>-c2</tt> lists can not be
    empty, and the names are cells in memory to compare.

    <p>
    In the per-cell modes with <tt>-h</tt> (recurse) option given,
    each entry in the <tt>-c1</tt> list is hierarchically expanded to
    a full list of the cells under the given cell, and these names are
    merged into a new list that contains no duplicates.  If no
    <tt>-c1</tt> list was given, per the discussion above, the cell
    list is effectively the hierarchy of the default cell from the
    left source.  The recurse option can not be used unless a left
    source is specified, i.e., the left cells can't be from memory.

    <dl><dt><tt>-l</tt> <i>layer_list</i><dd>
     The <i>layer_list</i> is a space-separated list of layer names,
     which must be quoted if more than one layer appears.  If no
     <i>layer_list</i> is given, all layers will be checked for
     differences.
    </dl>

    <dl><dt><tt>-s</tt><dd>
    If a <i>layer_list</i> is given, differences will be recorded in
    all layers <b>except</b> the layers in the <i>layer_list</i>.
    </dl>

    <dl><dt><tt>-d</tt><dd>
    Don't record the actual differences, only whether or not the cells
    differ.  This only accounts for geometrical differences,
    properties are ignored.
    </dl>

    <dl><dt><tt>-r</tt> <i>max_diffs</i><dd>
    The integer <i>max_diffs</i> sets the maximum number of
    differences to allow before the comparison terminates.  If not
    given or given a value 0, there is no limit.  Beware that errors
    in the cell list could potentially lead to enormous output, so it
    is usually advisable to put a limit on the number of differences
    recorded.
    </dl>

    <p>
    The following options set the comparison mode.  The per-cell
    comparison modes are generally faster and use less memory than the
    flat mode, since only the geometry from the two cells being
    compared is called into memory.  The flat mode is required if the
    two layouts have differences in hierarchy.

    <p>
    <dl><dt><tt>-g</tt><dd>
    When <tt>-g</tt> is given, per-cell geometric comparison is used.
    All "real" objects (boxes, polygons and wires) are considered when
    comparing geometry, text labels are ignored.
    </dl>

    <dl><dt><tt>-f</tt><dd>
    The <tt>-f</tt> option indicates flat comparison mode, and will
    supersede <tt>-g</tt> if also given.  In flat comparison mode,
    geometry is logically flattened before comparison.
    </dl>

    <p>
    If neither <tt>-f</tt> or <tt>-g</tt> appears in the argument list,
    per-cell object mode is used.

    <a name="pco"></a>
    <h2>Per-Cell Object Mode Options</h2>

    <dl><dt><tt>-t</tt> <i>obj_types</i><dd>
    The <i>obj_types</i> is a word containing any or all of the
    letters <tt>c,b,p,w,l</tt> which indicate cells, boxes, polygons,
    wires, and labels.  The letters indicate the types of objects that
    will be considered.  If this option is not given, the default is
    "<tt>cbpw</tt>", i.e., labels are ignored.

    <p>
    Comparison of labels can lead to false differences when comparing
    cells read from different file formats, since label bounding boxes
    are not well defined across file format conversion.
    </dl>

    <dl><dt><tt>-b</tt><dd>
    When given, a two-vertex wire or four-vertex polygon that is
    rendered as a Manhattan rectangle will match a rectangle object
    with the same dimensions.  Thus, files that have had these
    features converted to boxes to save space can be directly
    compared, without a lot of spurious entries in output.
    </dl>

    <dl><dt><tt>-n</tt><dd>
    When given, if duplicate objects are present in one or both of the
    files, unmatched duplicates will not be reported if one of the
    duplicates has a match.  Thus files with duplicates removed can be
    compared with the original file, and the duplicates will not
    appear in output as differences.
    </dl>

    <dl><dt><tt>-x</tt><dd>
    Expand subcell arrays (if comparing subcells).  Cell arrays are
    converted to individual placements before comparison, avoiding
    false errors between arrayed and equivalent unarrayed layouts.
    </dl>

    <dl><dt><tt>-h</tt><dd>
    The cell list is expanded so that all cells in the hierarchy under
    the given cells are compared.  The left source is used to extract
    the hierarchy cells.  The left source must have been specified,
    this option does no apply if the left cells are in memory.
    </dl>

    <dl><dt><tt>-e</tt><dd>
    If <tt>-e</tt> is given, electrical cells will be compared. 
    Otherwise, physical cells are compared.
    </dl>

    <p>
    Property comparisons are available only in per-cell object mode. 
    Property lists of cells, instances, and objects can be filtered by
    property number and compared.  Only the property lists of
    otherwise identical instances or objects will be compared. 
    Property comparison is turned off by default, but can be enabled
    with the <tt>-p</tt> option.

    <dl><dt><tt>-p</tt> <i>spec_word</i><dd>
    This option will set up property list comparison, which is
    available in per-cell object comparison mode.  The
    <i>spec_word</i> is a collection of characters from the list
    below, order is unimportant.
  
    <dl><dt><tt>b, p, w, l, c, s</tt><dd>
    The presence of these letters enables property list comparison
    between boxes, polygons, wires, labels, instances, and cells.  The
    indicated object type or instance must also be enabled for
    checking with the <tt>-t</tt> option or by default, or the letter
    is ignored.  The <tt>s</tt> character will always enable
    comparison of the property lists of the two source cells.
    </dl>

    <dl><dt><tt>n,u</tt><dd>
    These two letters control the filtering applied to property lists
    before comparison.  The filters limit the properties to compare. 
    If <tt>n</tt> is given, no filtering is applied, so that all
    properties will be considered.  This overrides <tt>u</tt> (below)
    if both are given.

    <p>
    If <tt>u</tt> is given, custom filtering will be applied.  There
    are separate filters available for properties of cells, instances,
    and objects, for both physical and electrical comparisons.  Custom
    filtering can be set up through the <a
    href="xic:prpfilt"><b>Custom Property Filter Setup</b></a> panel,
    or by directly setting the corresponding variables.  See the
    description of the panel for complete information.

    <p>
    If neither of these letters appear, default filtering is applied. 
    For physical data, the default filtering action is no filtering. 
    For electrical data, filtering is applied to cell and instance
    properties, and object properties are ignored, so that difference
    reporting applies to user-defined properties only.
    </dl>
    </dl>

    <p>
    Properties are compared by number and string.  In the output file,
    property comparison result lines are all in comment form (with
    '<tt>#</tt>' as the first character) so that they will be ignored
    if the file is subsequently processed with the <a
    href="!diffcells"><b>!diffcells</b></a> command.  Property
    comparison results consist of a string indicating the cell,
    instance, or object containing the properties.  If an instance or
    object, this is common to both input sources.  Following this are
    listings of properties found in one source and not the other. 
    Properties that are identical in the two sources are not listed.

    <a name="pcg"></a>
    <h2>Per-Cell Geometry Mode Options</h2>

    All of the options for per-cell object mode are available and have
    the same function, except that the only code that is considered
    for <tt>-t</tt> is "<tt>c</tt>".  By default, subcell checking is
    not enabled.  If enabled ("<tt>-t c</tt>" is given), then subcell
    placements are checked as in per-cell object mode.

    <p>
    When using per-cell geometry mode, the geometry is compared
    within areas of a grid whose size is given by the <a
    href="PartitionSize"><b>PartitionSize</b></a> variable. 
    Experimenting with this size can lead to improved speed, depending
    on the layout density.  The default partition size is 100 microns. 
    For best performance, this can be increased for low density, or
    reduced for high density, where "density" refers to the number of
    trapezoids per area.

    <a name="flat"></a>
    <h2>Flat Mode Options</h2>

    None of the per-cell options apply in flat mode, though with the
    exception of <tt>-e</tt> if given they will be benignly ignored. 
    Flat mode applies only to physical data, and if <tt>-e</tt> is
    given, an error will result.

    <p>
    In flat mode, both <i>source</i> tokens must be provided, as flat
    comparison to memory cells is not available.

    <p>
    <dl><dt><tt>-a</tt> <i>L,B,R,T</i><dd>
    The <tt>-a</tt> option specifies the rectangular area where
    comparison is performed.  If not given, comparison is performed
    over the entire cell area of both cells.  The word that follows
    <tt>-a</tt> consists of the four rectangle coordinate values, in
    microns, separated by commas.  There can be no white space.
    </dl>

    <p>
    The flat geometry mode is somewhat orthogonal to the other
    modes.  The algorithm uses two levels of gridding to partition the
    layout into pieces, and directly compares the geometry in each
    fine grid cell.  This is very similar to the algorithm described
    for the <a
    href="ChdIterateOverRegion"><tt>ChdIterateOverRegion</tt></a>
    script function.

    <p>
    <dl><dt><tt>-i</tt> <i>fine_grid</i><dd>
    This sets the size of the fine grid used for comparison.  The
    geometry in each fine grid cell is compared.  The value is in
    microns in the range 1.0 - 100.0, if not given 20.0 is used.
    </dl>

    <dl><dt><tt>-m</tt> <i>coarse_mult</i><dd>
    This sets the size of the coarse grid, as an integer multiple of
    the fine grid size.  The coarse grid size is the chunk size for
    reading geometry into memory.  Once in memory, the geometry is
    split into the fine grid cells and compared.  Using too large of a
    coarse grid can cause memory exhaustion for dense layouts, but on
    the other hand a larger coarse grid size usually improves speed. 
    The user should experiment to find the best values for the fine
    and coarse grid for their layouts.  The acceptable range for this
    parameter is 1 - 100.  If not given, 20 is used.
    </dl>

!!SEEALSO
keybang

!! 030909
!!KEYWORD
!diffcells
!!TITLE
!diffcells
!!HTML
    <b>Syntax: <tt>!diffcells [<i>filename</i>]</b>

    <p>
    This command will read a file produced by the <a
    href="xic:diff"><b>Compare Layouts</b></a> panel or the <a
    href="!compare"><b>!compare</b></a> command, and generate cells in
    the current symbol table containing the difference objects.  If no
    <i>filename</i> is given, a file named "<tt>diff.log</tt>", in the
    current directory, will be read.  Otherwise, the given file will
    be read, which should contain comparison output in the format of
    the <tt>diff.log</tt> file produced by the comparison commands.

    <p>
    The new cells are given the name of the source cell with a suffix
    "<tt>_df12</tt>" or "<tt>_df21</tt>".  The "12" cells contain the
    objects found in the "<tt>&#60&#60&#60</tt>" cell but not the
    "<tt>>>></tt>" cell, and vice-versa for the "21" cells.  The
    created cells contain only geometry, so do not have subcells, and
    instance differences are ignored.

    <p>
    This can be very useful for graphically displaying the differences
    between cells.

!!SEEALSO
keybang

!! 090914
!!KEYWORD
!empties
!!TITLE
!empties
!!HTML
    <b>Syntax: <tt>!empties</tt> [<tt>force_delete_all</tt>]</b>

    <p>
    This command will search through the hierarchy rooted in the
    current cell, and list the empty cells.  Only the names of cells
    that have no content (objects or subcells) in either electrical or
    physical mode are listed.  This test is performed automatically
    when a new cell is opened for editing/viewing, though this can be
    suppressed by setting the <a
    href="NoCheckEmpties"><b>NoCheckEmpties</b></a> variable.

    <p>
    Instances of empty cells are shown on-screen as a small
    highlighting box at the placement location.  If empty cells are
    found, the <b>Empty Cells</b> pop-up appears, which provides a
    means for their deletion.  The deletion capability is available in
    the <a href="xiv"><i>Xiv</i></a> feature set as well, in a rare
    instance where database changes are allowed.  A list of the empty
    cells is shown, each followed by "yes" or "no", where "yes"
    implies that the cell will be deleted.  Initially, all listings
    will be "no", but these can be changed by clicking on them.  The
    <b>Delete All</b> button sets all entries to "yes", and the
    <b>Skip All</b> button sets all entries to "no".  Pressing
    <b>Apply</b> will actually perform the deletions.

    <p>
    However, is is not possible to delete instances of empty cells
    that are contained in a parent cell with the IMMUTABLE <a
    href="xic:cells#flags">flag</a> set.  Cells referenced by an
    instance in an immutable parent will not be deleted, however
    instances in non-immutable parents within the hierarchy will be
    deleted.

    <p>
    If cells are deleted, the search for empty cells is repeated, and
    the pop-up will be updated if any are found.  Additional cells may
    become empty due to the previous deletions.

    <p>
    If the literal "<tt>force_delete_all</tt>" argument is given, all
    empty cells in the hierarchy, including those that become empty
    due to prior deletions, will be deleted (if possible).  The pop-up
    will not appear.

    <p>
    The current cell, if empty or if it becomes empty, will not be
    deleted.


!!SEEALSO
keybang

!! 060108
!!KEYWORD
!area
!!TITLE
!area
!!HTML
    <b>Syntax: <tt>!area</tt> [<i>layername</i>]</b>

    <p>
    The <b>!area</b> command prints the area (in square microns)
    covered by the given layer, in the current cell and all of its
    descendent cells.  If <i>layername</i> is not given, the current
    layer is used, if in physical mode.  Only physical mode layers can
    be given, and only physical cells are computed.  This does
    <i>not</i> account for overlapping objects.

!!SEEALSO
keybang

!! 060108
!!KEYWORD
!perim
!!TITLE
!perim
!!HTML
    <b>Syntax: <tt>!perim</tt></b>

    <p>
    This command will compute the perimeter of selected objects and
    subcells and print the totals, in microns.  Labels are ignored. 
    Separate totals are given for subcell perimeter, and for the
    perimeter of geometric objects.

!!SEEALSO
keybang

!! 060108
!!KEYWORD
!bb
!!TITLE
!bb
!!HTML
    <b>Syntax: <tt>!bb</tt></b>

    <p>
    In physical mode, this prints the bounding box coordinates of the
    current cell, in microns.

!!SEEALSO
keybang

!! 100412
!!KEYWORD
!checkgrid
!!TITLE
!checkgrid
!!HTML
    <dl><dt>
    <b>Syntax:</b><dd>
    <b><tt>!checkgrid [c][o]</tt></b><br>
    <b><tt>!checkgrid</tt> [-]
    [<tt>-l</tt> <i>layer_list</i>]
    [<tt>-s</tt>] [<tt>-g</tt> <i>spacing</i>] [<tt>-b</tt> <i>L,B,R,T</i>]
    [<tt>-t</tt> <i>bpw_string</i>] [<tt>-d</tt> <i>depth</i>]
    [<tt>-f</tt> <i>outfile</i>]</b>
    </dl>

    <p>
    This is really two commands in one.  The first mode checks objects
    in the current cell, and will mark off-grid vertices on-screen. 
    The second mode will check vertices to all levels of the
    hierarchy.

    <p>
    The first form will mark vertices of objects and cells that are
    off-grid.  The reference grid is the grid currently applied in the
    main drawing window.  If there are selected objects, these (only)
    will be tested.  Objects or subcells that have an off-grid vertex
    will remain selected, other objects will be deselected.  If no
    testable objects are selected, all objects on visible, selectable
    layers will be tested.  Cells will be checked if the '<tt>c</tt>'
    modifier is given.  Objects or cells that have an off-grid vertex
    will be selected, and all off-grid vertices will be marked.

    <p>
    Giving the <b>!checkgrid</b> command with the '<tt>o</tt>'
    modifier (or '<tt>n</tt>' or '<tt>0</tt>' (zero)) will remove the
    marks from the screen.

    <p>
    If the first character of the argument string is '-', the second
    mode will be used.  An argument containing a single '-' is valid
    to enforce this.  The other possible arguments are listed below. 
    All of these are optional.
 
    <p>
    The command will look at objects in the hierarchy, and if an
    object vertex would appear off-grid in the current cell, it will
    be listed in an output file.

    <dl>
    <dt><tt>-l</tt> <i>layer_list</i><dd>
    The argument is a space-separated list of layer names, which
    should be quoted if it contains more than one entry.  Only objects
    on the listed layers will be checked, or if <tt>-s</tt> is also
    given objects on layers not listed will be checked.  If not given,
    all layers will be used.
    </dl>

    <dl>
    <dt><tt>-s</tt><dd>
    If a <i>layer_list</i> was given, objects on these layers will be
    ignored.
    </dl>

    <dl>
    <dt><tt>-g</tt> <i>spacing</i><dd>
    The <i>spacing</i>, in microns, is the assumed grid spacing.  If
    not given, the value from the current grid setting will be used.
    </dl>

    <dl>
    <dt><tt>-b</tt> <i>L,B,R,T</i><dd>
    This specifies a rectangular region in the current cell where
    testable objects will be searched for.  If not given, the entire
    cell will be searched.  The coordinates are in microns, separated
    by commas with no white space.
    </dl>

    <dl>
    <dt><tt>-t</tt> <i>bpw_string</i><dd>
    This is a string consisting of one or more of the letters
    "<tt>b</tt>", "<tt>p</tt>", and "<tt>w</tt>".  This indicates the
    type of objects to test:  boxes, polygons, and wires.  If not
    given, "<tt>bpw</tt>" is assumed.

    <p>
    Note:  only the lower left and upper right vertices of boxes are
    tested, since the other two are redundant.
    </dl>

    <dl>
    <dt><tt>-d</tt> <i>depth</i><dd>
    This sets the maximum hierarchy depth to search for objects.  If
    not given, all levels of the hierarchy will be searched.  A zero
    value would search only the current cell.
    </dl>

    <dl>
    <dt><tt>-f</tt> <i>outfile</i><dd>
    This sets the name of the output file, which will contain a sorted
    list of off-grid vertices.  If not given, the name of the current
    cell, suffixed with "<tt>_vertices.log</tt>", will be used.  If
    the name is "<tt>stdout</tt>", output will go to the standard
    output (console window).
    </dl>

!!SEEALSO
keybang
xic:grid

!! 060108
!!KEYWORD
!checkover
!!TITLE
!checkover
!!HTML
    <b>Syntax: <tt>!checkover</tt> [<i>filename</i>]</b>

    <p>
    This command creates a report of subcell overlap in the current
    physical cell.  The report is written to the given
    <i>filename</i>, or to a temporary file if no name is given.  The
    user is given the option to view the report, if a filename is
    given, otherwise the file viewer pops up automatically for the
    temporary file, and the temporary file is deleted.

!!SEEALSO
keybang

!! 012016
!!KEYWORD
!check45
!!TITLE
!check45
!!HTML
    <b>Syntax: <tt>!check45</tt> [<tt>p|w</tt>]</b>

    <p>
    This will select polygons and/or wires in the current cell that
    have an angle that is not an exact multiple of 45 degrees.  If an
    argument "<tt>p</tt>" is given, only polygons are checked, or if
    the argument is "<tt>w</tt>" only wires are checked.  Otherwise
    both polygons and wires are checked.  Only objects on visible,
    selectable layers are checked.

!!SEEALSO
!poly45
keybang

!! 060108
!!KEYWORD
!dups
!!TITLE
!dups
!!HTML
    <b>Syntax: <tt>!dups</tt></b>

    <p>
    This checks the current cell for identical objects placed on top of
    one another.  The duplicate objects are selected.  This command
    initially deselects anything previously selected.

!!SEEALSO
keybang


!! 101609
!!KEYWORD
!wirecheck
!!TITLE
!wirecheck
!!HTML
    <b>Syntax: <tt>!wirecheck</tt> [<i>layer</i> ...]</b>

    <p>
    Wire database objects have the property that their geometric shape
    is not unambiguously specified.  Every tool contains code that
    generates a polygon from the wire vertex list, which can be
    displayed and further processed.  The details of how corners are
    handled, and how the "rounded" end style is handled, can vary
    slightly between tools.

    <p>
    Some wires are difficult to represent as a polygon, and in fact
    may cause failure with some tools (and possibly not others). 
    Although wires sensibly created by hand would rarely if ever cause
    trouble, wires generated by format converters or some other
    program might cause faiures, for example when "fracturing" the
    layout file during mask generation.  Even wires that look
    reasonable on-screen may not be renderable on other tools, thus
    <i>Xic</i> provides some tests that can be applied to flag
    potential problems.

    <p>
    Wires can be "questionable" or "bad".  Bad wires can not be
    rendered, and will never be included in the <i>Xic</i> database. 
    These wires are always flagged as errors when seen.

    <p>
    Wires that are "questionable" have vertices that are closely
    spaced compared to the wire width, and trigger an edge-clipping
    fixup in the wire-to-polygon function.  Such wires may cause
    rendering difficulty in other tools.  In addition, wires whose
    polygon representation requires more than 600 vertices are flagged
    as questionable.

    <p>
    When reading a layout file, questionable wires will be reported
    as warnings in the log file.

    <p>
    This command can be used to find questionable wires in the current
    cell.  It takes a list of layer names as arguments, which will
    limit the testing to wires on those layers.  If no arguments are
    given, all layers will be used.

    <p>
    If wires are selected before the command is given, only the
    selected wires on the given layers (or on any layer, if no
    arguments are given) will be checked.  If no wires are selected,
    all wires on the layers given (or on any layer if no arguments are
    given) will be checked.

    <p>
    If a wire is determined to be questionable, it will be, or remain,
    selected.  The <a href="xic:info"><b>Info</b></a> command in the
    <b>View Menu</b> can be used to determine the exact nature of the
    defect.

    <p>
    The flags that might be listed in the info for wires have the
    following explanations.

    <dl>
    <dt><tt>ONEVERT</tt><dd>
    The wire consists of a single vertex only.  The interpretation of
    this case may be tool-dependent.
    </dl>

    <dl>
    <dt><tt>ZEROWIDTH</tt><dd>
    The wire has zero width.  Zero width wires have no physical
    significance and should not appear in a physical layout, though
    generally they are simply ignored.
    </dl>

    <dl>
    <dt><tt>CLOSEVERTS</tt><dd>
    The wire contains at least two vertices whose spacing is less than
    half of the wire width.  This may not be a problem, however wires
    that are difficult to render will always have this condition.
    </dl>

    <dl>
    <dt><tt>CLIPFIX</tt><dd>
    This flag indicates that special fixup code was triggered when the
    representing polygon was created, which indicates that rendering
    requires non-trivial processing.  Wires that have this flag are
    suspect (they will also always have <tt>CLOSEVERTS</tt> set).
    </dl>

    <dl>
    <dt><tt>BIGPOLY</tt><dd>
    This flag indicates that the representing polygon contains more
    than 600 vertices.  This is not really a problem, by does indicate
    that the wire may be overly complex.
    </dl>

    <p>
    Wires that are determined to be quesionable will have one or more of
    <tt>ZEROWIDTH</tt>, <tt>CLIPFIX</tt>, or <tt>BIGPOLY</tt> set.

!!SEEALSO
!polycheck
keybang

!! 033009
!!KEYWORD
!polycheck
!!TITLE
!polycheck
!!HTML
    <b>Syntax: <tt>!polycheck</tt> [<i>layer</i> ...]</b>

    <p>
    This command will test polygons for reentrancy and other defects. 
    It takes a list of layer names as arguments, which will limit the
    testing to polygons on those layers.  If no arguments are given,
    all layers will be used.

    <p>
    If polygons are selected before the command is given, only the
    selected polygons on the given layers (or on any layer, if no
    arguments are given) will be checked.  If no polygons are
    selected, all polygons on the layers given (or on any layer if no
    arguments are given) will be checked.

    <p>
    If a polygon fails the test it will be, or remain, selected.  The
    <a href="xic:info"><b>Info</b></a> command in the <b>View Menu</b>
    can be used to determine the exact nature of the failure.

    <p>
    Duplicate vertices will be silently removed from the checked
    polygons.

    <p>
    The polygons may be repairable with the <a
    href="!polyfix"><b>!polyfix</b></a> command.

!!SEEALSO
!wirecheck
keybang

!! 100412
!!KEYWORD
!polymanh
!!TITLE
!polymanh
!!HTML
    <b>Syntax: <tt>!polymanh</tt> [<i>arg</i>]</b>

    <p>
    Without an argument, this command will deselect all polygons, and
    then select only those that are Manhattan.  If there is an
    argument, which can be any text token, the non-Manhattan polygons
    will be selected instead.

!!SEEALSO
keybang

!! 012016
!!KEYWORD
!poly45
!!TITLE
!poly45
!!HTML
    <b>Syntax: <tt>!poly45</tt></b>

    <p>
    This will select polygons in the current cell that have an
    angle that is not an exact multiple of 45 degrees.  All polygons
    on visible, selectable layers are checked.

    <p>
    This is equivalent to using a "<tt>p</tt>" argument with the
    <a href="!check45"><b>!check45</b></a> command.

!!SEEALSO
keybang

!! 060108
!!KEYWORD
!polynum
!!TITLE
!polynum
!!HTML
    <b>Syntax: <tt>!polynum</tt> [<i>arg</i>]</b>

    <p>
    This function activates a mode where the vertex numbers of
    selected polygons are shown on-screen.  If no argument is given,
    the display mode is toggled.  If the argument is "<tt>y</tt>",
    "<tt>1</tt>", "<tt>on</tt>", etc., the display mode is enabled. 
    If the argument is "<tt>n</tt>", "<tt>0</tt>", "<tt>off</tt>",
    etc., the display mode is disabled.

!!SEEALSO
keybang

!! 111609
!!KEYWORD
!setflag
!!TITLE
!setflag
!!HTML
    <b>Syntax: <tt>!setflag</tt> <i>name</i> 0/1 or <tt>!setflag ?</tt></b>

    <p>
    This allows the flags associated with the current cell to be
    changed.  The second form of the command brings up a window
    containing a list of the flag names and descriptions, as does
    <tt>setflag</tt> without arguments.

    <p>
    The IMMUTABLE and LIBRARY flags can also be modified with the <a
    href="xic:cells#flags"><b>Set Cell Flags</b></a> pop-up from the
    <b>Cells Listing</b> panel.

    <p>
    The IMMUTABLE flag will also control availability of user
    interface features associated with cell editing.  This flag is
    also set by the <a href="xic:cedit"><b>Enable Editing</b></a>
    button in the <b>Edit Menu</b>.

!!SEEALSO
keybang


!! ----------------------------------------------------------------------------
!! Libraries and Databases
!! ----------------------------------------------------------------------------

!! 081318
!!KEYWORD
!mklib
!!TITLE
!mklib
!!HTML
    <b>Syntax: <tt>!mklib</tt> [<i>archive_file</i>] [-d] [-a] [-l]|[-u]</b>

    <p>
    This command will create or append to a <a
    href="libraries">library file</a> adding references to cells in
    the current hierarchy, or to cells in an <a
    href="xic:fsaf">archive file</a> if <i>archive_file</i> is
    given.  If <tt>-a</tt> is given, the library entries will be
    appended to an existing library, otherwise a new library will be
    created.  If <tt>-d</tt> is given, a <tt>Directory</tt> reference
    will be created.  These are usually collections of native
    <i>Xic</i> cells.  The <i>archive_file</i> argument is the
    directory path in this case, if given.  If not given, the path
    will be prompted for.  The <tt>-l</tt> and <tt>-u</tt> arguments
    are ignored with <tt>-d</tt> given.  Otherwise, if <tt>-l</tt> is
    given, the reference name will be a lower-cased version of the
    cell name, or, if <tt>-u</tt> is given, the reference will be
    upper-cased.

    <p>
    The following applies when <tt>-d</tt> is not given.

    <p>
    if <i>archive_file</i> is given, all cells found in the file will
    be added to the output library as references.  If the file is not
    rooted, a reference directory is prompted for.  This is the full
    path to the directory containing the archive file.  The prompt is
    skipped if <i>archive_file</i> is rooted.

    <p>
    If <i>archive_file</i> is not given, and the current cell was read
    from an archive file, the user is prompted for the name of a
    reference archive file.  If a name is given, the library entries
    will be in the form
    <blockquote>
    <tt>Reference</tt> <i>refname</i> <i>reference_path</i>/<i>name
       cellname</i>
    </blockquote>
    otherwise the references are in the form
    <blockquote>
    <tt>Reference</tt> <i>refname</i> <i>reference_path</i>/<i>cellname</i>
    </blockquote>
    as for native cells.  The user is next prompted for the reference
    path.  This should be the path to the directory where the
    referenced cell files, or archive file, reside.  The current
    directory is the default.  Finally, the user is prompted for the
    name of the library file, which is then created, or appended to if
    it exists and <tt>-a</tt> was given.

    <p>
    <b>Example</b><br>
    You have a GDSII file named
    <tt>/usr/local/cad/standard_cells/std_cell_lib.gds</tt> and you
    want to enable the standard cell definitions in <i>Xic</i> as
    library cells.  This is a two step process.
    <ol>
    <li>First create a library file with the command
    <blockquote>
    <tt>!mklib /usr/local/cad/standard_cells/std_cell_lib.gds
    </blockquote>
    This creates a file named <tt>std_cell_lib.lib</tt> in the
    current directory.  Move this file to a directory in your cell
    <a href="Path">search path</a> if desired (the current directory
    is probably in the search path).  You may want a separate directory
    for library files, for example.

    <p>
    <li>The library will need to be opened in order for cells in the
    library to resolve references as designs are read.  From the
    <a href="xic:libs"><b>Libraries</b></a> panel from the <b>Libraries List</b>
    button in the <b>File Menu</b>, double click the folder icon for the
    <tt>std_cell_lib.lib</tt> entry.  The icon will change to an open
    folder, indicating that the library is now open.

    <p>
    You can add an <a href="OpenLibrary"><tt>OpenLibrary</tt></a> call
    to your <a href=".xicstart"><tt>.xicstart</tt></a> file, to open the
    library automatically whenever <i>Xic</i> starts.  Otherwise, you
    will need to open it manually when needed.
    </ol>

!!SEEALSO
keybang

!! 090809
!!KEYWORD
!lsdb
!!TITLE
!lsdb
!!HTML
    <b>Syntax: <tt>!lsdb</tt></b>

    <p>
    This command pops up a list of the "special" databases currently
    in memory, by name and type.  These are the databases created by
    the <a href="ChdOpenOdb"><tt>ChdOpenOdb</tt></a>, <a
    href="ChdOpenZdb"><tt>ChdOpenZdb</tt></a>, and <a
    href="ChdOpenZbdb"><tt>ChdOpenZbdb</tt></a> script functions. 
    Special databases are also used internally, for example in the <a
    href="xic:csect"><b>Cross Section</b></a> command from the <b>View
    Menu</b>.

!!SEEALSO
keybang

!! ----------------------------------------------------------------------------
!! Marks
!! ----------------------------------------------------------------------------

!! 120909
!!KEYWORD
!mark
!!TITLE
!mark
!!HTML
    <b>Syntax: <tt>!mark l|b|t|u|c|e|d|w|r</tt> [<i>attr_flags</i>]</b>

    <p>
    This command allows the user to add annotation marks to the cell
    display, physical or electrical.  These marks are not part of the
    design and will not be saved in output, but are useful for
    temporarily marking or highlighting an area for reference.  They
    will appear on plots of the cell.

    <p>
    The marks are persistent to a cell, meaning that they will appear
    whenever the cell is displayed as the top-level cell in a window. 
    Each cell in memory can have its own set of marks.  Marks are not
    displayed in expanded subcells.

    <p>
    The first argument is a letter giving the initial type of mark to
    create.  When the command is active, any of these letters may be
    typed in a drawing window, which will change the current mark
    type.  While the command is active, clicking twice or dragging
    will produce a mark, and Shift-clicking on an existing mark will
    delete the mark.

    <p>
    The optional <i>attr_flags</i> is a decimal number representing
    flags bits that control presentation format of the mark.  The bits
    are

    <dl>
    <dt>bit 0<dd>
    When set, a dashed line is used, otherwise solid.
    <dt>bit 1<dd>
    When set, the mark will blink.
    <dt>bit 2<dd>
    When set, an alternate color will be used for the mark (bit 1 is
    ignored).  The default is the normal highlighting color.
    </dl>

    <p>
    The value is a digit representing the set bits, for example 3 sets
    bits 0 and 1, 5 sets bits 0 and 2, etc.  A value 0 is the default.

    <p>
    When the command is active, pressing a digit key will reset the
    current attribute flags for subsequent marks.

    <p>
    The following marks are available:

    <dl>
    <dt><tt>l</tt><dd>
    Draw a line.  Click twice or drag to define the line endpoints.
    </dl>

    <dl>
    <dt><tt>b</tt><dd>
    Draw an open box.  Click twice or drag to define the box boundary.
    </dl>

    <dl>
    <dt><tt>t</tt><dd>
    Draw an open "horizontal" triangle, with the base a vertical line,
    and the third point pointing to the left or right at the midpoint
    of the base.  The triangle will fit inside of the ghost-drawn box
    shown during creation.  The initial press location sets the x
    coordinate of the triangle base.
    </dl>

    <dl>
    <dt><tt>u</tt><dd>
    Draw an open "vertical" triangle, with the base a horizontal line,
    and the third point pointing up or down at the midpoint of the
    base.  The triangle will fit inside of the ghost-drawn box shown
    during creation.  The initial press location sets the y coordinate
    of the triangle base.
    </dl>

    <dl>
    <dt><tt>c</tt><dd>
    Draw an open circle.  The press location is the center of the
    circle, and the distance to the second point sets the radius.
    </dl>

    <dl>
    <dt><tt>e</tt><dd>
    Draw an open ellipse.  The ellipse will fit inside of the
    ghost-drawn box shown during creation.
    </dl>

    <p>
    To delete a mark, while the <b>!mark</b> command is active, click
    on the mark to delete with the <b>Shift</b> key held.  Any mark
    under the click location will be deleted, not just those of the
    current type.

    <p>
    Marks can be saved to a file, and restored from a file.  This is
    accomplished by giving the following code letters, which can
    appear in the same contexts as the mark code letters.

    <dl>
    <dt><tt>d</tt> or <tt>w</tt><dd>
    The user will be prompted for the name of a file, then the
    existing marks in the current cell will be written to the file.
    </dl>

    <dl>
    <dt><tt>r</tt><dd>
    The user will be prompted for the name of a file, which should be
    in the format produced with the <tt>d</tt> or <tt>w</tt> option. 
    If the file was produced for the same cell name and display mode
    of the current cell, the marks will be read from the file and
    added to the current cell.
    </dl>

    <p>
    The file format is not currently documented, but is very simple
    and should be easy to figure out by inspection.

    <p>
    The marks manipulated with the <b>!mark</b> command are the same
    as the marks produced with the <a
    href="AddMark"><tt>AddMark</tt></a> script function.  Note that
    <tt>AddMark</tt> can create additional mark types not (yet)
    supported by the command interface.

!!SEEALSO
keybang

!! ----------------------------------------------------------------------------
!! Memory Management
!! ----------------------------------------------------------------------------

!! 060108
!!KEYWORD
!clearall
!!TITLE
!clearall
!!HTML
    <b>Syntax: <tt>!clearall</tt></b>

    <p>
    This command will clear all program memory, no questions asked,
    similar to the <a href="ClearAll"><tt>ClearAll</tt></a> script
    function.  Be careful, since anything cleared and not saved is
    gone forever.  There is no current cell when the operation
    completes, so that a new cell must be opened explicitly.

!!SEEALSO
keybang

!! 060108
!!KEYWORD
!vmem
!!TITLE
!vmem
!!HTML
    <b>Syntax: <tt>!vmem</tt></b>

    <p>
    This command is available in Microsoft Windows releases only.  It
    will print system virtual memory information in a pop-up window. 
    This probably has very limited value to the user.

!!SEEALSO
keybang

!! 060108
!!KEYWORD
!mmstats
!!TITLE
!mmstats
!!HTML
    <b>Syntax: <tt>!mmstats</tt></b>

    <p>
    The command will print, on the console window, statistics from the
    first-level memory manager.  The first column is the internal name
    of a data structure being managed.  The second column is the size
    of the structure in bytes.  The remaining columns are:

    <table border=0 cellpadding=2>
    <tr><td><tt>fl</tt></td> <td>length of the full block list, each
      block contains 64 entries</td></tr>
    <tr><td><tt>fh</tt></td> <td>hash table width for full list
      entries</td></tr>
    <tr><td><tt>nfl</tt></td> <td>length of the not-full block list</td></tr>
    <tr><td><tt>nfh</tt></td> <td>hash table width for not-full list
      entries</td></tr>
    <tr><td><tt>u</tt></td> <td>number of bytes in use</td></tr>
    <tr><td><tt>nu</tt></td> <td>number of bytes allocated but not in
      use</td></tr>
    </table>

    <p>
    This information is probably not of much value to the user.

!!SEEALSO
keybang

!! 071815
!!KEYWORD
!mmclear
!!TITLE
!mmclear
!!HTML
    <b>Syntax: <tt>!mmclear</tt></b>

    <p>
    This will free the caches associated with the memory manager. 
    Each managed data type has a cache of deleted objects, which are
    used to quickly service an allocation request.  This command will
    clear the caches, giving the object memory back to the system. 
    This is implicitly called by <a
    href="!clearall"><b>!clearall</b></a> and the <a
    href="ClearAll"><tt>ClearAll</tt></a> script function.

!!SEEALSO
keybang

!!IFDEF OpenAccess
!! ----------------------------------------------------------------------------
!! OpenAccess Interface
!! ----------------------------------------------------------------------------

!! 012713
!!KEYWORD
!oaversion
!!TITLE
!oaversion
!!HTML
    <b>Syntax: <tt>!oaversion</tt></b>

    <p>
    This command exists only when the OpenAccess <a
    href="oaplugin">plug-in</a> is loaded.

    <p>
    This command will print, on the prompt line, the OpenAccess
    release number.

!!SEEALSO
keybang
oaplugin
!!ENDIF


!!IFDEF OpenAccess
!! 062313
!!KEYWORD
!oadebug
!!TITLE
!oadebug
!!HTML
    <b>Syntax: <tt>!oadebug</tt> [<tt>+</tt>|<tt>-</tt>]
    [<tt>l</tt>[<tt>oad</tt>]] [<tt>p</tt>[<tt>cell</tt>]]
    [<tt>n</tt>[<tt>et</tt>]]</b>

    <p>
    This function enables or disables logging of OpenAccess interactions
    and operations.  There are three categories of messages.
    <dl>
    <dt><tt>load</tt><dd>
    Messages emitted when reading cell data from OpenAccess and
    building equivalent cell structures in <i>Xic</i>.

    <dt><tt>pcell</tt><dd>
    Messages emitted when instantiating parameterized cells.

    <dt><tt>net</tt><dd>
    Messages emitted when evaluating connectivity.
    </dl>

    <p>
    Each category can be separately enabled or disabled, depending on
    whether the keyword follows a '+' or '-'.  An initial virtual '+'
    is assumed.  Only the first character of the keyword needs to be
    given, and keyword recognition is case-insensitive.  All keywords
    are initially disabled (no logging).

    <p>
    Example: turn on <tt>net</tt>, turn off <tt>load</tt>.
    <blockquote>
    <tt>!oadebug n -l</tt>
    </blockquote>

    <p>
    With no arguments given, the command will print the present flag
    status on the prompt line.

    <p>
    The debugging output will go to a log file named
    "<tt>oa_debug.log</tt>" which will be located in the log files
    area.  The <a href="xic:logs"><b>Log Files</b></a> button in the
    <b>Help Menu</b> will enable access to the log files.

    <p>
    The <a href="dblog"><b>Logging</b></a> button in the <b>Help Menu</b>
    brings up a panel from which the three OpenAccess logging flags can
    be set, as an alternative to using the <b>!oadebug</b> command.

!!SEEALSO
keybang
oaplugin
!!ENDIF

!!IFDEF OpenAccess
!! 012713
!!KEYWORD
!oanewlib
!!TITLE
!oanewlib
!!HTML
    <b>Syntax: <tt>!oanewlib</tt> <i>libname</i> [<i>techlibname</i>]</b>

    <p>
    This command exists only when the OpenAccess <a
    href="oaplugin">plug-in</a> is loaded.

    <p>
    This will create a new library <i>libname</i> if it does not
    already exist.  The <i>techlibname</i> is the name of an existing
    library, if given.  The new library will attach to the same
    technology database as <i>techlibname</i>, or will attach to the
    local technology database found in <i>techlibname</i> if
    <i>techlibname</i> has no attachment.  If <i>techlibname</i> is
    given then it must exist.

    <p>
    If <i>techlibname</i> is not given, then the technology will be
    attached from the library named in the <a
    href="OaDefTechLibrary"><b>OaDefTechLibrary</b></a> variable, if
    that variable is set.  If no technology source is found, the
    library will be created with an empty technology database.

    <p>
    If the library is created, it will be given a property which allows
    <i>Xic</i> to write into it.  Setting or clearing of this property,
    or "branding" the library, can be controlled subsequently with the
    <a href="!oabrand"><b>!oabrand</b></a> command.

!!SEEALSO
keybang
oaplugin
!!ENDIF

!!IFDEF OpenAccess
!! 022316
!!KEYWORD
!oabrand
!!TITLE
!oabrand
!!HTML
    <b>Syntax: <tt>!oabrand</tt> [<i>libname</i> [<tt>y</tt>|<tt>n</tt>]]</b>

    <p>
    This command exists only when the OpenAccess <a
    href="oaplugin">plug-in</a> is loaded.

    <p>
    By default, OpenAccess libraries that were not created by <i>Xic</i>
    are read-only within <i>Xic</i>.  This is due to the fact that
    overwriting Virtuoso views will destroy them for use with
    Virtuoso, and the same probably applies to files for other tools
    as well.

    <p>
    If the second argument is not given, the branded status of the
    named library is reported on the prompt line.  Otherwise, this
    function will apply or remove the brand to a library.  The second
    argument, if affirmative, will cause the brand to be applied. 
    Otherwise, an existing brand will be removed.  This argument can
    be any commonly known name for affirmation such as "<tt>y</tt>",
    "<tt>yes</tt>", "<tt>true</tt>", "<tt>1</tt>", etc.  If not
    recognized as affirmative, it is taken as non-affirmative.

    <p>
    If no library is given, the variable <a
    href="OaDefLibrary"><b>OaDefLibrary</b></a> is checked for a
    library name, which is used if set.

    <p>
    Libraries that are created by <i>Xic</i> are already branded.  If
    needed, this command can be used to remove write permission for
    <i>Xic</i> by un-branding.  This can also be used to brand a
    library created by another tool, allowing <i>Xic</i> to write into
    that library.  The user must understand the risks involved.

!!SEEALSO
keybang
oaplugin
!!ENDIF

!!IFDEF OpenAccess
!! 032017
!!KEYWORD
!oatech
!!TITLE
!oatech
!!HTML
    <b>Syntax: <tt>!oatech</tt> <i>cmd</i> <i>libname</i> [<i>args</i>]</b>

    <p>
    This command exists only when the OpenAccess <a
    href="oaplugin">plug-in</a> is loaded.

    <p>
    This function has a number of forms, corresponding to various
    actions to perform on the technology database.  These forms, and
    the corresponding actions, are described below.  In each case, the
    first character of the first token indicates the command type.  If
    this is preceded by a hyphen, the hyphen will be ignored.  Thus,
    for example, first arguments "<tt>-p</tt>", "<tt>p</tt>", and
    "<tt>print</tt>" are all equivalent.

    <dl>
    <dt>[-]<tt>a</tt>[<tt>ttach</tt>] <i>libname</i> <i>fromlib</i><dd>
    Attach the technology database from <i>fromlib</i> to
    <i>libname</i>.  This will fail if <i>libname</i> has a local
    technology database, such must be destroyed first.  If
    <i>fromlib</i> has an attachment, then <i>libname</i> will receive
    the same attachment, otherwise <i>libname</i> will attach to the
    local technology database in <i>fromlib</i>.
    </dl>

    <dl>
    <dt>[-]<tt>d</tt>[<tt>estroy</tt>] <i>libname</i><dd>
    If <i>libname</i> has an attached technology database, the
    attachment will be removed.  Otherwise, the local technology
    database will be destroyed.
    </dl>

    <dl>
    <dt>[-]<tt>h</tt>[<tt>as_attached</tt>] <i>libname</i><dd>
    This produces a message on the prompt line indicating whether or
    not <i>libname</i> has an attached technology database, and if so,
    provides the name of the library supplying the technology
    database.
    </dl>

    <dl>
    <dt>[-]<tt>p</tt>[<tt>rint</tt>] <i>libname</i> [<tt>-o</tt>
     <i>filename</i>] [<i>which</i> [<i>prname</i>]]<dd>
    If <i>which</i> and <i>prname</i> are not given, a file in the format
    of a Virtuoso ASCII technology file will be produced, containing all
    technology information known to <i>Xic</i> from the technology
    database associated with <i>libname</i>.

    <p>
    If <i>which</i> is given (including "<tt>all</tt>"), the file
    format is not specific and is a complete data dump of relevant
    data.  This is intended for debugging and information searching.

    <p>
    Output goes to the console window by default, but the <tt>-o</tt>
    option, if given, signals that the following argument is a file
    name for output.

    <p>
    The <i>which</i> is a code indicating what type of information to
    print, and <i>prname</i> is a sub-type which applies to
    particular values of <i>which</i>.  The prefixes understood for
    <i>which</i> are listed below, characters that follow the prefix
    are ignored.  Recognition is case-insensitive.

    <p>
    <table border=0>
    <tr><th>prefix</th> <th>prname</th> <th>will print</th></tr>
    <tr><td>"<tt>all</tt>"</td> <td>&nbsp;</td> <td>everything</td></tr>
    <tr><td>"<tt>u</tt>"</td> <td>&nbsp;</td> <td>units</td></tr>
    <tr><td>"<tt>an</tt>"</td> <td>*</td> <td>analysis libraries</td></tr>
    <tr><td>"<tt>l</tt>"</td> <td>*</td> <td>layers</td></tr>
    <tr><td>"<tt>o</tt>"</td> <td>*</td> <td>operating points</td></tr>
    <tr><td>"<tt>p</tt>"</td> <td>*</td> <td>purposes</td></tr>
    <tr><td>"<tt>si</tt>"</td> <td>*</td> <td>site definitions</td></tr>
    <tr><td>"<tt>va</tt>"</td> <td>&nbsp;</td> <td>values</td></tr>
    <tr><td>"<tt>viad</tt>"</td> <td>*</td> <td>via definitions</td></tr>
    <tr><td>"<tt>vias</tt>"</td> <td>&nbsp;</td> <td>via specifications</td></tr>
    <tr><td>"<tt>viav</tt>"</td> <td>&nbsp;</td> <td>via variables</td></tr>
    <tr><td>"<tt>co</tt>"</td> <td>*</td> <td>constraint groups</td></tr>
    <tr><td>"<tt>cg</tt>"</td> <td>*</td> <td>constraint groups (as above)</td></tr>
    <tr><td>"<tt>cp</tt>"</td> <td>&nbsp;</td> <td>constraint parameters</td></tr>
    <tr><td>"<tt>d</tt>"</td> <td>&nbsp;</td> <td>derived layer parameters</td></tr>
    <tr><td>"<tt>ap</tt>"</td> <td>&nbsp;</td> <td>application object definitions</td></tr>
    <tr><td>"<tt>g</tt>"</td> <td>*</td> <td>groups</td></tr>
    </table>

    For the types marked with an asterisk above, the <i>prname</i>
    is recognized as the name associated with the records of that type,
    and only the record with matching name, if any, will be printed.
    If <i>prname</i> is not given, all records of the selected type
    are printed.
    </dl>

    <dl>
    <dt>[-]<tt>u</tt>[<tt>nattach</tt>] <i>libname</i><dd>
    If <i>libname</i> has an attached technology database, remove the
    reference.
    </dl>

!!SEEALSO
keybang
oaplugin
!!ENDIF

!!IFDEF OpenAccess
!! 030416
!!KEYWORD
!oasave
!!TITLE
!oasave
!!HTML
    <b>Syntax: <tt>!oasave</tt> [<tt>-a</tt>] [<i>libname</i>]</b>

    <p>
    This command exists only when the OpenAccess <a
    href="oaplugin">plug-in</a> is loaded.

    <p>
    Save the current cell to <i>libname</i>.  If no library name is
    given, the variable <a href="OaDefLibrary"><b>OaDefLibrary</b></a>
    is checked for a library name, which is used if set.  If the
    <tt>-a</tt> option is given, the cell hierarchy under the current
    cell is written, otherwise only the current cell is written.  The
    value of the <a href="OaUseOnly"><b>OaUseOnly</b></a> variable
    will limit the data written to electrical or physical.  This
    tracks the setting ot the <b>Data to user from OA</b> radio button
    group in the <a href="xic:oalibs"><b>OpenAccess Libraries</b></a>
    panel.

!!SEEALSO
keybang
oaplugin
!!ENDIF

!!IFDEF OpenAccess
!! 020416
!!KEYWORD
!oaload
!!TITLE
!oaload
!!HTML
    <b>Syntax: <tt>!oaload</tt> [<i>libname</i> [<i>cellname</i>]]</b>

    <p>
    This command exists only when the OpenAccess <a
    href="oaplugin">plug-in</a> is loaded.

    <p>
    This will load the given cell and its hierarchy into <i>Xic</i>. 
    If the <i>cellname</i> is not given, all cells found in the
    library will be loaded into <i>Xic</i>.  If no library is given,
    the variable <a href="OaDefLibrary"><b>OaDefLibrary</b></a> is
    checked for a library name, which is used if set.
    The value of the <a href="OaUseOnly"><b>OaUseOnly</b></a> variable
    will limit the data read to electrical or physical.  This
    tracks the setting ot the <b>Data to user from OA</b> radio button
    group in the <a href="xic:oalibs"><b>OpenAccess Libraries</b></a>
    panel.

!!SEEALSO
keybang
oaplugin
!!ENDIF

!!IFDEF OpenAccess
!! 012713
!!KEYWORD
!oadelete
!!TITLE
!oadelete
!!HTML
    <b>Syntax: <tt>!oadelete</tt> <i>libname</i> <i>cellname</i>
    [<i>viewname</i>]</b>

    <p>
    This command exists only when the OpenAccess <a
    href="oaplugin">plug-in</a> is loaded.

    <p>
    The <i>viewname</i>, if given, can be an actual OpenAccess view
    name, or "<tt>electrical</tt>", or "<tt>physical</tt>".  The
    latter two map into corresponding OpenAccess view names.

    <p>
    The indicated cell and view in the library will be destroyed.
    If the <i>viewname</i> is not given, all views for the cell will
    be destroyed.

    <p>
    Be careful, this operation can not be undone.

!!SEEALSO
keybang
oaplugin
!!ENDIF


!! ----------------------------------------------------------------------------
!! Parameterized Cells
!! ----------------------------------------------------------------------------

!! 032017
!!KEYWORD
!rmpcprops
!!TITLE
!rmpcprops
!!HTML
    <b>Syntax: <tt>!rmpcprops</tt> [<tt>-a</tt>]</b>

    <p>
    <b><font color=red>Warning: this operation is not undoable.</font></b>

    <p>
    This command applies to all cells in the hierarchy of the current physical
    cell.  There are two passes made through the hierarchy.  On the
    first pass, cells that are <a href="pcell">parameterized cell</a>
    (pcell) sub-masters may have their <a
    href="prpty:pc_name"><b>pc_name</b></a> and <a
    href="prpty:pc_params"><b>pc_params</b></a> properties removed. 
    This will be true for "foreign" pcells created in and imported
    from another tool or library such as OpenAccess, and if
    <tt>-a</tt> is given, this will also apply to native pcells. 
    Once these properties are removed from a pcell sub-master.  the
    cell becomes in all respects an ordinary cell.

    <p>
    On the second pass, the masters of cell instances that have pcell
    properties are checked, and if the master does not have pcell
    properties (they were likely removed in the first pass), the
    instance pcell properties are removed.

    <p>
    Running this command will remove any ambiguity about whether
    sub-master cells will be saved to an archive (they will always be
    saved, since they are now normal cells), and there will never be
    an attempt to resolve placements of the cells by executing a
    super-master (instances are no longer seen as pcell placements). 
    All history that the cell was once created from a pcell
    super-master is gone.

    <p>
    This command is <b>not undoable</b>.  Once the properties are
    stripped, there is no way to put them back, except perhaps very
    laboriously by hand.  Don't use this command unless you want all
    pcell history in the current cell hierarchy to go away forever.

!!IFDEF OpenAccess
    <p>
    When <a href="cdsconnect">importing</a> design data from <a
    href="cdscompat">Cadence</a> Virtuoso, for example, using the
    Express PCell feature to obtain pcell sub-masters, you may wish to
    use this command on the new hierarchy.  In <i>Xic</i>, the pcells
    can not be evaluated anyway, and their presence may cause trouble. 
    For example, if the hierarchy is saved to disk as a GDSII or other
    archive file, by default the sub-masters are <b>not</b> written. 
    When reading this file at some future time, unless the Virtuoso
    database is present and able to provide the sub-masters, the pcell
    instances won't be resolved.  Thus you must remember to explicitly
    enable saving the sub-masters when <a href="xic:exprt">writing
    output</a>, unless you have used the <b>!rmpcprops</b> command.
!!ENDIF

!!SEEALSO
keybang

!! 081318
!!KEYWORD
!preload
!!TITLE
!preload
!!HTML
    <b>Syntax: <tt>!preload</tt> <i>archive</i></b>

    <p>
    Suppose that one has a collection of pcell sub-master <i>Xic</i>
    cells that have been imported from a foreign OpenAccess tool such
    as Virtuoso.  These are assumed to not be portable pcells.  One
    would like to use these cells to resolve pcells when reading
    directly from the OpenAccess database.  There are two issues:  1)
    the system needs to know that these cells are available, and 2)
    one has to remap the cell names.  The first issue is fixed simply
    by making the sub-masters available through the library mechanism. 
    The second issue is due to the simple naming convention of the
    sub-master instantiations, which suffixes the pcell name with
    "<tt>$$</tt>" followed by an integer.  The integer is a count of
    when the cell was generated, and is consistent with the design
    output at the time, but there is no guarantee the the names are
    consistent with the design at other times.

    <p>
    This command will read a collection of cells into a temporary
    symbol table.  Those that are pcell sub-masters have the property
    strings entered into the internal pcell database, under the
    existing cell name.  This will cause the correct cell name to be
    associated with a given parameter set.  The cells are not saved,
    but the entries in the pcell table persist so that resolution,
    when reading OpenAccess or otherwise, will reference the correct
    cells.  The cell collection must be available through an open
    library, and this function must be run before loading the design.

    <p>
    The argument is either a path to a directory containing native
    pcell sub-master cells, or a path to an archive file that contains
    the cells.  This capability is also available with the <a
    href="RegisterSubMasters"><tt>RegisterSubMasters</tt></a> script
    function.

!!SEEALSO
keybang

!! ----------------------------------------------------------------------------
!! Rulers
!! ----------------------------------------------------------------------------

!! 012815
!!KEYWORD
!dr
!!TITLE
!dr
!!HTML
    <b>Syntax: <tt>!dr</tt> [<i>arg</i>]</b>

    <p>
    This will delete currently displayed rulers, as generated by the
    <a href="xic:ruler"><b>Rulers</b></a> command in the <a
    href="xic:viewmenu"><b>View Menu</b></a>.  If no <i>arg</i> is
    given, the most recently generated ruler is deleted.  The
    <i>arg</i> can be an integer, or '<tt>a</tt>'.  if '<tt>a</tt>' is
    given, all rulers for the current cell are deleted.  If a number
    is given, that ruler, counting backward from the most recently
    generated, will be deleted, i.e., 0 erases the most recent ruler,
    1 erases the one before that, etc.

!!SEEALSO
keybang


!! ----------------------------------------------------------------------------
!! Scripts
!! ----------------------------------------------------------------------------

!! 060108
!!KEYWORD
!script
!!TITLE
!script
!!HTML
    <b>Syntax: <tt>!script</tt> <i>name</i> [<i>path</i>]</b>

    <p>
    This command will add <i>name</i> to the list of user-defined
    function buttons in the <b>User Menu</b>.  When the button is
    pressed, the file indicated by <i>path</i> will be executed as <a
    href="xicscript">script text</a>.  The <i>name</i> variable should
    be the actual name to appear in the menu.  The <i>path</i> should
    be a full path to a file, which can be any file name as long as it
    contains a script, i.e., the <tt>.scr</tt> extension is optional. 
    A script added that has the same name as a script in the
    technology file or the script path will supersede the previous
    script definition.

    <p>
    If no <i>path</i> is given, any command previously added with the
    <b>!script</b> command with the same name is deleted from the
    <b>User Menu</b>.  This does not affect scripts defined in the
    technology file or in the script path, except that these are
    reverted to if their names matched an input to the
    <b>!script</b> command.

!!SEEALSO
keybang

!! 060108
!!KEYWORD
!rehash
!!TITLE
!rehash
!!HTML
    <b>Syntax: <tt>!rehash</tt></b>

    <p>
    This command re-reads the script files and libraries along the
    script <a href="xicpaths">search path</a>, and rebuilds the <a
    href="xic:usermenu"><b>User Menu</b></a>, the same as the <a
    href="xic:hash"><b>Rehash</b></a> button in the <b>User Menu</b>.

!!SEEALSO
keybang

!! 060108
!!KEYWORD
!exec
!!TITLE
!exec
!!HTML
    <b>Syntax: <tt>!exec</tt> <i>script</i></b>

    <p>
    This command will execute a script.  The argument is a string
    giving the script name or path.  If the script is a file, it must
    have a "<tt>.scr</tt>" extension.  The "<tt>.scr</tt>" extension
    is optional in the argument.  If no path is given, the script will
    be opened from the <a href="xicpaths">search path</a> or from the
    internal list of scripts read from the <a
    href="techfile:scripts">technology file</a> or added with the <a
    href="!script"><b>!script</b></a> command.  If a path is given,
    that file will be executed, if found.  It is also possible to
    reference a script which appears in a sub-menu of the <a
    href="xic:usermenu"><b>User Menu</b></a> by giving a modified path of
    the form
    "<tt>@@/</tt><i>libname</i><tt>/.../</tt><i>scriptname</i>".  The
    <i>libname</i> is the name of the script menu, the ...  indicates
    more script menus if the menu is more than one deep, and the last
    component is the name of the script.

!!SEEALSO
keybang
scr:appfuncs#Exec

!! 062213
!!KEYWORD
!lisp
!!TITLE
!lisp
!!HTML
    <center><font color="red" size=+1>PRELIMINARY</font></center>
    <p>
    <b>Syntax: <tt>!lisp</tt> <i>filename</i> [<i>args</i> ...]</b>

    <p>
    This is an interface to the Lisp/Skill parser that is under
    development.  The <i>filename</i> is searched for in the <a
    href="xicpaths">script path</a> and the current directory, and is
    expected to contain a script in Lisp format.  The file will be
    parsed and the code executed.

    <p>
    Any text following the filename will be parsed as Lisp and
    included in the argument list.  The argument list can be accessed
    from within the script through the global variables <tt>argc</tt>
    and <tt>argv</tt>.
    <dl>
    <dt><tt>argc</tt><dd>
    An integer giving the length of <tt>argv</tt>.
    <dt><tt>argv</tt><dd>
    A list.  The first element is the file name, followed by the
    arguments if any.
    </dl>

    The implementation of Lisp in <i>Xic</i> is described <a
    href="lisp">here</a>.

!!SEEALSO
keybang

!! 021713
!!KEYWORD
!py
!!TITLE
!py
!!HTML
    <b>Syntax: <tt>!py</tt> <i>scriptfile</i> <i>args</i> ...</b>

    <p>
    <font color=red><b>This command is not available under Microsoft
    Windows.</b></font>

    <p>
    This command is available only if the Python interpreter
    <a href="pyplugin">plug-in</a> has been loaded.  The arguments
    will be passed to the Python interpreter for evaluation.

!!SEEALSO
keybang
plugins

!! 021813
!!KEYWORD
!tcl
!!TITLE
!tcl
!!HTML
    <b>Syntax: <tt>!tcl</tt> <i>scriptfile</i> <i>args</i> ...</b>

    <p>
    <font color=red><b>This command is not available under Microsoft
    Windows.</b></font>

    <p>
    This command is available only if the Tcl/Tk or Tcl-only <a
    href="tclplugin">plug-in</a> has been loaded.

    <p>
    The command will execute a Tcl script, contained in the file
    given as an argument.  Tk functions are not supported.  Command
    arguments can be referenced in the script using the standard
    <tt>argc</tt>, <tt>argv</tt> mechanism.  The language syntax is
    provided in <a href="http://tcl.tk">documentation</a> supplied
    with Tcl, and is described in several books.  Much information can
    be found on the internet.

    <p>
    The <i>scriptfile</i> is expected to contain Tcl commands,
    and is linearly parsed and executed.

!! 021813
!!KEYWORD
!tk
!!TITLE
!tk
!!HTML
    <b>Syntax: <tt>!tk</tt> <i>scriptfile</i> <i>args</i> ...</b>

    <p>
    <font color=red><b>This command is not available under Microsoft
    Windows.</b></font>

    <p>
    This command is available only if the Tcl/Tk <a
    href="tclplugin">plug-in</a> has been loaded.

    <p>
    The command will execute a Tcl/Tk script, contained in the
    file given as an argument.  Command arguments can be referenced in
    the script using the standard <tt>argc</tt>, <tt>argv</tt>
    mechanism.  The language syntax is provided in documentation
    supplied with Tcl/Tk, and is described in several books.  Much
    information can be found on the internet.

    <p>
    The <i>scriptfile</i> must have a <tt>.tcl</tt> or <tt>.tk</tt>
    extension, appropriate for the file contents.  The Tk language is
    a superset of Tcl, containing a graphical interface.  The files
    are executed differently:  Tk files are executed in an event loop
    and a default window will be created, and execution will continue
    until all created windows are destroyed.  Tcl files are
    interpreted linearly, with no graphics.

    <p>
    An example Tk script named "<tt>tkdemo.tk</tt>" is provided with
    the examples and can be used to set up and test the Tk execution
    facility.

!!SEEALSO
keybang

!! 060108
!!KEYWORD
!listfuncs
!!TITLE
!listfuncs
!!HTML
    <b>Syntax: <tt>!listfuncs</tt></b>

    <p>
    This command pops up a list of the script <a
    href="scr:functions">functions</a> that are currently saved in
    memory.  All functions that <i>Xic</i> sees are saved.

!!SEEALSO
keybang
!rmfunc
scr:library

!! 060108
!!KEYWORD
!rmfunc
!!TITLE
!rmfunc
!!HTML
    <b>Syntax: <tt>!rmfunc</tt> <i>func_name_reg_exp</i></b>

    <p>
    This command allows <a href="scr:functions">functions</a> to be
    removed from memory.  The argument is a regular expression that
    should match one or more function names.  Saved functions can be
    listed with <a href="!listfuncs"><b>!listfuncs</b></a>.

!!SEEALSO
keybang
!listfuncs
scr:library

!! 030215
!!KEYWORD
!mkscript
!!TITLE
!mkscript
!!HTML
    <b>Syntax: <tt>!mkscript</tt> [<tt>-d</tt> <i>depth</i>]
      [<i>filename</i>]</b>

    <p>
    This command writes a <a href="xicscript">script</a> file that
    will create the contents of the current cell, and its hierarchy to
    arbitrary depth.  When executed, the script will create the cells,
    and place objects and subcells as needed to recreate the original
    cells.

    <p>
    This could be useful as a starting point for creating
    parameterized cells.  It might also be useful to new users for
    learning the scripting language.

    <p>
    The function presently works in one mode only, i.e., you can
    generate a script that will build electrical or physical cells or
    hierarchies, but not both modes together.  One could generate a
    script for each mode and combine them by hand, however.

    <p>
    The <i>depth</i> argument is an integer depth, with 0 being the
    default, which indicates to write the current cell only.  The
    value -1 or a word starting with 'a' indicate all levels.

    <p>
    If a <i>filename</i> is given, output goes to that file. 
    Otherwise, the script is written to "<tt>mkscript.scr</tt>" in the
    current directory.

    <p>
    Although things seem pretty solid for physical mode, electrical
    mode is far more complex and should be considered experimental at
    this point.  There are probably things that don't work, for
    example mutual inductors probably won't be created.  The situation
    should improve in time, though it is not clear if this feature is
    of much use in electrical mode.

    <p>
    Incorporation of this feature led to some significant updates in
    script functions and elsewhere for efficient support.

!!SEEALSO
keybang

!! 072517
!!KEYWORD
!ldshared
!!TITLE
!ldshared
!!HTML
    <b>Syntax: <tt>!ldshared</tt> <i>library</i> [<i>args...</i>]</b>

    <p>
    This will load a script library plug-in as created with the
    <tt>scrkit</tt> provided with <i>Xic</i> distributions.  The
    <tt>scrkit</tt> directory contains files and instruction for
    creating libraries of C/C++ functions which can be called from
    scripts.

    <p>
    The required argument is a path to the shared library file as
    generated from the <tt>scrkit</tt> system.  Anything else in the
    line is passed to the library <tt>init</tt> function verbatim. 
    The library author can add a parser for this, for providing
    initialization options if needed.

    <p>
    Loaded libraries can not be unloaded, but can be reloaded, perhaps
    after modification and recompile.  If a library is reloaded, a <a
    href="!rehash"><b>!rehash</b></a> is done, to eliminate bad
    function pointers to the library functions, which would likely
    crash the program if referenced.

!!SEEALSO
keybang


!! ----------------------------------------------------------------------------
!! Selections
!! ----------------------------------------------------------------------------

!! 092717
!!KEYWORD
!select
!!TITLE
!select
!!HTML
    <b>Syntax: <tt>!select</tt> <i>what qualifier_or_regex</i>
        [<i>keyword expression</i>]</b>

    <p>
    This command allows objects to be selected according to the
    specification provided.  There is also a companion <a
    href="!desel"><b>!desel</b></a> command which deselects selected
    objects.

    <p>
    The values (literal) for <i>what</i> are:
    <blockquote><tt>
      c[ell]<br>
      l[ayer]<br>
      n[ame]<br>
      m[odel]<br>
      v[alue]<br>
      p[aram] or i[nitc]<br>
      o[ther]<br>
      y[...] (indicates <b>nophys</b>)
    </tt></blockquote>
    Only the first character of the token is significant.  If
    `<tt>c</tt>' is given, the intended targets for selection are
    subcells.  If `<tt>l</tt>' is given, the targets are objects on a
    specified layer.  The remaining options specify electrical
    properties, which allows selection of devices with these
    properties.  The <tt>param</tt> property was known in earlier
    releases as the <tt>initc</tt> (initial condition) property, both
    names are accepted.

    <p>
    The <i>qualifier_or_regex</i> is a pattern matching regular
    expression.  This is expected to match the layer or cell name or
    property value as per <i>what</i>.  All objects with a successful
    pattern match are selected.  The layer qualifier consists of the
    layer regular expression, followed by the optional tokens

    <blockquote><tt>
      b[oxes]<br>
      w[ires]<br>
      p[olygons]<br>
      l[abels]
    </tt></blockquote>
    These specify types of objects that will be selected.  For
    selecting objects on physical layers, an additional <i>keyword
    expression</i> pair can be included in the command.  The complete
    syntax in this case is
    <blockquote>
    <tt>!select l[ayer]</tt> <i>layer_re</i> <tt>[b[ox]] [w[ire]] [p[olygon]]
        [l[abel]] [</tt><i>keyword expression</i><tt>]</tt>
    </blockquote>

    <p>
    For layers, the hyphen ('<tt>-</tt>') is an alias for the current
    layer, but only as an isolated token and not as part of a layer
    expression.

    The <i>keyword</i> is one of the DRC keywords <tt>Overlap,
    IfOverlap, NoOverlap, AnyOverlap, PartOverlap,</tt> and
    <tt>AnyNoOverlap</tt>, and the <i>expression</i> is a layer
    expression.  If the <i>keyword</i> and <i>expression</i> are
    given, the <i>expression</i> must be true if an object is to be
    selected or deselected (with the !desel command).  The logic is
    shown in the table below.

    <p>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><td><tt>Overlap</tt></td><td>
      True if the object is completely covered by the
      <i>expression</i>.</td></tr>
    <tr><td><tt>IfOverlap</tt></td><td>
      True if the object is completely covered or completely uncovered
      by the <i>expression</i>.</td></tr>
    <tr><td><tt>NoOverlap</tt></td><td>
      True if the object is completely uncovered by the
      <i>expression</i>.</td></tr>
    <tr><td><tt>AnyOverlap</tt></td><td>
      True if there is nonzero overlap area between the object and the
      <i>expression</i>.</td></tr>
    <tr><td><tt>PartOverlap</tt></td><td>
      True if the object is partially covered by the <i>expression</i>, i.e.,
      not completely covered or uncovered.</td></tr>
    <tr><td><tt>AnyNoOverlap</tt></td><td>
      True if the object is not completely covered by the
      <i>expression</i>.</td></tr>
    </table>

    <p>
    Examples:

    <blockquote>
    <tt>!select l CAA b Overlap CPG</tt>
    </blockquote>

    This will select boxes on CAA that are entirely covered by CPG.

    <blockquote>
    <tt>!select l V1|V2 AnyNoOverlap M1 & M2</tt>
    </blockquote>

    This will select all geometric objects on V1 and V2 that are not
    completely covered by both M1 and M2.

    <p>
    The <b>!select</b>/<b>!desel</b> commands with electrical property
    specifiers also work in physical mode.  The selected cell will be
    the physical dual of the electrical cell containing the property. 
    The duality must have been established with the commands in the <a
    href="xic:extmenu"><b>Extract Menu</b></a>.

    <p>
    Examples:<br>
    Select all instances of the cell named "andgate"
    <blockquote><tt>
      !select c andgate
    </tt></blockquote>
    Select all instances of cells with name starting with "and".  The
    `.' is a wildcard.
    <blockquote><tt>
      !select c and.</tt>
    </blockquote>
    Select resistors R1-R9
    <blockquote><tt>
      !select n R[1-9]
    </tt></blockquote>
    Select all polygons and wires on layer M2
    <blockquote><tt>
      !select l M2 w p
    </tt></blockquote>
    Select everything on M2
    <blockquote><tt>
      !select l M2
    </tt></blockquote>

    <p>
    A blank field is taken as "all".  Giving "<tt>!select</tt>"
    without arguments selects everything in the cell.  Giving
    "<tt>!select c</tt>" selects all subcells, etc.  For the layer
    modifier, the literal "<tt>all</tt>" can be used to specify all
    layers (hopefully there is no layer named "all").  For example,
    "<tt>!select l all b</tt>" selects boxes on all layers.  This is
    redundant, since "." performs the same global match as "all".

    <p>
    There are a couple of special cases:  "<tt>!select all</tt>" will
    select all geometry (not subcells) the same as "<tt>!select
    l</tt>", and "<tt>!select .</tt>" will select everything, the same
    as with no argument.

    <p>
    The regular expression matching may take some getting used-to. 
    A match will be indicated if the name contains a substring of
    the given string, case insensitive.  For example, "<tt>!select n
    Lc</tt>" would match <tt>Lc, Vlc, IallCnt</tt>, etc.  The
    circumflex ('^') can be used to force matching at the start of a
    string, and the dollar sign ('$') forces matching at the end of
    a string.  Thus, to match a literal, one should use the form
    "^<i>string</i>$".

!!SEEALSO
keybang

!! 060108
!!KEYWORD
!desel
!!TITLE
!desel
!!HTML
    <b>Syntax: <tt>!desel</tt> <i>what qualifier_or_regex</i>
        [<i>keyword expression</i>]</b>

    <p>
    This is the companion to the <a href="!select"><b>!select</b></a>
    command.  The arguments are the same, however objects indicated by
    the arguments are deselected if selected, otherwise there is no
    effect.

!!SEEALSO
keybang

!! 060108
!!KEYWORD
!zs
!!TITLE
!zs
!!HTML
    <b>Syntax: <tt>!zs</tt></b>

    <p>
    Giving this command will change the view in the current window
    (the last drawing window to contain the mouse pointer) to show all
    selected objects.  The window will zoom in or out to show all
    selections, plus a small margin.

!!SEEALSO
keybang


!! ----------------------------------------------------------------------------
!! Shell
!! ----------------------------------------------------------------------------

!! 022111
!!KEYWORD
!shell
!!TITLE
!shell
!!HTML
    <b>Syntax: <tt>!shell</tt> [<i>command...</i>]</b>

    <p>
    Giving the command "<tt>!shell</tt>" without arguments is
    equivalent to giving a bare exclamation point with no following
    text.  If a <i>command</i> is given, that command will be run in
    the pop-up window.  This is equivalent to <tt>!</tt><i>command</i>,
    provided that this is not also a built-in command.  The use of
    <tt>!shell</tt> removes the ambiguity.

    <p>
    The shell which is used to execute operating system commands can
    be selected by the user, through the <a
    href="!set:bangcmds#Shell"><b>Shell</b></a> variable and the <a
    href="!set"><b>!set</b></a> command.  If this is not set, the <a
    href="xic:env"><tt>SHELL</tt></a> environment variable is used if
    set, otherwise the default "<tt>/bin/sh</tt>" shell is used,
    except under Windows where the standard "DOS box" is the default.

    <p>
    Under Windows, it is possible to open a Cygwin <tt>bash</tt> shell
    window instead of the brain-dead "DOS box", if Cygwin is
    installed.  If the <b>Shell</b> variable or <tt>SHELL</tt>
    environment variable (in that precedence) contains the Windows
    path to the <tt>bash.exe</tt> file, a bash window will be used. 
    If neither is given, and <tt>bash.exe</tt> resides in
    <tt>/bin</tt> or <tt>/cygwin/bin</tt> on the current disk drive,
    or the <a href="CYGWIN_BIN"><tt>CYGWIN_BIN</tt></a> environment
    variable is set to the Windows path to the directory containing
    <tt>bash.exe</tt>, a bash shell will be used.  Only if
    <tt>bash.exe</tt> is not found, or one of the variables
    specifically invokes "<tt>cmd</tt>", will a DOS box be used.

!!SEEALSO
keybang

!! 022111
!!KEYWORD
!ssh
!!TITLE
!ssh
!!HTML
    <b>Syntax: <tt>!ssh</tt> [<i>hostname</i>]</b>

    <p>
    This command will pop up a terminal window that will contain an
    <tt>ssh</tt> login process to a remote host.  If the
    <i>hostname</i> is not given with the command, it will be prompted
    for.

    <p>
    The <i>hostname</i> can actually contain additional <tt>ssh</tt>
    options if needed, and the name of the host can be in the form
    <i>user</i><tt>@</tt><i>host</i>, which allows logging in as
    <i>user</i>.

    <p>
    The <tt>ssh</tt> process will establish X forwarding to the remote
    system, and will automatically set the <a
    href="SpiceHostDisplay"><b>SpiceHostDisplay</b></a> variable if
    authentication is achieved before a time out.  This facilitates
    using <i>WRspice</i> on the remote system to perform simulations
    in electrical mode, from the <a href="xic:run"><b>run</b></a>
    button in the side menu.  The remote system must have a
    <tt>wrspiced</tt> daemon running, and the <a
    href="SpiceHost"><b>SpiceHost</b></a> variable should be set to
    the remote host name.  The X forwarding provided by the
    <b>!ssh</b> shell takes care of display string setting and
    permissions.  The <b>!ssh</b> shell must remain active while
    <i>WRspice</i> is in use, as exiting the shell will break the
    connection to <i>WRspice</i> graphics.

    <p>
    See the description of the <a
    href="SpiceHostDisplay"><b>SpiceHostDisplay</b></a> variable for
    more information.

    <p>
    This command will work under Windows, if Cygwin is installed,
    along with the Cygwin OpenSSH package.  The <tt>ssh</tt> program
    will be found if it resides in <tt>/bin</tt> or
    <tt>/cygwin/bin</tt> on the current disk, or if the <a
    href="CYGWIN_BIN"><tt>CYGWIN_BIN</tt></a> environment variable is
    set to the path to the directory that contains the
    <tt>ssh.exe</tt> binary.  This is the Windows path, not the path
    within Cygwin.  <i>Xic</i> is not a Cygwin program, and knows
    nothing about Cygwin mount points or symbolic links.

!!SEEALSO
keybang


!! ----------------------------------------------------------------------------
!! Technology File
!! ----------------------------------------------------------------------------

!! 021615
!!KEYWORD
!attrvars
!!TITLE
!attrvars
!!HTML
    <b>Syntax: <tt>!attrvars</tt> [<i>filename</i>]</b>

    <p>
    Most of the internally recognized <a
    href="variables">variables</a> can be set from the <a
    href="techfile:attr:vars">technology file</a>, using the same
    syntax as for technology file keywords.  The variables are
    categorized as boolean or string types, which are set using
    different syntax forms.

    <p>
    Most, but not all, variables can be set in this way.  There are a
    few that are strange in one way or another and are excluded.

    <p>
    This command will list, in <i>filename</i>, the boolean and string
    variable names that can be set in this manner.  This is intended for
    reference purposes, and the list is rather long.

    <p>
    If <i>filename</i> is not specified, "<tt>attrvars.txt</tt>" is
    used.

!!SEEALSO
techfile:attr

!! 092717
!!KEYWORD
!dumpcds
!!TITLE
!dumpcds
!!HTML
    <b>Syntax: <tt>!dumpcds</tt> [<i>basename</i>]</b>

    <p>
    This command dumps Cadence <i>Virtuoso</i>-compatible ASCII
    technology, display resource (DRF), and GDSII layer mapping files
    based on the present <i>Xic</i> technology database.  The files
    produced will be <i>basename</i><tt>.txt</tt>,
    <i>basename</i><tt>.drf</tt>, and <i>basename</i><tt>.gdsmap</tt>,
    respectively.  If no <i>basename</i> is given, it defaults to
    "<tt>xic_tech_cds</tt>".

!!SEEALSO
cdscompat
keybang


!! ----------------------------------------------------------------------------
!! Update Release
!! ----------------------------------------------------------------------------

!! 102817
!!KEYWORD
!update
!!TITLE
!update
!!HTML
    <b>Syntax: <tt>!update</tt></b>

    <p>
    This command is equivalent to giving the special keyword
    "<tt>:xt_pkgs</tt>" to the help system, which brings up the
    <i>XicTools</i> <a href="update">package management</a> page.  The
    page lists installed and available packages for each of the
    <i>XicTools</i> programs for the current operating system, and
    provides buttons to download and install the packages.

    <p>
    Unlike in earlier <i>Xic</i> releases, there is no provision for
    automatic checking for updates, so this command or equivalent
    should be run periodically to check for updated packages.

!!SEEALSO
keybang


!! ----------------------------------------------------------------------------
!! Variables
!! ----------------------------------------------------------------------------

!! 102114
!!KEYWORD
!set
!!TITLE
!set
!!HTML
    <b>Syntax: <tt>!set</tt> <i>name</i> [<i>value</i>]</b>

    <p>
    The <b>!set</b> command is used to set variable <i>name</i> to
    <i>value</i>.  The <i>name</i> is the first token following
    <tt>!set</tt>, and <i>value</i> represents the rest of the line
    (which may be empty).  White space is stripped from the front of
    the first word in <i>value</i> and after the last word in
    <i>value</i>.  If <i>value</i> is blank, the variable is
    understood as a boolean, and is "set".

    <p>
    Any variable name can be set in this manner, though there are a
    number of <a href="!set:variables">variables</a> with predefined
    names which have significance to <i>Xic</i> operation. 
    Furthermore, device properties can be set with a variant of this
    command.  A variable which has been set can be removed with the <a
    href="!unset"><b>!unset</b></a> command.

    <p>
    In the <b>!set</b> command, tokens in the <i>value</i> string of
    the form $(<i>setvar</i>) are expanded to the string associated
    with <i>setvar</i>, if <i>setvar</i> has been set previously.
    This applies if <i>setvar</i> was set with the <b>!set</b> command
    or related script functions, or if <i>setvar</i> is set in the
    environment, i.e., is an <a href="xic:env">environment</a> variable.
    If <i>setvar</i> is not resolved, no change is made.  Otherwise,
    in general, the token is replaced with the value of <i>setvar</i>.

    <p>
    There is an exception to the direct-substitution rule.  If any
    substitution string is of the form "<tt>(...)</tt>", then the
    parentheses and leading/trailing white space are stripped before
    substitution, and the entire substituted string is enclosed in
    parentheses if it is not already.  This is for convenience when
    adding a directory to a <a href="xicpaths">search path</a>
    variable, and the path is enclosed in parentheses, when using
    forms like
    <blockquote>
    <tt>!set path</tt> <i>dir</i> <tt>$(path)</tt>
    </blockquote>
    In this case, the modified substitution rule ensures that <i>dir</i>
    is logically placed in front of the search path in <tt>path</tt>.
    For example, if <tt>path</tt> is
    <blockquote>
    <tt>( /dir1 /dir2 )</tt>
    </blockquote>
    then after the substitution implied above, one has
    <blockquote>
    <tt>path = ( </tt><i>dir</i><tt> /dir1 /dir2 )</tt>
    </blockquote>
    which is correct.  If the direct substitution was applied instead,
    this would give
    <blockquote>
    <tt>path =</tt> <i>dir</i> <tt>( /dir1 /dir2 )</tt>
    </blockquote>
    which is garbage as interpreted as a search path.

!!SEEALSO
keybang

!! 060108
!!KEYWORD
!unset
!!TITLE
!unset
!!HTML
    <b>Syntax: <tt>!unset</tt> <i>varname</i></b>

    <p>
    This command will remove the previously set <i>varname</i> from
    the internal list of variables which have been set.  Some internal
    variables, such as the paths, can not be unset, however they can
    be altered with the <a href="!set"><b>!set</b></a> command.

!!SEEALSO
keybang

!! 060108
!!KEYWORD
!setdump
!!TITLE
!setdump
!!HTML
    <b>Syntax: <tt>!setdump</tt> [<i>filename</i>]</b>

    <p>
    This command will dump to <i>filename</i> a listing of all of the
    currently defined variables, in a format accepted by the <a
    href="xicscript">script parser</a>, i.e., as a series of <a
    href="Set"><tt>Set</tt></a> function calls.  This block can be
    cut/pasted into an <a href="initfiles">initialization file</a> to
    restore state.

    <p>
    If the <i>filename</i> is not given, output goes to the standard
    output.

!!SEEALSO
keybang

!! ----------------------------------------------------------------------------
!! WRspice Interface
!! ----------------------------------------------------------------------------

!! 020809
!!KEYWORD
!spcmd
!!TITLE
!spcmd
!!HTML
    <b>Syntax: <tt>!spcmd</tt> [<i>WRspice</i> command ...]</b>

    <p>
    This will establish a stream to <i>WRspice</i> (if not already
    established) and run the command (if given).  This is a means for
    running arbitrary <i>WRspice</i> commands.  Text output goes to
    the console window.

    <p>
    In addition to the <i>WRspice</i> commands, the client-side directive
    <blockquote>
    <tt>send</tt> <i>filename</i>
    </blockquote>
    is available.  The <i>filename</i> is that of a local SPICE input
    file.  The file will have <tt>.include</tt> and <tt>.lib</tt> lines
    expanded locally, and <tt>.spinclude</tt>, <tt>.splib</tt> lines
    will be converted to "<tt>include</tt>", "<tt>.lib</tt>", as is
    done for decks created within <i>Xic</i>.  The result will be sent
    to <i>WRspice</i> and sourced.

!!SEEALSO
keybang
xic:run

