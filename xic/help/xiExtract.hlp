
!!  ---------------------------------------------------------------
!!  Xic/WRspice Help System Database
!!  $Id: xiExtract.hlp,v 1.113 2017/03/22 22:27:07 stevew Exp $
!!  Copyright (C) Whiteley Research Inc. 2003.  All Rights Reserved
!!  ---------------------------------------------------------------

!!TAG Xic

!!KEYWORD
xiExtract.hlp
!!TITLE
xiExtract.hlp
!!HTML

!!SUBTOPICS
xic:extmenu
ext:method
ext:errlog
ext:operations
ext:exthier
ext:netname
ext:gplane
ext:meascache
ext:setup
ext:deviceblock
ext:devtmpl
ext:fmtlib
xic:excfg
xic:exsel
xic:dvsel
xic:sourc
xic:exset
xic:pnet
xic:enet
xic:lvs
ext:examples
ext:examp1
ext:examp2
ext:examp3
ext:examp4


!! 090314
!!KEYWORD
xic:extmenu
!!TITLE
Extraction and Verification
!!HTML
    <i>Xic</i> contains a facility for extracting a netlist from the
    physical database, and comparing it with the schematic in the
    electrical database.  <i>Xic</i> can recognize devices in the
    physical layout, extract geometric and electrical data from these
    devices, and correspondingly update properties of electrical
    device instances.  The netlists extracted from the physical and
    electrical databases can be compared.  This layout vs.  schematic
    (LVS) testing is a useful means of minimizing mask errors.

    <p>
    The <b>Extract</b> menu contains command buttons for performing
    extraction and related functions.  The commands are summarized in
    the table below, which provides the internal command name and a
    brief description.

    <p>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <caption>Extract Menu</caption>
    <tr><th>Label</th> <th>Name</th> <th>Pop-up</th> <th>Function</th></tr>
    <tr><td><a href="xic:excfg"><b>Setup</b></a></td>
      <td><tt>excfg</tt></td> <td><b>Extraction Setup</b></td>
      <td>Set up and control extraction</td></tr>
    <tr><td><a href="xic:exsel"><b>Net Selections</b></a></td>
      <td><tt>exsel</tt></td>
      <td><b>Path Selection Control</b></td> <td>Select groups, nodes, paths</td></tr>
    <tr><td><a href="xic:dvsel"><b>Device Selections</b></a></td>
      <td><tt>dvsel</tt></td>
      <td><b>Show/Select Devices</b></td> <td>Select and highlight devices</td></tr>
    <tr><td><a href="xic:sourc"><b>Source SPICE</b></a></td>
      <td><tt>sourc</tt></td>
      <td><b>Source SPICE File</b></td> <td>Update from SPICE file</td></tr>
    <tr><td><a href="xic:exset"><b>Source Physical</b></a></td>
      <td><tt>exset</tt></td> <td><b>Source Physical</b></td>
      <td>Update electrical from physical</td></tr>
    <tr><td><a href="xic:pnet"><b>Dump Phys Netlist</b></a></td>
      <td><tt>pnet</tt></td> <td><b>Dump Phys Netlist</b></td>
      <td>Save physical netlist</td></tr>
    <tr><td><a href="xic:enet"><b>Dump Elec Netlist</b></a></td>
      <td><tt>enet</tt></td> <td><b>Dump Elec Netlist</b></td>
      <td>Save electrical netlist</td></tr>
    <tr><td><a href="xic:lvs"><b>Dump LVS</b></a></td> <td><tt>lvs</tt></td>
      <td><b>Dump LVS</b></td>
      <td>Save physical/electrical comparison</td></tr>
    <tr><td><a href="xic:exc"><b>Extract C</b></a></td>
      <td><tt>exc</tt></td> <td><b>Cap Extraction</b></td>
      <td>Extract capacitance using Fast[er]Cap</td></tr>
    <tr><td><a href="xic:exlr"><b>Extract LR</b></a></td>
      <td><tt>exlr</tt></td> <td><b>LR Extraction</b></td>
      <td>Extract L/R using <i>FastHenry</i></td></tr>
    </table>

    <p>
    In addition to the commands available from the <b>Extract
    Menu</b>, the extraction system provides a number of prompt-line
    <a href="bangcmds">commands</a> which provide additional or
    supplemental capability.  These include the <a
    href="!antenna"><b>!antenna</b></a> command for testing the antenna
    effect on wire nets connected to MOS gates, and the <a
    href="!netext"><b>!netext</b></a> command for batch extraction of
    physical wire nets from a layout.

!!SUBTOPICS
ext:method
ext:errlog
ext:operations
ext:exthier
ext:netname
ext:gplane
ext:meascache
ext:setup
ext:deviceblock

!! 022816
!!KEYWORD
ext:method
!!TITLE
Extraction System: Methodology and Overview
!!HTML
    To use the extraction capability, one typically first designs the
    circuit in electrical mode, producing a schematic, which operates
    correctly in simulation.  One then produces a corresponding layout
    in physical mode.  Generally, the objective and requirement is
    that the layout vs.  schematic test initiated with the <a
    href="xic:lvs"><b>Dump LVS</b></a> button in the <b>Extract
    Menu</b> will show no errors.  This usually requires that the
    subcircuits, if any, individually pass LVS.  Thus, one would build
    the cell hierarchy from the bottom up, enforcing LVS to pass at each
    level.

    <p>
    The <i>Xic</i> extraction system differs from others in that it
    does not (at least presently) provide fixed associations between
    electrical and physical devices, and subcells.  The user has the
    ability to place cell contact terminals in the layout, and to
    create <a href="ext:netname">net name labels</a> in the layout and
    set schematic <a href="xic:nodmp">net names</a> by various means,
    and matching names will associate.  Many cells, though, will
    associate with no user intervention.  If the association initially
    fails, generally a placed cell terminal or two, or judicious use
    of net name labels, will allow correct association and passing of
    LVS testing.

    <p>
    There are three important diagnostic and setup tools available
    from the buttons at the top of the <a
    href="xic:extmenu"><b>Extract Menu</b></a>.  The <b>Setup</b>
    button will bring up the <a href="xic:excfg"><b>Extraction
    Setup</b></a> panel.  This panel contains four tabbed pages.  The
    <b>Views and Operations</b> page contains controls that make
    certain extraction-related features, such as terminals and group
    numbers, visible.  It also allows terminal placement and parameter
    editing.  It provides means to clear and run extraction, which is
    otherwise automatic.  There is also provision to select devices
    and other objects that fail to associate.  The other three pages
    of this panel provide controls which map to variables and flags
    which control extraction system behavior.  Most of this will be
    set in the technology file, and it is unlikely that there will be
    a frequent need to change the parameters interactively.  The
    <b>Misc Config</b> page does provide some display attribute
    choices which may be an exception.

    <p>
    The <a href="xic:exsel"><b>Path Selection Control</b></a> panel is
    obtained from the <b>Net Selections</b> button in the <b>Extract
    Menu</b>.  This allows visualizing conductor groups, and the
    corresponding nets in the schematic if there is an association. 
    One can click to select the groups/nets, or enter a group number
    to highlight that group.  The highlighting can follow the net as
    it descends through the cell hierarchy to any depth.  The panel
    provides a very useful tool for diagnosing net connectivity
    problems.

    <p>
    The <a href="xic:dvsel"><b>Show/Select Devices</b></a> panel
    appears on pressing the <b>Device Selections</b> button in the
    <b>Extract Menu</b>.  This will list the devices found in the
    current physical layout.  These devices can be highlighted by index
    number, or selected by clicking on them.  When selected, measured
    parameters may be printed and/or compared with the dual device in
    the schematic.  The panel is a useful tool for addressing device
    recognition issues.

    <p>
    There are cases where one starts with a layout, and it is
    desirable to generate a schematic.  There are also situations
    where the physical and electrical designs are generated in
    separate files, and it is desirable to merge these into a single
    file.  <i>Xic</i> has provisions to assist in these cases.

    <p>
    Schematics can be generated in various ways.  The schematics that
    are machine-generated by <i>Xic</i> have each device individually
    connected to <a href="dev:gnd"><b>gnd</b></a> or <a
    href="dev:tbar"><b>tbar</b></a> terminals, so there are no wires. 
    These schematics are electrically correct, but lack
    human-readability and aesthetics.  They serve, however, as a
    starting point if the user wishes to rearrange the devices and add
    wires as in a normal schematic.

    <p>
    A schematic can be generated from a SPICE file with the <a
    href="xic:sourc"><b>Source SPICE</b></a> button in the <b>Extract
    menu</b>.  This can create devices and subcircuits as needed. 
    Existing devices will have properties updated with values from the
    SPICE file.

    <p>
    Similarly, the <a href="xic:exset"><b>Source Physical</b></a>
    button will create or update the schematic from an intermediate
    SPICE file extracted from the physical layout.  Existing devices
    will have properties updated with values extracted from the
    physical layout, and missing devices and subcircuits are added.

    <p>
    The <a href="xic:imprt"><b>Import Control</b></a> panel from the
    <a href="xic:cvrtmenu"><b>Convert Menu</b></a> is used to copy either
    the electrical or physical part of another cell into the current
    cell.  It is able to extract this information from cell
    definitions within an <a href="xic:fsaf">archive file</a>.  This
    can be used to combine separate electrical and physical designs
    into a single hierarchy.

    <p>
    Separate commands are available for generating netlist files from
    the physical and electrical data.  The <a href="xic:lvs"><b>Dump
    LVS</b></a> command in the <b>Extract Menu</b> performs the layout
    vs.  schematic comparison, and prints errors in a file which may
    be displayed on-screen.

    <p>
    The <a href="xic:pnet"><b>Dump Phys Netlist</b></a> command in the
    <b>Extract Menu</b> generates a connectivity listing extracted
    from the physical database.  This includes a listing of extracted
    devices, in various formats.  One format is SPICE, so that the
    <b>Dump Phys Netlist</b> command can be used to generate a SPICE
    listing extracted from the physical layout.

    <p>
    Commands in the <b>Extract Menu</b> also work with the node
    mapping facility for SPICE output.  It is often necessary to know
    the name of specific circuit nodes in a SPICE file, which by
    default is not possible as <i>Xic</i> assigns then internally. 
    The node mapping facility, controlled with the <a
    href="xic:nodmp"><b>nodmp</b></a> button in the electrical mode
    side menu, allows the node tokens to be preassigned.

!!SEEALSO
xic:extmenu

!! 110513
!!KEYWORD
ext:errlog
!!TITLE
Extraction System: Logging and Error Reporting
!!HTML
    If, while running the grouping, extraction, or association
    operations, the operation cannot complete due to an error, or if
    an important error is identified such as problems in the
    technology file setup, a file browser window containing the
    <tt>extraction.errs</tt> file will appear.  This file is created
    in the <a href="logfiles">log files</a> area, and will contain
    messages indicating serious or fatal errors encountered during
    processing.  When such an error occurs, the file will be made
    visible automatically, so there is usually no reason to explicitly
    view this file in the absence of any error indication.

    <p>
    Note that lack of successful association is not considered an
    error.  It is up to the user to make sure that the electrical and
    physical designs are consistent, and that terminals get placed
    correctly.

    <p>
    Logging of these operations can be enabled from the <a
    href="xic:dblog"><b>Logging Options</b></a> panel from the
    <b>Logging</b> button in the <b>Help Menu</b>.  The
    <b>Grouping/Extraction/Association</b> group in the lower half of
    the panel contains four check boxes:  <b>Group</b>,
    <b>Extract</b>, <b>Assoc</b>, and <b>Verbose</b>.  Checking any or
    all of the first three will enable logging of the checked
    operation, producing log files named <tt>group.log</tt>,
    <tt>extract.log</tt>, and <tt>associate.log</tt> in the <a
    href="logfiles">log files</a> area.  If the <b>Verbose</b> box is
    checked, the files will contain additional information.
    These (and all) log files are accessible through the <a
    href="xic:logs"><b>Log Files</b></a> button in the <b>Help
    Menu</b>.

    <p>
    The log files may be helpful to the user or to Whiteley Research
    in resolving problems.  The formats are not documented, but are
    intended to be reasonably suggestive if not self-explanatory to an
    advanced user.

!!SEEALSO
xic:extmenu

!!REDIRECT ext:group            ext:operations#group
!!REDIRECT ext:extract          ext:operations#extract
!!REDIRECT ext:assoc            ext:operations#assoc

!! 110513
!!KEYWORD
ext:operations
!!TITLE
Extraction System: Operations and Algorithms
!!HTML
    There are three internal operations performed by the extraction
    system:  grouping, extraction, and association.  These operations
    are performed as needed, and have to be performed only once,
    unless the cell is modified.  This accounts for the delay and
    activity noted in response to initiating many of the command
    buttons and other operations related to the <a
    href="xic:extmenu"><b>Extract Menu</b></a>.  The <a
    href="techfile">technology file</a> specifies the information
    necessary to perform these operations.

    <p>
    The extraction subsystem requires that a number of items be <a
    href="ext:setup">set up</a> properly in the technology file.  This
    includes the setting of keywords in layer blocks to identify
    layers that serve as conductors or vias, and definition of device
    blocks which allow certain devices to be recognized by their
    physical structure.  Wire nets and subcircuit connectivity are
    determined automatically by assembling groups of similar objects
    that touch or overlap, or are connected through a via.  Once
    conductor groups are established, devices are extracted, and
    device terminals are assigned a conductor group index.  This
    results in a description of the circuit which can be compared with
    the electrical schematic for consistency.

    <p>
    In the present version, all device extraction is performed
    automatically, thus there is no need or provision for manual
    placement of device terminals.  The connection terminals to the
    current cell are created in the schematic with the <a
    href="xic:subct"><b>subckt</b></a> button in the side menu.  It is
    possible to manually place the corresponding physical cell
    terminals in the layout with the <a href="xic:tedit"><b>Edit
    Terminals</b></b> button in the <b>Views and Operations</b> page
    of the <a href="xic:excfg"><b>Extraction Setup</b></a> panel from
    the <b>Setup</b> button in the <b>Extract menu</b>.  However this
    is not always necessary, as <i>Xic</i> will attempt to place the
    terminals at a correct position in the layout automatically.  If
    this fails, manually placing terminals will assist in the
    association process, and may be needed in some cases to resolve
    ambiguity.

    <p>
    Many of the devices in the device library have physical terminal
    extensions in their node data structures.  These are the
    "physical" devices, such as resistors, capacitors, and
    transistors.  Other devices, such as voltage and current sources,
    are not physically implementable and have the <a
    href="prpty:nophys"><b>nophys</b></a> property assigned.  These
    devices have no physical terminal extensions, thus will not appear
    in netlists generated from the physical layout.  There is a third
    class of "device" in the device library, which includes the <a
    href="dev:gnd"><b>gnd</b></a> (ground) and <a
    href="dev:tbar"><b>tbar</b></a> terminals.  These have no explicit
    physical implementation, but are an implicit part of the wiring
    net as they assign connections by name to locations in the
    schematic.  All points connected to terminal devices with the same
    name are logically connected together.  The terminal devices
    include multi-contact ("bus") terminals, which again pertain to
    the schematic only and have no counterpart in the layout.

    <p>
    When a device is placed in the electrical schematic, a physical
    terminal for each device connection is associated with the
    physical cell.  In physical mode, these terminals are made visible
    with the <a href="xic:tshow"><b>All Terminals</b></a> and <b>Cell
    Terminals Only</b> check boxes in the <b>Show</b> group in the
    <b>Views and Operations</b> page of the <b>Extraction Setup</b>
    panel.  Before association, these terminals are grouped just
    outside of the lower left corner of the physical cell's bounding
    box.  During association, these terminals are automatically moved
    to their proper locations in the physical layout, if the
    corresponding physical device structure is correctly identified
    and associated.  One can select and investigate physical devices
    in the layout with the <a href="xic:dvsel"><b>Show/Select
    Devices</b></a> panel from the <b>Device Selections</b> button in
    the <b>Extract Menu</b>.

    <p>
    Separate commands are available in the <b>Extract Menu</b> for
    generating netlist files from the physical (<a
    href="xic:pnet"><b>Dump Phys Netlist</b></a>) and electrical (<a
    href="xic:enet"><b>Dump Elec netlist</b></a>) data.  The <a
    href="xic:lvs"><b>Dump LVS</b></a> command performs the layout vs. 
    schematic comparison, and prints differences in a file which can
    be displayed on-screen.

    <a name="group"></a>
    <h2>The grouping operation</h2>

    Initial geometric processing is performed, such as implementing
    the <a href="Conductor"><tt>Conductor Exclude</tt></a>
    definitions.  The extraction system maintains a shadow cell
    database.  The cells in the extraction database may contain
    modified objects and flattened subcell geometry, different from
    the cell in the main database.  The extraction database is created
    before grouping.  If the <b>Extraction View</b> check box in the
    <b>Show</b> group in the <b>Views and Operations</b> page of the
    <a href="xic:excfg"><b>Extraction Setup</b></a> panel from the
    <b>Extract Menu</b> is checked, the physical drawing windows will
    display the cell content based on this database, and not the main
    database.

    <p>
    One complexity that arises is that a device such as an inductor or
    transmission line is often implemented simply as a strip of
    conducting material.  In order to insert the device, the grouping
    algorithm has to be fooled into thinking that the strip which is
    the device is actually two disconnected strips, one for each
    terminal.  This can be accomplished with the introduction of
    special layers used in layout, and the <tt>Conductor Exclude</tt>
    directive.  The directive will logically remove parts of the
    conductor that intersect with the special layer.  Perhaps a more
    familiar example is a MOS transistor, whose body is defined by
    POLY over ACTIVE.  Both are required to be conductors, but without
    "<tt>Conductor Exclude POLY</tt>" in the ACTIVE layer definition
    block, the source and drain would be shorted together!.

    <p>
    In grouping, conducting nets are identified.  Every conducting
    object is given a group number.  The group number is the same for
    all of the conducting objects in a wire net, and each disjoint
    wire net has a unique group number.

    <p>
    Grouping is done recursively, starting from the leaf subcells and
    working up to the current cell.  The core of the grouping is an
    algorithm for determining conductor paths due to touching objects
    on a layer, and through vias between layers if the <a
    href="VIA"><tt>Via</tt></a> keyword has been included in the
    technology file for the via layers, and by contact layers if the
    <a href="CONTACT"><tt>Contact</tt></a> keyword was applied in the
    technology file.  Once a cell is processed, it is not regrouped
    unless the cell is modified.  The <b>Groups</b> check box in the
    <b>Show</b> group in the <b>Views and Operations</b> page of the
    <a href="xic:excfg"><b>Extraction Setup</b></a> panel can be
    checked to display the group numbers of objects in the layout in
    the drawing windows.  Each group (conductor net) is assigned a
    number.  While the <b>Groups</b> check box is checked, these
    numbers are printed on-screen near the conducting objects.

    <a name="extract">
    <h2>The extraction operation</h2>

    Extraction is the identification of physical devices and
    subcircuits, and establishment of the connections between them. 
    This is the most compute-intensive and time consuming part of the
    process.  Extraction is done recursively, starting from the leaf
    subcells and working up to the current cell.  It requires that the
    grouping operation has been performed and the group numbering is
    up to date.

    <p>
    Initially, subcells that should be <a
    href="ext:exthier">flattened</a> into the cell are identified,
    and the flattening performed.  On the initial pass, cells that are
    wire-only, i.e., contain no devices and only wire-only subcells,
    and cells that have been explicitly specified as flattenable by
    the user, will be flattened.  In flattening, objects from the
    master cell are transformed and added to the containing cell,
    replacing the cell instance.  This is done in the shadow cell
    database used by the extraction system.  The extraction may be
    repeated for a cell, if it is determined subsequently the
    additional subcells require flattening.  This may not be known
    until the association stage.  Suffice it to say that the process
    is iterative and a bit more complicated than the simple
    progressive flow implied in this description.

    <p>
    Vias and similar wiring cells should have no electrical terminals,
    and should not be placed in the schematic.

    <p>
    The extraction operation will look for <a href="ext:netname">net
    labels</a> and physical cell terminals that have been placed by
    the user.  These, if found, supply text names for the group over
    which they reside.  The names are saved along with the object list
    and other parameters for each conductor group, for later use.

    <p>
    In extraction, devices are recognized by the patterns specified in
    the <a href="ext:deviceblock">device definitions</a> in the
    technology file.  The device contact points are identified, and
    connecting conductor group numbers recorded.  Connections to and
    between subcells are identified and recorded.

    <p>
    In each subcircuit instance, each conductor group is extracted,
    transformed to parent cell coordinates, and compared with the
    parent conductor groups and other subcircuit conductor groups for
    connectivity.  Connectivity between conductor groups can be
    established through
    <ol>
    <li>similar <tt>Conductor</tt> or ground plane layers touching.
    <li><tt>Contact</tt> and <tt>Conductor</tt> or ground plane layers
     touching.
    <li>an area of a <tt>Via</tt> layer exists, at any level of the
     hierarchy, under which the two via layers exist (one from two
     different groups) and any conjunction expression is true.
    </ol>

    Conductor groups are merged when necessary due to being connected
    through subcircuits, flattened and not.  When two groups merge,
    the object lists are merged, and the larger of the two group
    numbers is replaced by the smaller.  When extraction is finished,
    the groups are renumbered so that the numbering is compact.

    <a name="assoc">
    <h2>The association operation</h2>

    The association algorithm logically links devices, subcircuits,
    nets, and terminals between the schematic and layout.  If
    association is successful, then <a href="xic:lvs">LVS</a> will
    pass.

    <p>
    At its core, the association algorithm works by comparing
    candidate similar objects from the schematic and layout, and
    computing a numerical score.  The pair with the highest score
    "wins" and the two objects become duals of one another, i.e.,
    become "associated".  This is done for devices, subcircuits and
    nets/groups.

    <p>
    Unfortunately, reality is not that simple, and the actual
    association algorithm is quite complex.  Some of the factors
    contributing to the complexity are listed below.

    <ul>
    <li>The hierarchy tree may not be quite the same in the schematic
    and layout.  The association algorithm has provision for detecting
    when necessary and logically <a href="ext:exthier">flattening</a>
    both the schematic and the layout.

    <li>The circuit may have topological symmetry, where the
    comparison test fails because the top score is shared by two or
    more pairs.  The algorithm will try various ways to break the
    symmetry, and if that fails, a random choice will be made. 
    Finding the correct permutation in this type of case requires
    examination of the context of instances of the cell in the
    hierarchy.

    <li>The layout may have split nets, where a logical net (as shown
    in the schematic) consists of two or more disjoint conductor
    groups in the layout.  Instances of the cell have the disjoint
    conductor groups connected by metal from outside of the master
    cell.  The association algorithm has provision for detecting and
    accommodating this case.

    <li>The layout and schematic may show different connections to
    permutable subcell terminals, such as permutable inputs to a logic
    gate.  The association algorithm attempts to detect this type of
    case and avoid flagging it as an LVS error.
    </ul>

    <p>
    Association is done in (at least) two passes.  The first pass is
    done to the complete cell hierarchy from the bottom up, and
    corrections that involve comparison at different levels of the
    hierarchy are skipped.  Each cell is associated as far as
    possible, with no attempt to break symmetries.

    <p>
    On the second pass, inter-hierarchy corrections are allowed (since
    the parameters to be compared have now presumably been set), and
    symmetry-breaking is allowed.

    <p>
    During the first pass, a list of symmetries is generated if
    association fails to complete due to symmetry.  If this list is
    found in the second pass, "symmetry trials" will be initiated. 
    Each symmetry trial represents one choice, or permutation, of the
    symmetries.  Association proceeds with consistency tests applied. 
    If a consistency test fails at a later iteration, the present
    symmetry trial is aborted, and all associations made in the trial
    are undone.  A new symmetry trial, using a different permutation,
    begins.  Eventually, unless limits are exceeded, the "correct"
    permutation will be found and association will complete without
    errors.  The <a href="MaxAssocLoops"><b>MaxAssocLoops</b></a> and
    <a href="MaxAssocIters"><b>MaxAssocIters</b></a> variables set the
    limits.  The <b>MaxAssocLoops</b> is approximately the maximum
    number of permutations that can be accommodated.  The
    <b>MaxAssocIters</b> variable sets the maximum number of calls to
    the comparison functions until no further associations are found. 
    Only strange cases, such as long series arrays of identical
    devices, require more than a few iterations.

    <p>
    The <b>Misc Config</b> page of the <a
    href="xic:excfg"><b>Extraction Setup</b></a> panel from the
    <b>Extract Menu</b> provides a number of controls affecting
    association.

!!SEEALSO
xic:extmenu

!! 110513
!!KEYWORD
ext:exthier
!!TITLE
Extraction System: Cell Hierarchy and Flattening
!!HTML
    When associating, <i>Xic</i> will in most cases correctly account for
    differences in the cell hierarchy in electrical and physical modes.
    This is most often automatic, though it is possible for the user to
    intervene if necessary.  The following examples illustrate
    hierarchy differences.

    <ul>
    <li>An instantiated device <a href="xic:pcells">pcell</a>, where
    the physical part is represented by a subcell (a pcell
    sub-master).  This differs from normal devices, which have an empty
    physical part.  In this case, the physical subcell will need to be
    logically flattened into its container cell.

    <p>
    <li>The schematic might contain symbols such as logic gates, where
    the gates are implemented with transistors in the physical
    counterpart cell.  In this case, the gate schematic must be
    logically flattened into the parent schematic.

    <p>
    <li>Devices and subcircuits shown in the schematic might be found
    in a subcell of the physical counterpart.  There may be a
    container cell containing logic gates, for example, which itself
    has no schematic, and the logic gates appear in the schematic.  In
    this case, the container cell will need to be flattened into its
    container.
    </ul>

    <p>
    Physical cells that are wire-only, i.e., contain no devices or
    non-wire-only subcircuits, are always flattened into their
    container.  Physical cells that are pcell instances will always be
    flattened.  Physical and electrical cell instances will be
    flattened as needed during extraction.  Thus, there is typically
    little need for the user to set up explicit cell flattening, much
    less so than in earlier <i>Xic</i> releases.  However, the methods
    for explicit flattening are still available and can be used if
    <i>Xic</i> finds a flattening situation that isn't handled
    properly automatically.

    <p>
    When a physical subcell instance is "flattened", all conducting
    groups, devices and sub-subcells in the subcell master are
    transformed and linked into the containing cell for extraction and
    LVS purposes.  References to these cells will disappear from the
    <a href="xic:pnet"><b>Dump Phys Netlist</b></a> listing, unless
    the boolean variable <a
    href="PnetListAll"><b>PnetListAll</b></a> is set, in which case
    they are listed.  Flattening of electrical cells is similar.  The
    nets, devices, and subcircuits of the flattened instance master
    are linked into the containing schematic.  The containing
    schematic does not display this visually, this affects only the
    internal data structures. 

    <p>
    Logical flattening can be controlled by the user in two ways: 
    with the <a href="prpty:flatten"><b>flatten</b></a> property, and
    with the <a href="FlattenPrefix"><b>FlattenPrefix</b></a>
    variable.  The variable can be set from the <b>Cell flattening
    name keys</b> group in the <b>Net and Cell Config</b> page of the
    <a href="xic:excfg"><b>Extraction Setup</b></a> panel, from the
    <b>Setup</b> button in the <b>Extract Menu</b>.

    <p>
    Of these two methods, use of the property is most efficient and
    flexible, and the setting is inherently persistent as the property
    value is saved in the layout file.  It is the only means by which
    the flattening of individual instances can be controlled.

    <p>
    The <b>flatten</b> property can be applied to electrical and
    physical cells and cell instances.  It can be applied to the
    current cell with the <a href="xic:cprop"><b>Cell Property
    Editor</b></a> available in the <b>Edit Menu</b>.  The <b>Add</b>
    menu in this panel provides a <b>flatten</b> choice in both
    electrical and physical modes.  When the <b>flatten</b> property
    is applied to a master cell, instances of the cell will by default
    always be flattened in the extraction system.  However,
    <b>flatten</b> properties can be applied to cell instances as
    well, using the <a href="xic:prpty"><b>Property Editor</b></a>
    from the <b>Edit Menu</b>.  Again, this is true in both electrical
    and physical modes.  If an instance is given a <b>flatten</b>
    property, and its master also has a <b>flatten</b> property, the
    instance will <b>not</b> be flattened.  If an instance has the
    property and the master does not, then that instance, only, will
    be flattened.  Thus, when applied to a cell instance, the
    <b>flatten</b> property inverts the flattening status implied by
    the master, for that instance.

    <p>
    In earlier <i>Xic</i> releases, logical flattening was controlled
    with the <a href="FlattenPrefix"><b>FlattenPrefix</b></a>
    variable.  The variable can be set to a list of pattern-matching
    tokens which match the names of cells to be flattened.  Cell names
    can be matched by prefix, suffix, or verbatim.  The user is
    required to set this variable before extraction, a step that can
    be avoided by use of the <b>flatten</b> property instead.  Unlike
    the <b>flatten</b> property, the <b>FlattenPrefix</b> variable
    applies to physical (layout) cells only.  The <b>Cell flattening
    name keys</b> text entry area in the <b>Net and Cell Config</b>
    page of the <a href="xic:excfg"><b>Extracting Setup</b></a> panel
    from the <b>Extract Menu</b> can be used to set the
    <b>FlattenPrefix</b> variable.  The variable can also be set from
    a startup file or the technology file.  See the description of the
    <a href="FlattenPrefix">variable</a> for the property string syntax.

!!SEEALSO
xic:extmenu

!! 061916
!!KEYWORD
ext:netname
!!TITLE
Extraction System: Group/Net Naming
!!HTML
    It is possible to apply a name to a physical wire net (or group) by
    use of special labels.  The group name will be used in output when
    appropriate.  It will also be used in association to match to electrical
    nets which have the same <a href="xic:nodmp">name</a>.

    <p>
    Net name <a href="xic:label">labels</a> are created in the same way as
    any other label in physical mode.  There are two requirements that
    must be met for the label to be applied.

    <ol>
    <li>The label origin mark must reside over or touch an object on a
    layer with the <a href="Conductor"><tt>Conductor</tt></a>
    attribute.  This is generally applied in the layer blocks of the
    technology file to metal or otherwise conducting layers.  <li>The
    layer name of the <a href="layers">layer-purpose pair</a> on
    which the label resides must match that of the metal object above. 
    The purpose name must match the special purpose name defined for
    this purpose within <i>Xic</i>.  By default, this purpose is named
    "<tt>pin</tt>".
    </ol>

    <p>
    For example, suppose we have a box on a metal layer <tt>M1</tt>,
    which has the default "<tt>drawing</tt>" purpose.  To name the
    conductor group containing this box, we create a label, containing
    the name, on the layer-purpose "<tt>M1:pin</tt>", and place this
    so that the label origin mark, which is marked with a tiny
    ghost-drawn cross during placement, will be located in or touching
    the box.

    <p>
    The assumed "<tt>pin</tt>" purpose name can be changed with the <a
    href="PinPurpose"><b>PinPurpose</b></a> variable, or equivalently
    with the <b>Net label purpose name</b> text input area of the
    <b>Net and Cell Config</b> page of the <a
    href="xic:excfg"><b>Extraction Setup</b></a> panel from the
    <b>Extract menu</b>.

    <p>
    Alternatively, the <a href="PinLayer"><b>PinLayer</b></a> variable
    can be set to a layer name, and all netname labels must reside on
    this layer.  In this case, the pin purpose is not recognized. 
    This is for compatibility with older libraries and is not
    recommended.

    <p>
    Physical groups can acquire a name in the following ways, listed
    in priority order.
    <ol>
    <li>An element of the group contains a net name label.  Only one
    name is allowed, all net labels are ignored if conflicting net
    names are found.  The net may have arbitrarily many name labels,
    but each must specify the same name logically.  Names are by
    default <a href="NetNamesCaseSens">case-insensitive</a>, and
    different <a href="Subscripting">subscripting</a> delimiters are
    taken as equivalent.  Net name labels override any other name that
    might be associated with the group.

    <li>If an otherwise unnamed group contains a scalar cell terminal
    after association, the group name will take the terminal name. 
    There can be at most one terminal, if more than one the terminal
    names are ignored.

    <li>After association, otherwise unnamed groups will take any
    assigned name of the corresponding wire net.  Net names can be
    applied in electrical mode with the <a href="xic:nodmp"><b>Node
    (Net) Name Mapping</b></a> panel from the <b>nodmp</b> button in
    the electrical side menu.  Electrical nets can also be named with
    <a href="wirelabel">wire labels</a>, or with the <a
    href="dev:tbar">named terminal</a> devices provided in the device
    library.
    </ol>

    During association, electrical nets and physical conductor groups
    with the same logical name will be associated without further
    testing.  At this point, the only names that may apply to the
    conductor group are from name labels, or from cell terminals that
    have been <a href="xic:tedit">placed</a> into the layout by the
    user and therefor have the <a href="FIXED"><tt>FIXED</tt></a> flag
    set.  Thus, liberal but <b>correct</b> use of net name labels can
    speed up the association operation.

    <p>
    There is a provision for automatically generating or updating net
    name labels after association, with the <b>Update net name labels
    after association</b> check box in the <b>Net and Cell Config</b>
    page of the <a href="xic:excfg"><b>Extraction Setup</b></a> panel,
    which is displayed with the <b>Setup</b> button in the <b>Extract
    Menu</b>.  This tracks the state of the <a
    href="UpdateNetLabels"><b>UpdateNetLabels</b></a> variable, which
    can be set or cleared directly to set this mode.

    <p>
    This mode should be used only when layout of a cell is complete
    and LVS passes.  Adding additional net name labels by forcing
    association with this mode active before saving the cell to a
    library can maximize association efficiency wen the cell is used
    in the future.

    <p>
    It is also possible to ignore net name labels entirely by use of
    the <b>Ignore net name labels</b> check box in the same panel, or
    equivalently by setting the <a
    href="IgnoreNetLabels"><b>IgnoreNetLabels</b></a> variable.  It is
    unlikely that a user will require this with any frequency.

    <p>
    The pre-association net names, as obtained from net name labels
    and user-placed cell terminals, can explicitly imply connectivity
    in LVS, thus accounting for "split nets".  A split net is a
    logical conductor group that consists of two or more physically
    disconnected conductor groups.  For example, the cell schematic
    may show a simple wire distributing power to all parts of a cell. 
    The physical implementation, though, might consist of a power ring
    in the parent or another cell, that runs over and makes contact at
    various points in the cell.  Without the power ring, the cell
    contains multiple locations that should be, but are not, connected
    together.  Association and LVS will fail in this case, however there
    is a way to detect and accept this type of case.

    <p>
    If each piece of a split net has a separate and of course logically
    equivalent net name, then setting the <b>Merge groups with
    matching net names</b> check box in the <b>Net and Cell Config</b>
    page of the <a href="xic:excfg"><b>Extraction Setup</b></a> panel
    from the <b>Extract Menu</b> will cause association to logically
    merge these groups, allowing LVS to pass.  Equivalently, the
    <a href="MergeMatchingNamed"><b>MergeMatchingNamed</b></a> variable, which
    tracks the check box, can be set or cleared to the same effect.

    <p>
    Although it is required that this mode be active for successful LVS
    when the top-level cell contains split nets, it is not required
    otherwise, even if cells lower in the hierarchy contain split nets.

!! 110513
!!KEYWORD
ext:gplane
!!TITLE
Extraction System: Ground Plane Handling
!!HTML
    <p>
    The extraction algorithm can handle the situation where there is a
    single ground plane layer, either clear or dark field.  Groups
    connected to ground are always assigned to group number zero. 
    Group zero is only used when a layer has been identified as a
    ground plane through one of the keywords.

    <p>
    By default, handling of a <tt>GroundPlane</tt> (clear field) layer
    is the same as for other <tt>Conductor</tt> layers, however, in
    the top-level cell, the largest area group extracted on this layer
    is assigned to group 0, the ground group.  There an alternative
    mode where all areas of the layer, in any cell, are assigned to
    the ground group.

    <p>
    There are two levels of support for a dark-field ground plane,
    indicated by the presence or absence of the <tt>MultiNet</tt>
    keyword following "<tt>GroundPlaneClear</tt>".  The simplest
    situation is where the <tt>MultiNet</tt> keyword is absent.  In
    this case, terminals and contacts with no connection, which would
    otherwise connect to the <tt>GroundPlaneClear</tt> layer if that
    layer were present, are assigned to group 0 (ground).

    <p>
    For example, suppose the technology file contained the following
    lines:

    <blockquote>
    <tt>Layer M0<br>
    GroundPlaneClear<br>
    ...<br>
    Layer I0<br>
    Via M1 M0</tt>
    </blockquote>

    <p>
    In this case, an area of <tt>I0</tt> over an area of <tt>M1</tt>
    and <i>not</i> over an area of <tt>M0</tt> would indicate a
    connection of the <tt>M1</tt> area to ground.

    <p>
    To repeat, if the <tt>MultiNet</tt> keyword does not appear, then
    all areas <i>outside</i> of the <tt>GroundPlaneClear</tt> layer
    geometry are assumed to be above ground.  Vias and Contacts that
    have been specified for the ground plane layer will make contact
    to ground in the <i>absence</i> of the ground plane layer.

    <p>
    Although this sometimes works for simple cells, it can lead to
    trouble.  Suppose that an island of ground plane metal is used as
    part of the metalization for the chip pads.  This would appear as
    a hole in the displayed representation of the ground plane layer. 
    Then each pad will be extracted as shorted to ground!

    <p>
    If the <tt>MultiNet</tt> keyword is given following the
    <tt>GroundPlaneClear</tt> keyword, then an internal layer, which
    is the inverse polarity of the ground plane layer, will be created
    and used for extraction purposes.  The algorithm used for
    inversion can be specified by an integer 0-2 which optionally
    follows <tt>MultiNet</tt>.  There are also <b>!set</b> variables
    which parallel the technology file keywords.  Complete information
    can be found in the <a href="ext:setup">Extraction Setup</a> topic.

!!SEEALSO
xic:extmenu

!! 110513
!!KEYWORD
ext:meascache
!!TITLE
Extraction System: Measurement Caching
!!HTML
    During association, and when a physical netlist is being created,
    measurements may be performed on devices in the layout to extract
    parameter values associated with the device.  This may, for
    example, be the resistance of a resistor device, or geometrical
    factors associated with a MOS transistor device.

    <p>
    The measurement may be rather compute intensive and time
    consuming, thus <i>Xic</i> supports a means for caching
    measurement results.  The caching can radically reduce the time
    required to associate the circuit, but it requires that the user
    intervene to update the cached values if the underlying geometry
    changes.  This <b>does not</b> happen automatically.  Thus,
    measurement caching is disabled by default.  The caching is
    enabled by setting the <a
    href="UseMeasurePrpty"><b>UseMeasurePrpty</b></a> variable, or
    equivalent checking the <b>Use Measurement results cache
    property</b> check box in the <b>Device Config</b> page of the <a
    href="xic:excfg"><b>Extraction Setup</b></a> panel from the
    <b>Extract Menu</b>.

    <p>
    Every device can have a "data box".  This is created automatically
    in <i>Xic</i> on a layer-purpose pair named
    "<tt>device:xicdata</tt>".  The box coordinates are set to the
    extracted body bounding box of the device.

    <p>
    The measurement results are saved to a <a
    href="prpty:measures"><b>measures</b></a> property that is applied
    to the data box.  This is property number 7106.  The property
    string is set to a space-separated list of numbers, or
    colon-separated pairs of numbers, representing measurement
    results, or non-permuted and permuted measurement results if the
    device has permutable contacts and the measurement result changes
    on permutation.  The ordering is the same as the order of
    measurement requests in the <a href="ext:deviceblock">device
    definition block</a>.

    <p>
    When a cell is read, by default the data box and <b>measures</b>
    property, if present, are ignored.  If the <b>UseMeasurePrpty</b>
    variable is set, and the <a
    href="NoReadMeasurePrpty"><b>NoReadMeasurePrpty</b></a> variable
    is not set, the values from the <b>measures</b> property will be
    used when parameters are needed, and no values will be computed if
    the <b>measures</b> property is found.  The
    <b>NoReadMeasurePrpty</b> variable tracks the state of the
    <b>Don't read measurement results from property</b> check box in
    the <b>Device Config</b> page of the <a
    href="xic:excfg"><b>Extraction Setup</b></a> panel from the
    <b>Extract Menu</b>.

    <p>
    After association, if the <b>UseMeasurePrpty</b> variable is set,
    the data boxes and <b>measures</b> properties will be created if
    necessary, and updated with the current measurement values.

    <p>
    Thus, to globally update the cached measurement values, one can
    use the following procedure.

    <ol>
    <li>Press the <b>Clear Extraction</b> button in the <b>Extraction
    Setup</b> panel.  This will invalidate the present extraction
    state.

    <li>Make sure that the <b>Use measurement results cache
    property</b> check box in the <b>Device Config</b> page of the
    <b>Extraction Setup</b> panel is checked.

    <li>Make sure that the <b>Don't read measurement results from
    property</b> check box on the same page is also checked.
    
    <li>Press the <b>Do Extraction</b> button in the same panel.  This
    will run grouping, extraction and association operations. 
    Measured values will be computed, since any cached values are
    ignored due to <b>NoReadMeasurePrpty</b> being set.  After
    association, the <b>measures</b> properties are updated to the
    newly computed values.

    <li>Un-check the <b>Don't read measurement results from
    property</b> check box.  Save the cell hierarchy.
    </ol>

!!SEEALSO
xic:extmenu

!! 021615
!!KEYWORD
ext:setup
!!TITLE
Extraction System:  Setup and Configuration
!!HTML
    <p>
    Use of the extraction features requires setting certain keywords
    and data blocks in the <a href="techfile">technology file</a>. 
    There are three types of entries:

    <ol>
    <li>Keyword descriptions in the various physical <a
    href="techfile:layers">layer blocks</a>, including the
    <a href="techfile:layers:ext">extraction</a> and <a
    href="tech:layers:phys">physical property</a> keywords.  These
    define the layers as conductors and insulators.  See the
    references for complete information.

    <p>
    <li>Global attribute <a href="!set:extech">variables</a>.
    There are a few such variables for the extraction system, which
    provide such things as the substrate dielectric constant.
 
    <p>
    <li>The <a href="ext:deviceblock">device blocks</a>, which appear
    after the layer blocks in the technology file.  These define
    device structures to be recognized and extracted.
    </ol>

    In addition, the user may wish to further customize the technology
    file by adding <a href="techfile:scripts">scripts</a> which
    perform some extraction-related function, such as generating
    temporary layers.

    <p>
    If the user wishes to define a customized format for physical or
    electrical netlist output, an entry in the <a
    href="ext:fmtlib">format library</a> file can be added.  The
    format library contains scripts which provide formatting for the
    commands in the <a href="xic:extmenu"><b>Extract Menu</b></a> that
    produce netlists.

!!SUBTOPICS
techfile:layers:ext
techfile:layers:phys
ext:deviceblock

!!REDIRECT Template         ext:deviceblock#Template
!!REDIRECT Measure          ext:deviceblock#Measure
!!REDIRECT Section          ext:deviceblock#Section
!!REDIRECT BodyArea         ext:deviceblock#BodyArea
!!REDIRECT BodyPerim        ext:deviceblock#BodyPerim
!!REDIRECT BodyMinDimen     ext:deviceblock#BodyMinDimen
!!REDIRECT SimpleMinDimen   ext:deviceblock#SimpleMinDimen
!!REDIRECT ContactMinDimen  ext:deviceblock#ContactMinDimen
!!REDIRECT CWidth           ext:deviceblock#CWidth
!!REDIRECT CNWidth          ext:deviceblock#CNWidth
!!REDIRECT CBWidth          ext:deviceblock#CBWidth
!!REDIRECT CBNWidth         ext:deviceblock#CBNWidth
!!REDIRECT CArea            ext:deviceblock#CArea
!!REDIRECT CPerim           ext:deviceblock#CPerim

!! 032117
!!KEYWORD
ext:deviceblock
!!TITLE
Extraction System: Device Definition Block
!!HTML
    Physical characteristics of devices which are candidates for
    extraction are specified in device blocks in the <a
    href="techfile">technology file</a>.  The device blocks are
    located in the technology file after the physical layer
    definitions.  These specifications enable automated extraction of
    circuits from physical layouts.

    <p>
    Devices are specified in the technology file through a block of
    lines keyed by the word "<tt>Device</tt>" and ending with
    "<tt>End</tt>".  An example is below:

    <blockquote>
    <pre>
      Device
      Name res
      Prefix R_
      Body R2 
      Contact + M2 I1B&R2
      Contact - M2 I1B&R2 ...
      Permute + -   
      Depth 1
      Merge S
      Measure Resistance Resistance
      LVS Resistance
      Spice %n% %c%+ %c%- %ms3%Resistance
      Cmput Resistor %e%, resistance = %ms3%Resistance
      Value %m%Resistance
      End
    </pre>
    </blockquote>

    <p>
    There can be no text in the line following <tt>Device</tt>.
    The block must terminate with <tt>End</tt>.

    <p>
    The device block in the example specifies a resistor device:
    <ul>
    <li>The resistor body consists of areas of layer <tt>R2</tt>.
    <li>Contact is made to conductor <tt>M2</tt> through a region of
      <tt>I1B</tt> (which represents a physical via).
    <li>The resistor can have arbitrarily many contacts (<tt>...</tt>
      given in second <tt>Contact</tt> line).  This will be decomposed
      into a network of two-terminal resistors by the extraction system.
    <li>The (two) terminals are interchangeable (<tt>Permute</tt> given).
    <li>Parts of the resistor can be found in subcells (<tt>Depth</tt> of 1).
    <li>Two-terminal resistors in series and in parallel will be merged
     iteratively into simplified networks.
    <li>The resistance of the structure will be measured and reported.
    </ul>

    <p>
    The keywords are described in detail below.

    <a name="Template"></a>
    <dl>
    <dt><tt>Template</tt> <i>template_name</i> <i>argument</i> ...
    <dd>This will access the <a href="ext:devtmpl">device template</a>
    with the given <i>template_name</i>.  Text from the template will
    be inserted into the current device block, after macro, variable,
    and argument substitution.  For argument substitution, forms like
    "<tt>$(_</tt><i>N</i><tt>)</tt>", with <i>N</i> being a positive
    integer, will be replaced by the <i>N</i>'th argument, with any
    quote marks stripped.  If an argument contains white space or
    other strange characters, it should be double-quoted.

    <p>
    The template can provide all of the keyword text for the current
    device block, or additional keywords from the list below can be
    provided to supplement the template.  It may not be possible to
    redefine an alredy defined keyword however.
    </dl>

    <dl>
    <dt><tt>Name</tt> <i>device_name</i>
    <dd>The <i>device_name</i> names the device, which should match a
    device cell name.  The name can be that of a <a
    href="xic:pcells">parameterized cell</a>, or a regular device cell
    from the <a href="devlib">device library</a> (<tt>device.lib</tt>)
    file, or a device cell from some other source.  This line is
    mandatory.

    <p>
    Two or more device blocks can use the same name if they have
    different <tt>Prefix</tt> entries.  This might be useful, for
    example, if there are two resistor layers in a process.  A device
    block would be needed to describe resistors on each layer.
    </dl>

    <dl>
    <dt><tt>Prefix</tt> <i>prefix</i>
    <dd>This is a prefix that is prepended when formulating the name
    for the device used in output.  This is optional, as a prefix can
    also be defined in the output formatting.  The first letter of the
    prefix should match the expectations of the SPICE simulator or
    other tools to be used.  If two or more device definition blocks
    have the same <tt>Name</tt> field, they must have different
    <tt>Prefix</tt> fields.  Further, each definition must have
    identical contact and bulk contact names, and order, and identical
    permutable contact names.
    </dl>

    <dl>
    <dt><tt>Body</tt> <i>expression</i>
    <dd>The <tt>Body</tt> keyword specifies the "core" feature of the
    device.  The specification is a <a href="layer_exp">layer
    expression</a>.  Each individual region where the expression is
    true defines a potential instance of the device.  This keyword is
    mandatory.
    </dl>

    <dl>
    <dt><tt>Contact</tt> <i>name layer expression</i> [<tt>...</tt>]
    <dd>For each contact of the device, there should be a
    <tt>Contact</tt> line.  The first token following <tt>Contact</tt>
    is a name for the contact, which should match the corresponding
    name used in the node property of the device in the
    <tt>device library</tt> file.  The second token is a layer name of a
    conductor layer which is used to contact the device.  The
    remainder is an expression which identifies the contact area.  The
    contact is identified as a region inside the device bounding box
    where the expression is true.  Multiple contacts using the same
    expression can be given, and each will select a different region. 
    The device bounding box is the bounding box of the body area,
    after the <tt>Bloat</tt> operation (see below).

    <p>
    If the <tt>Contact</tt> line ends with "<tt>...</tt>" (three
    periods) there can be more than one of that type of contact. 
    Ordinarily, there is a one-to-one correspondence between contacts
    specified and contacts in the device instance.  With the ellipses,
    device instances will include as many of that type of contact as
    can be found.  Thus, such devices no longer have a fixed number of
    contacts.  The ellipses can <i>not</i> appear in the first
    <tt>Contact</tt> line, but may appear in the second and/or
    subsequent <tt>Contact</tt> lines.

    <p>
    The ellipses feature presently supports multi-contact resistors. 
    A multi-contact resistor is replaced internally by a network of
    two-terminal resistors, which are used in the netlist output.  To
    enable multi-contact resistor support, the second contact
    specification in the resistor device block should end with
    "<tt>...</tt>", for example
    <blockquote><tt>
    Contact + M2 I1B&R2<br>
    Contact - M2 I1B&R2 ...</tt>
    </blockquote>

    <p>
    This specifies that as many of the second type of contact as can
    be found will be extracted.  Without the "<tt>...</tt>" only two
    contacts would be extracted.  The ellipses can not occur on the
    first contact line, but may occur on other lines, and may occur
    more than once, though no standard devices use this feature
    presently.  In general, this implements device extraction with
    arbitrary numbers of certain contacts.

    <p>
    Internally, a conductivity matrix is computed from the body and
    contact geometry, and this is used to compute the effective values
    of the two-terminal resistors that are used to implement the
    multi-contact resistor.  Resistors that would have very high
    values (larger than 100 times the smallest value) are not added,
    so that linear multi-contact resistors decompose as one would
    expect.

    <p>
    The decomposition occurs before the serial/parallel merging, so
    that the components of the decomposition are candidates for
    merging, if merging is enabled (see the <tt>Merge</tt> keyword
    below).
    </dl>

    <dl>
    <dt><tt>BulkContact</tt> <i>tname</i> <i>level</i> [<i>name</i> |
    <i>bloat</i> <i>layername</i> <i>expression</i>]<dd>
    This is a special form of a contact specification that applies to
    well and substrate connections, which may be treated differently than
    other contacts.  The <i>tname</i> is the contact name.  This is
    followed by an integer <i>level</i> which determines how the contact
    is handled during extraction.  Possible <i>level</i> values are as
    follows.  The remaining entries in the line depend on the <i>level</i>.
    There can be at most one <tt>BulkContact</tt> line in the device
    description.

    <dl>
    <dt>0<dd>
    Check in cell during device extraction.  This requires that a
    <i>bloat</i> value, <i>layername</i>, and <i>expression</i> follow
    the level number.  The body bounding box is (logically) bloated by
    the <i>bloat</i> value given (in microns).  Within the bloated
    area, a region where the <i>expression</i> (a layer expression) is
    dark, that is connected to the conductor <i>layername</i> must
    exist.  If there are multiple areas, the one closest to the
    bounding box center is taken as the contact area.  If there is no
    such area, the device will not be recognized.  The search
    hierarchy depth for the contact is to all levels.
    </dl>

    <dl>
    <dt>1<dd>
    Ignore this in extraction.  The level value must be followed by
    a <i>name</i>, which is the name of a global net.  The contact will
    be assumed to connect to that global net.  Use this mode only if it
    is absolutely certain that physically the bulk contact is connected
    properly, as this mode does no checking.  Use this at your own risk.
    </dl>

    <dl>
    <dt>2<dd>
    Check deferred.  This requires that a <i>bloat</i> value,
    <i>layername</i>, and <i>expression</i> follow the level number. 
    During extraction and association, if the contact can't be
    resolved within its containing cell, <i>level</i>=2 contacts are
    ignored as for <i>level</i>=1.

    <p>
    During <a href="xic:lvs">LVS</a>, a special "stamping" test is run
    over the complete hierarchy, and any errors found are reported
    with the top-level cell.  This test searches for unresloved
    <i>level</i>=2 contacts in the hierarchy.  It will try and resolve
    the contact at the top level (thus taking account of all geometry
    in the hierarchy).  If unsuccessful, the device location as
    reflected to the top level coordinates will be listed in the
    stamping report, and LVS will not succeed.
    </dl>
    </dl>

    <dl>
    <dt><tt>Bloat</tt> <i>increment</i>
    <dd>This will expand the body bounding box by <i>increment</i> (in
    microns) for the purpose of identifying contacts.  For example, a
    MOS transistor body is the intersection of CAA and CPG.  The
    source and drain contacts can be specified as the regions of the
    body bounding box after a bloat that cover CAA but not CPG.
    </dl>

    <dl>
    <dt><tt>ContactsOverlap</tt>
    <dd>Ordinarily, device contact areas can not overlap.  The
    extracted contact areas are clipped against one another to enforce
    this.  Giving this keyword allows overlap, which is necessary for
    some vertical device structures.
    </dl>

    <dl>
    <dt><tt>Permute</tt> <i>name1 name2</i>
    <dd>The names are the names of contacts that can be permuted to
    enable association when comparing to a schematic.  This applies to
    devices such as resistors, and to the source and drain of MOS
    devices, or to any device containing a contact pair that are
    geometrically identical to the extractor.  There must be exactly
    two names following "Permute", and only one <tt>Permute</tt> line
    is allowed.
    </dl>

    <dl>
    <dt><tt>Depth</tt> <i>depth</i>
    <dd>The <i>depth</i> is the hierarchy depth extracted for the device,
    default is 0, meaning all device structure should appear is the
    current cell.  The value can be an integer, or 'a' to look at the
    full hierarchy.
    </dl>

    <dl>
    <dt><tt>Find</tt> [<i>device_name</i>][.<i>prefix</i>]
    <dd>This will cause a device with the given name and prefix to be
    searched for in the current device's bounding area, and added to
    an internal list.  Any number of <tt>Find</tt> directives can be
    applied.  If two or more directives look for the same name/prefix,
    they will return different instances.  Currently, this is used
    only for identifying inductors in a mutual inductor device.
    </dl>

    <dl>
    <dt><tt>Merge</tt> [<i>arg</i>]</tt>
    <dd>This optional keyword specifies how to handle parallel and
    series connected instances of the device for parameter extraction. 
    There is an optional argument.  Merging implies that multiple
    devices are combined internally and reported as single devices in
    netlists and SPICE output.  If both parallel and series merging
    are enabled, the merging process is iterative, and will continue
    until no further merging is possible.

    <p>
    If no <tt>Merge</tt> keyword appears in the device block, no
    merging is done for that device.  Only the first two characters of
    the <i>arg</i> are tested, case insensitively, and any remaining
    characters are ignored.  Series merging will be enabled only for
    two-terminal devices that have the <tt>Permute</tt> keyword
    applied, i.e., typically resistors, capacitors, inductors.

    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th><i>arg</i></th><th>    Merge</th></tr>
    <tr><td>no <i>arg</i></td><td> parallel</td></tr>
    <tr><td>"s"</td><td>           parallel and series</td></tr>
    <tr><td>"ns" or "sn"</td><td>  series</td></tr>
    <tr><td>unrecognized</td><td>  error</td></tr>
    </table>

    <p>
    Merging can also be controlled by the variables <a
    href="NoMergeParallel"><b>NoMergeParallel</b></a> and <a
    href="NoMergeSeries"><b>NoMergeSeries</b></a> which are booleans
    which can be set with the <a href="!set"><b>!set</b></a> command. 
    The variables suppress merging of the indicated kind, parallel or
    series, for all devices.

    <p>
    Merging can also be suppressed on an individual device basis by
    applying a <a href="physprops"><b>nomerge</b></a> property to
    an object that is used in the body of the device.  This property
    can be added with the <a href="xic:prpty"><b>Property
    Editor</b></a>.

    <p>
    Merging can lead to confusion, particularly when users are
    experimenting.  Unless the aggregate has external connections, it
    is likely to be merged down to a single device in ways which may
    be surprising.

    <p>
    Example:<br>
    The <b>Show computed parameters of selected device</b> option of
    the <b>Enable Select</b> command mode in the <a
    href="xic:dvsel"><b>Show/Select Devices</b></a> panel from the
    <b>Device Selection</b> button in the <b>Extract Menu</b> is
    useful for displaying the values of extracted devices, and shows
    the effect of merging.  When resistor networks are merged,
    <i>Xic</i> will merge series resistors if there are no other
    connections at the common node.  Sometimes, this will lead to a
    configuration that is not intended or desired, for example if the
    desired end terminal of the network is connected to two resistors
    only, that node might be merged away.  <i>Xic</i> will merge
    devices arbitrarily if there is insufficient information available
    to uniquely define how merging is to be done.

    <p>
    One way to prevent this from happening is to use temporary virtual
    terminals:

    <ol>
    <li>Switch to electrical mode.
    <li>Enter the <a href="xic:subct"><b>subct</b></a> side menu command.
    <li>Press <b>Ctrl</b> and click anywhere in the drawing window.  A
    terminal marker will appear.  Dismiss the <b>Terminal Edit</b>
    pop-up, and switch back to physcal mode.
    <li>Press the <b>Setup</b> button in the <b>Extract Menu</b> to
    obtain the <a href="xic:excfg"><b>Extraction Setup</b></a> panel. 
    Press <a href="xic:tedit"><b>Edit Terminals</b></a> in the panel. 
    A terminal mark should appear to the lower left of the bounding
    box of the current cell.
    <li>Move the terminal mark to the desired network end terminal
    metal.
    </ol>

    <p>
    This node now has a (phony) terminal, so it won't be merged. 
    Don't forget to go back and delete the terminal when done.

    <p>
    The way the parameters are computed upon merging is determined by
    the <tt>Measure</tt> keyword (see below).  Series merging is
    applicable to resistor, capacitor, and inductor-type devices.

    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th>Measure Keyword</th><th>Parallel Action</th>
      <th>Series Action</th></tr>
    <tr><td><tt>BodyArea</tt></td><td>Sum</td><td>Sum</td></tr>
    <tr><td><tt>BodyPerim</tt></td><td>Sum</td><td>Sum</td></tr>
    <tr><td><tt>BodyMinDimen</tt></td><td>Min<sup>1</sup></td><td>Min</td></tr>
    <tr><td><tt>CArea</tt></td><td>Sum<sup>2</sup></td><td>-</td></tr>
    <tr><td><tt>CPerim</tt></td><td>Sum<sup>2</sup></td><td>-</td></tr>
    <tr><td><tt>CWidth</tt></td><td>-</td><td>-</td></tr>
    <tr><td><tt>CNWidth</tt></td><td>-</td><td>-</td></tr>
    <tr><td><tt>CBWidth</tt></td><td>Average</td><td>Sum</td></tr>
    <tr><td><tt>CBNWidth</tt></td><td>Sum</td><td>Average</td></tr>
    <tr><td><tt>Resistance</tt></td><td>Parallel Resistance</td>
     <td>Sum</td></tr>
    <tr><td><tt>Inductance</tt></td><td>Parallel Resistance</td>
     <td>Sum</td></tr>
    <tr><td><tt>Mutual_Inductance</tt></td><td>not implemented</td>
     <td>not implemented</td></tr>
    <tr><td><tt>Capacitance</tt></td><td>Sum</td><td>Parallel Resistance</td>
     </tr>
    </table>
    <b>Notes</b>:<br>
    1) Although the minimum of the multiple sections is used, for MOS
       devices each value is typically the same.<br>
    2) if devices of the same type share a permutable contact,
      the contact area and perimeter are divided equally between the
      devices.<br>
    The fields with '-' are invalid, and return 0 if accessed.<br>
    </blockquote>

    <p>
    The "<tt>Merge M</tt>" feature of earlier releases is no longer
    supported.  This would average the parameters of
    parallel-connected MOS devices, and automatically add the
    "<tt>M=</tt>" (multiplier) parameter to the SPICE output line. 
    Now, the merging behavior is as described above, and no multiplier
    is automatically added to the SPICE line.  The <tt>Sections</tt>
    measurement keyword (below) can be used to explicitly format the
    SPICE output to use the multiplier parameter, if desired.
    </dl>

    <a name="Measure"></a>
    <dl>
    <dt><tt>Measure</tt> <i>mname expression</i> [<i>precision</i>]
    <dd>The <tt>Measure</tt> keyword allows geometrical information to
    be extracted from the device, which is listed with the <a
    href="xic:pnet"><b>Dump Phys Netlist</b></a> command and used in
    other commands in the <a href="xic:extmenu"><b>Extract Menu</b></a>.
      <dl>
      <dt><i>mname</i>
      <dd>A name for the parameter to be extracted.  This is arbitrary
      but should be unique for the device.  This is the name by which
      the particular measurement result is referenced.
      </dl>
      <dl>
      <dt><i>precision</i>
      <dd>The optional <i>precision</i> is a non-negative integer
      which applies to comparing electrical and physical values in
      layout vs.  schematic (LVS) testing.  The default is 2 if not
      given.  If the value given is <i>n</i>, then the two values must
      agree to a part in 10<sup><i>n</i></sup>, e.g., to within 1
      percent for the default value of 2.
      </dl>
      <dl>
      <dt><i>expression</i>
      <dd>The <i>expression</i> consists of an expression in the
      format recognized in scripts, where the variables are either the
      names from previously defined <tt>Measure</tt> lines (in the
      current device block) or the keywords below.  The expression is
      evaluated during extraction yielding the result of the
      measurement.  The math functions are available in the
      <i>expression</i> as are all of the math operators.  There can
      be arbitrarily many <tt>Measure</tt> lines.
      </dl>

      <p>
      Below is a list of the "primitive" measurement tokens which can
      appear in the measurement expressions.  In several cases, the
      token consists of three fields, separated by '.'.  The additional
      fields supply modifiers to the primitive measurement indicated
      by the token name (the first field).

      <p>
      The basic unit of length is one micron.
        <a name="Section"></a>
        <dl>
        <dt><tt>Sections</tt>
        <dd>This returns the number of components of the device, which
        will be greater than one if the device is an aggregate of
        several series or parallel-connected devices (<tt>Merge</tt>
        enabled).
        </dl>

        <a name="BodyArea"></a>
        <dl>
        <dt><tt>BodyArea</tt>
        <dd>The area of the region where the <tt>Body</tt> expression
        is true.
        </dl>

        <a name="BodyPerim"></a>
        <dl>
        <dt><tt>BodyPerim</tt>
        <dd>The perimeter length where the <tt>Body</tt> expression is true.
        </dl>

        <a name="BodyMinDimen"></a>
        <dl>
        <dt><tt>BodyMinDimen</tt>
        <dd>This is a minimum dimension computed using the body
        geometry.  There are several ways that this can be computed,
        depending on other keywords and the device type.  The default
        algorithm first decomposes the body shape into a trapezoid
        list.  the mid-height width and height of each trapezoid is
        added to a histogram, weighted by the other value.  For
        example, width=2, height=3 would add to the histogram 2 with
        weight 3, and 3 with weight 2.  When done, the value with the
        largest weight will be taken as the <tt>BodyMinDimen</tt>.  If
        a tie, the smaller value is used.  This is effective on
        structures where a "line width" is an applicable concept.

        <p>
        However, if the <tt>SimpleMinDimen</tt> keyword is found, the
        <tt>BodyMinDimen</tt> will instead be the smallest width or
        height found.  This was the default algorithm in releases
        prior to 3.1.6.  The result of the simple algorithm is less
        useful, as, for example for a serpentine structure, it could
        be the line width, or the spacing.

        <p>
        There is yet another <tt>BodyMinDimen</tt> algorithm,
        associated with MOS devices and indicated by the
        <tt>ContactMinDimen</tt> keyword.  With this keyword, and if a
        <tt>Permutes</tt> contact list is given, the
        <tt>BodyMinWidth</tt> will be the distance between the inside
        edges of the two contacts in the <tt>Permutes</tt> list.  This
        is the default for recognized MOS devices, i.e., devices whose
        prefixes start with 'm' or 'M', and overrides
        <tt>SimpleMinDimen</tt> if both are applicable.

        <p>
        For MOS devices, where it is assumed that the gate length
        (source to drain) is constant, i.e., the gate is a strip that
        can meander arbitrarily, even forming a loop, for device size
        measurements, one can specify
        <blockquote>
        <i>length</i> = <tt>BodyMinDimen</tt><br>
        <i>width</i> = <tt>BodyArea</tt>/<tt>BodyMinDimen</tt>
        </blockquote>
        </dl>
        
        <p>
        The next four keywords have two optional trailing fields.  The
        value in each field must be a single digit.  The digit
        corresponds to a <tt>Contact</tt>, in order of appearance in
        the device block, starting with 0.  If one or both fields is
        left off, the effective entry is 0.  If both contacts are
        given the same digit, the second one is incremented.  Thus,
        leaving off the trailing fields is equivalent to ".0.1".  If
        the indices don't point to an existing contact, or are not
        single digits, the measurement will fail.

        <p>
        The "body bounding box" is the rectangular region encompassing
        the <tt>Body</tt> objects, before any bloat.

        <a name="CWidth"></a>
        <dl>
        <dt><tt>CWidth</tt>[.<i>n1</i>.<i>n2</i>]
        <dd>The width of the first contact, along a line connecting the
        first contact with the second contact.
        </dl>

        <a name="CNWidth"></a>
        <dl>
        <dt><tt>CNWidth</tt>[.<i>n1</i>.<i>n2</i>]
        <dd>The width of the first contact, normal to the line connecting
        the first contact to the second contact, measured at the contact
        bounding box midpoint.
        </dl>

        <a name="CBWidth"></a>
        <dl>
        <dt><tt>CBWidth</tt>[.<i>n1</i>.<i>n2</i>]
        <dd>The width between the first contact and the second contact, which
        lies over the body bounding box.
        </dl>

        <a name="CBNWidth"></a>
        <dl>
        <dt><tt>CBNWidth</tt>[.<i>n1</i>.<i>n2</i>]
        <dd>The length of the line normal to the line between the first
        contact and second contact, over the body bounding box,
        passing through the center of the body bounding box.
        </dl>

        <img src="devmeas.gif"><br>
        <p>
        Example:
        <blockquote><tt>
        Contact s CAA CAA & !CPG<br>
        Contact d CAA CAA & !CPG<br>
        Contact g CPG CAA & CPG<br>
        Measure Length CBWidth.0.1 * 1e-6<br>
        Measure Width CBNWidth.0.1 * 1e-6<br>
        </tt></blockquote>

        <p>
        Note that the conversion to meters is included in the
        <tt>Measure</tt> lines in the example above.

        <p>
        The following two keywords contain two trailing fields, which
        are mandatory.  The first field contains a contact index as
        above.  The second field contains the name of a layer.

        <a name="CArea"></a>
        <dl>
        <dt><tt>CArea</tt>.<i>n1</i>.<i>lname</i>
        <dd>Construct a single polygon from the connected objects on
        the named layer, one of which intersects the bounding box of
        the given contact.  The area of the polygon is returned.  Note
        that the constructed polygon can extend outside of the
        device's bounding box.  If the device being measured is
        merged, then the result is the sum of the results from each
        component.
        </dl>

        <a name="CPerim"></a>
        <dl>
        <dt><tt>CPerim</tt>.<i>n1</i>.<i>lname</i>
        <dd>Measure the perimeter length of the polygon constructed as
        above.  If the device being measured is merged, then the
        result is the sum of the results from each component.
        </dl>

        <p>
        When measuring with CArea/CPerim (for MOS ad/as/pd/ps), there
        is a test to see whether the area intersects other device
        contacts from the same device type.  If a contact is shared
        between two devices, e.g., common active layer for two
        series-connected MOS devices, the following algorithm is
        invoked.

        <p>
        For the shared contact:
        <ol>
        <li>Compute the total contact area and perimeter for both devices.
        <li>Compute the area and perimeter for the contact area common to
        both devices.
        <li>Subtract 1/2 this value from the parameters computed in the
        first step.
        </ol>

        <p>
        This algorithm should work whether or not the devices are
        multi-component and merging is enabled.

        <p>
        Example:

        <blockquote><tt>
        Contact s CAA CAA & !CPG<br>
        Contact d CAA CAA & !CPG<br>
        Contact g CPG CAA & CPG<br>
        Measure AS CArea.0.CAA<br>
        Measure AD CArea.1.CAA<br>
        Measure PS CPerim.0.CAA<br>
        Measure PD CPerim.1.CAA<br>
        </tt></blockquote>

        <dl>
        <dt><tt>Resistance</tt>
        <dd>Extract the resistance value (see below).
        </dl>

        <dl>
        <dt><tt>Capacitance</tt>
        <dd>Extract the capacitance value.  The returned capacitance
        value is given by the <tt>BodyArea</tt> times the capacitance
        per unit area, plus the <tt>BodyPerim</tt> times the
        capacitance per unit length.  The capacitance values are
        specified in a <tt>Capacitance</tt> line in the layer block of
        one of the layers defining the device body, i.e., the layers
        mentioned in the <tt>Body</tt> line.  If no body layer
        contains a <tt>Capacitance</tt> specification, or if both
        parameters are zero, an error results.
        </dl>

        <dl>
        <dt><tt>Inductance</tt>
        <dd>Extract the inductance value (see below).
        </dl>

        <dl>
        <dt><tt>Mutual_Inductance</tt>
        <dd>Extract the mutual inductance value.
        This is not yet implemented.
        </dl>
    </dl>

    The internal device definition structure contains a flag that if
    set causes the device to be treated as a MOS transistor.  There
    are a few MOS-specific tests and operations found in the
    extraction system, which are enabled by the flag.  By default, the
    flag is set if the device <tt>Prefix</tt> starts with 'm' or 'M'.

    <p>
    There are also flags that are set if the device is determined to be
    n-type or p-type.  Presently, we only set these for MOS devices.
    By default, if the device name begins with 'p' or 'P', the device is
    assumed to be p-type, otherwise it is taken as n-type.

    <dl>
    <dt><tt>NotMOS</tt><dd>
    If given, the flag that indicates that the device is a MOS
    transistor will not be set, as it would normally be if the
    <tt>Prefix</tt> starts with 'm' or 'M'.
    </dl>

    <dl>
    <dt><tt>MOS</tt><dd>
    If this keyword is given, the flag indicating that the device is a
    MOS transistor will be set.  This overrides <tt>NotMOS</tt>.
    </dl>

    <dl>
    <dt><tt>NMOS</tt><dd>
    Flags will be set to indicate that the device is an n-type MOS
    transistor.
    </dl>

    <dl>
    <dt><tt>PMOS</tt><dd>
    Flags will be set to indicate that the device is a p-type MOS
    transistor.
    </dl>

    <dl>
    <dt><tt>Ntype</tt><dd>
    Flags will be set to indicate that the device is n-type.  This
    is meaningful only for MOS transistors at present.
    </dl>

    <dl>
    <dt><tt>Ptype</tt><dd>
    Flags will be set to indicate that the device is p-type.  This
    is meaningful only for MOS transistors at present.
    </dl>

    <a name="SimpleMinDimen"></a>
    <dl>
    <dt><tt>SimpleMinDimen</tt>
    <dd>
    When given, and the <tt>ContactMinDimen</tt> is not applied or not
    applicable, the <tt>BodyMinDimen</tt> measurement will be the
    smallest trapezoid width or height found in the decomposition of
    the body shape.  This was the default algorithm in releases prior
    to 3.1.6, but a better algorithm is the new default.
    </dl>

    <a name="ContactMinDimen"></a>
    <dl>
    <dt><tt>ContactMinDimen</tt> [<tt>y/n</tt>]
    <dd>
    This keyword has a dual purpose:  to impose a MOS-like
    <tt>BodyMinDimen</tt> computation on other device types, and
    to turn off the use of this algorithm in MOS devices, which
    use this algorithm by default.

    <p>
    Recognized MOS devices are devices that have the internal flag
    set as mentioned above.  The device must also have a <tt>Permutes</tt>
    list for this algorithm to apply.  Most MOS devices have permutable
    source and drain contacts.

    <p>
    In recognized MOS devices with permutes, the default
    <tt>BodyMinDimen</tt> calculation is to set this to the distance
    between the inside edges of the two contacts listed in the
    <tt>Permutes</tt> list.  Thus, the <tt>BodyMinDimen</tt> will
    always be the device length (source/drain spacing) even if the
    source-drain spacing is larger than the device width.  The simple
    "line width" algorithm normally applied for the
    <tt>BodyMinDimen</tt> would be ambiguous as to whether the
    <tt>BodyMinDimen</tt> is the device length or width.

    <p>
    If <tt>ContactMinDimen n</tt> is given for a recognized MOS
    device, the line width algorithm will be used.  The "<tt>n</tt>"
    can actually be one of many tokens that indicate negativity, such
    as "<tt>no</tt>", "<tt>false</tt>", "<tt>off</tt>", "<tt>0</tt>",
    etc., case insensitive, but the token must appear.

    <p>
    For devices that are not recognized MOS devices, the line
    width <tt>BodyMinDimen</tt> algorithm is used by default. 
    However, if <tt>ContactMinDimen y</tt> is given, and the
    device has a <tt>Permutes</tt> list, the <tt>BodyMinDimen</tt>
    will be computed as for MOS devices.  The "<tt>y</tt>" can
    actually be missing, or can be one of many possible tokens
    that indicate truth, such as "<tt>yes</tt>", "<tt>true</tt>",
    "<tt>on</tt>", "<tt>1</tt>", etc., case insensitive.
    </dl>

    <dl>
    <dt><tt>LVS</tt> <i>measure_expr</i> [<i>spice_name</i>]
    <dd>This keyword instructs <i>Xic</i> to perform a parameter
    comparison as part of LVS.  The <i>measure_expr</i> is either one
    of the names used for a <tt>Measure</tt> statement in the device
    block, or a single-quoted expression involving constants and names
    from <tt>Measure</tt> statements.  The <i>spice_name</i>, if
    given, is the token used in SPICE element lines to designate the
    parameter, e.g., "l", "w", "area".  This can be blank if comparing
    to an element value which is given as a leading number, i.e.,
    resistance, capacitance, etc.  The <tt>LVS</tt> directives must
    appear after the referenced <tt>Measure</tt> line.

    <p>
    Examples:
    <blockquote><tt>
    Measure Area BodyArea*1e-12<br>
    LVS Area area<br>
    </tt></blockquote>

    <p>
    <blockquote><tt>
    Measure Resistance Resistance<br>
    LVS Resistance<br>
    </tt></blockquote>
    </dl>

    Any number of <b>LVS</b> lines can appear in a device block.

    <dl>
    <dt><tt>Spice</tt> <i>specification_args</i>
    <dd>The <tt>Spice</tt> keyword specifies the format for the SPICE
    output part of the listing from the <b>Dump Phys Netlist</b>
    command in the <b>Extract Menu</b>.  The specification is copied
    verbatim, except for the following substitutions:
      <dl>
      <dt><tt>\n</tt>
      <dd>The character sequence '\n' is replaced by a newline in the
      expanded text.  Note that the next token should probably begin
      with the SPICE continuation character '+' for the SPICE output
      to be interpreted correctly.
      </dl>

      <dl>
      <dt><tt>\t</tt>
      <dd>The character sequence '\t' is replaced by a tab character.
      </dl>

      <dl>
      <dt><tt>%c%</tt><i>cname</i>
      <dd>The <i>cname</i> is a contact name (from a <tt>Contact</tt>
      line).  This token is replaced with the group number of the
      contact.
      </dl>

      <dl>
      <dt><tt>%m[g|s[<i>N</i>]|f[<i>N</i>]|e[<i>N</i>]]%</tt><i>mname</i>
      <dd>The <i>mname</i> is a name from a <tt>Measure</tt> line.  The
      token is replaced with the result of that measurement.
      One of the characters s, g, f, e can follow the 'm'.  The s, f, e
      can be followed by an optional digit.  These select the format of
      the printed result.

        <dl>
        <dt>g<dd>Use "best" numeric format (the default if no modifier given)
        </dl>

        <dl>
        <dt>s<i>N</i><dd>Use SPICE abbreviations, with <i>N</i> decimal places
        </dl>

        <dl>
        <dt>f<i>N</i><dd>Use fixed point notation, with <i>N</i> decimal places
        </dl>

        <dl>
        <dt>e<i>N</i><dd>Use exponential notation, with <i>N</i> decimal places
        </dl>

        If <i>N</i> is not given, the default is 5 digits.
      </dl>

      <p>
      Above, <i>cname</i> and <i>mname</i> can be followed directly by
      '%' and other text, for a concatenation function.  For example
      "<tt>L=%m%Length%u</tt>" might be replaced with "<tt>L=.8u</tt>".

      <dl>
      <dt><tt>%n%</tt>
      <dd>This token is replaced with a name for the device, which
      consists of the <tt>Prefix</tt> (if given) followed by an index
      count for the device type.
      </dl>

      <dl>
      <dt><tt>%p</tt> <i>lname</i> <i>pnum</i><tt>%</tt>
      <dd>This token is replaced by the text of a physical property. 
      The <i>lname</i> is the name of a layer, and space after the 'p'
      is optional.  The <i>pnum</i> is a non-negative integer.  Each
      of the objects on <i>lname</i> that intersect the device
      bounding box is checked for a property with number <i>pnum</i>. 
      The string of the first such property found is used.  This
      enables property text to appear in device output, in particular
      it provides a means to coerce a value or other parameter.
      </dl>

      <dl>
      <dt><tt>%e%</tt>
      <dd>If the electrical dual of the physical device is known, the
      token is replaced by the name of the electrical device.  If no
      dual is associated, the behavior is the same as <tt>%n%</tt>
      </dl>

      <dl>
      <dt><tt>%f%</tt>
      <dd>The substitution <tt>%f%</tt> is equivalent to <tt>%e%</tt>,
      except that if the dual device is unknown, the token is simply
      ignored.
      </dl>

      Each of the substitution tokens can take an optional integer
      after the first %, which indicates that the token refers to the
      device in the n'th <tt>Find</tt> line (0 is the same as no
      integer).

      <p>
      Example:

      <blockquote><tt>
      Device<br>
      Name mut<br>
      Prefix K<br>
      ...<br>
      Find ind<br>
      Find ind<br>
      Spice %n% %1n% %2n% ...<br>
      </tt></blockquote><br>

      The <tt>Spice</tt> line prints the name of the mut device,
      followed by the names of the two inductors

      <dl>
      <dt><tt>%model%</tt>
      <dd>Replaced by contents of the <tt>Model</tt> line (see below).
      </dl>

      <dl>
      <dt><tt>%value%</tt>
      <dd>Replaced by contents of the <tt>Value</tt> line (see below).
      </dl>

      <dl>
      <dt><tt>%param% or %initc%</tt>
      <dd>Replaced by contents of the <tt>Param</tt> line (see below).
      </dl>

     <p>
     The <tt>Spice</tt> line is used in <a href="xic:pnet"><b>Dump
     Phys Netlist</b></a> output and internally in the <a
     href="xic:exset"><b>Source Physical</b></a> commands.
    </dl>

    <dl>
    <dt><tt>Cmput</tt> <i>specification_args</i>
    <dd>This specifies the format used in printing the device
    parameters from the <b>Show computed parameters of selected
    device</b> option of the <b>Enable Select</b> command mode in the
    <a href="xic:dvsel"><b>Show/Select Devices</b></a> panel.  The
    substitutions are exactly as those of the <tt>Spice</tt> keyword. 
    For example:
    <blockquote>
    <tt>Device</tt><br>
    <tt>Name res</tt><br>
    ...<br>
    <tt>Measure Resistance Resistance</tt><br>
    <tt>Cmput Resistance = %m%Resistance ohms</tt><br>
    <tt>End</tt><br>
    </blockquote>
    </dl>

    <dl>
    <dt><tt>Model</tt> <i>specification_args</i>
    <dt><tt>Value</tt> <i>specification_args</i>
    <dt><tt>Param</tt> <i>specification_args</i>
    <dd>These keywords specify a format string to use when creating
    "property strings" from the extracted parameters of a physical
    device, to be used for comparison or updating the properties of
    the corresponding electrical device.  These are used in the <a
    href="xic:exset"><b>Source Physical</b></a>command, and in the
    <b>Show elec/phys comparison of selected devices</b> option of the
    <b>Enable Select</b> mode in the <a
    href="xic:dvsel"><b>Show/Select Devices</b></a> panel.  This panel
    is brought up by the <b>Device Selections</b> button in the
    <b>Extract Menu</b>.

    <p>
    The format is the same as is described for the <tt>Spice</tt>
    line, however the escapes <tt>%model%</tt>, <tt>%value%</tt>, and
    <tt>%param%</tt> are not recognized.
    </dl>

    <p>
    The <tt>Set</tt> <i>varname</i> = <i>something</i> construct in
    the technology file can apply to lines in device blocks, however
    the <tt>Set</tt> keyword must appear outside and before the block. 
    Device block lines can contain <tt>$(</tt><i>varname</i><tt>)</tt>
    tokens, which are replaced with <i>something</i> before the line
    is parsed.

    <p>
    The format specifications for the <tt>Spice</tt>, <tt>Cmput</tt>,
    etc.  lines can contain the <tt>eval(...)</tt> construct.  The
    argument to <tt>eval</tt> is evaluated as a mathematical
    expression, and the result replaces the entire construct.  Unlike
    elsewhere in the technology file, in these lines this construct is
    evaluated when the line is used, and not when the technology file
    is read.

    <p>
    The extraction mechanism can be tested with the <a
    href="!find"><b>!find</b></a> command, or with the device listing
    capability in the <a href="xic:dvsel"><b>Show/Select
    Devices</b></a> panel from the <b>Device Selections</b> button in
    the <b>Extract Menu</b>.

    <p>
    <i>Xic</i> contains functionality for accurately calculating
    resistor values of arbitrarily shaped resistors.  Resistance
    extraction is accomplished by dividing the resistor logically into
    a regular grid.  The center of each grid is a "node" that is
    connected by resistance to adjacent nodes.  Thus, the problem
    becomes one of solving a large lumped resistor mesh.

    <p>
    Best accuracy is obtained when the grid falls on all the resistor
    and contact boundaries.  It is not possible to find such a grid in
    general, however if a layout grid is used and all corners are
    on-grid, and all edges are Manhattan, then tiling will be
    possible.  It may be the case that tiling is possible, but the
    tile is so small that the computation time is unacceptable.

    <p>
    For structures that can't be tiled efficiently, a set of
    edge-dependent heuristics is used to modify the matrix elements to
    account for the local area deficit or surplus.

    <p>
    There are four variables that can be used to configure the
    extractor.  The default values lean toward speed over accuracy. 
    By default, tiling is not attempted, and the grid spacing will be
    selected so that each resistor contains 1000 grid cells.

    <dl>
    <dt><b>RLSolverDelta</b><dd>
    <b>Value:</b> floating point >= 0.01.<br>
    It this value is set, the resistance/inductance extractor will
    assume this grid spacing, in microns.  The number of grid cells
    enclosed in the device will increase for physically larger
    devices, so that larger devices will take longer to extract.  If
    this variable is set, the other <b>RLSolver</b> variables are
    ignored.  Setting this variable may be appropriate if all
    resistors are "small" and dimensions conform to a layout grid.
    </dl>

    <dl>
    <dt><b>RLSolverTryTile</b><dd>
    <b>Value:</b> boolean.<br>
    If set, the extractor will attempt to use a grid that will fall on
    every edge of the device body and contacts.  The device and
    contact areas must be Manhattan for this to work.  If such a grid
    can be found, and the number of grid cells is a reasonable number,
    this will give the most accurate result.
    </dl>

    <dl>
    <dt><b>RLSolverGridPoints</b><dd>
    <b>Value:</b> integer 10 - 100000.<br>
    When not tiling (<b>RLSolverTryTile</b> is not set), this sets the
    number of grid points used for resistance/inductance extraction. 
    This number will be the same for all device structures, so that
    computation time per device is nearly constant.  Higher numbers
    give better accuracy but take longer.  The value used if not set
    is 1000.
    </dl>

    <dl>
    <dt><b>RLSolverMaxPoints</b><dd>
    <b>Value:</b> integer 1000 - 100000.<br>
    When tiling (<b>RLSolverTryTile</b> is set), the maximum number of
    grid cells is limited to this value.  If the tile is too small, it
    will be increased in size to keep the count below this value, in
    which case the tiling will not have succeeded so there may be a
    small loss of accuracy.  Using a large number of grid points can
    take a long time.  The value used if not set is 50,000.
    </dl>

    <p>
    The resistor solver is accessed through the device block
    <tt>Measure</tt> keyword "<tt>Resistance</tt>", for example:

    <blockquote>
    <tt>Device</tt><br>
    <tt>Name res</tt><br>
     ...<br>
    <tt>Measure value Resistance</tt><br>
    <tt>End</tt><br>
    </blockquote>

    <p>
    By including the "<tt>Measure value Resistance</tt>", all
    resistances may be extracted and the values will appear in the
    output of the <b>Dump Phys Netlist</b> command.  When computing
    the resistance, the layers in the <tt>Body</tt> specification are
    checked for an <tt>Rsh</tt> specification, or alternatively a
    <tt>Rho</tt> or <tt>Sigma</tt> specification along with a
    <tt>Thickness</tt> specification.  If the resistance parameters
    are not found, an error results.  Unlike releases prior to
    3.1.6, there is no default resistance.

    <p>
    <i>Xic</i> also contains functionality to measure conductor
    inductance values.  Inductance is extracted using an algorithm
    similar to resistance, i.e., square counting, but other factors
    are included to enhance accuracy.  This assumes "microstripline"
    geometry, meaning a conductor separated from a ground plane by a
    uniform dielectric.  The <tt>Measure</tt> keyword is
    "<tt>Inductance</tt>".  The inductance per square is derived from
    the microstrip parameters for the layer, as provided with the <a
    href="Tline"><tt>Tline</tt></a> specification.  A <tt>Tline</tt>
    specification must be given to one of the device body layers, or
    an error results.

    <p>
    Presently, the recommended way to set up inductors for extraction
    is through the use of three additional layers.  These layers can
    have any name but will have the following names in this
    discussion:

    <dl>
    <dt>LB
    <dd>Used to outline the inductor, will surround the region of a
    conductor where inductance is to be measured.
    </dl>

    <dl>
    <dt>LC
    <dd>Identifies the inductor contacts (inside LB and on the
    conductor).
    </dl>

    <dl>
    <dt>LX
    <dd>Bisects the conductor into two areas to provide separate
    groups for the two contacts.
    </dl>

    <img src="indx.gif"><br>
    <p>
    These layers have been added to the <tt>xic_tech.hyp</tt> file
    provided.  The "<tt>Exclude LX</tt>" clause must be added to the
    <tt>Conductor</tt> specification of the conductors to be
    extracted.

!!SEEALSO
techfile

!! 032117
!!KEYWORD
ext:devtmpl
!!TITLE
Extraction System: Device Template
!!HTML
    A device template is a <a href="ext:deviceblock">device block</a>
    with special syntax that allows text substitution.  The <a
    href="Template"><tt>Template</tt></a> line in a device block will
    read the referenced template while performing the substitutions. 
    A template can be used to save common keywords associated with a
    class of device, for example MOS transistors, that may have
    several styles in a process,

    <p>
    The substitution text replaces forms like
    "<tt>$(_</tt><i>N</i><tt>)</tt>", where <i>N</i> is a positive
    integer.  This indicates that the text of the <i>N</i>'th argument
    in the <tt>Template</tt> line will replace this form.  Any macros
    or technology file variables found in the line will also be
    expanded at this time.

    <p>
    The first line of a device template consists of the keyword
    <tt>DeviceTemplate</tt>, followed by a name for the template.  The
    template name can be just about any text word, and is used to
    reference the template.  The final line of the template contains
    the keyword <tt>End</tt>.  Intervening lines are the same as
    device block lines, with substitution sequences where needed.  The
    <tt>Device</tt> keyword need not appear.

    <p>
    Device templates can bo defined in the technology file, or in a
    file named "<tt>device_templates</tt>" found in the current
    directory or <a href="LibPath">library path</a>.  A default
    <tt>device_templates</tt> file is provided in the <tt>startup</tt>
    directory in the installation area.  This contains two example
    templates:  <tt>NmosTemplate</tt> and <tt>PmosTemplate</tt>. 
    These provide generic recognition of MOS transistors.  When a
    technology file is written with the <a href="xic:updat"><b>Save
    Tech</b></a> button in the <b>Attributes Menu</b>, only the device
    templates originally read from the technology file will be
    included.  Device blocks will be written with the
    <tt>Template</tt> lines expanded.

    <p>
    Example:
    Here's part of a device template definition.
    <blockquote><tt>
    DeviceTemplate mostmpl<br>
    Name $(_1)<br>
    Prefix M<br>
    Body $(_2)<br>
    ...<br>
    End
    </tt></blockquote>

    <p>
    Here's a device block in the technology file.
    <blockquote><tt>
    Device<br>
    Template mostmpl nmos active_layer&poly_layer<br>
    End
    </tt></blockquote>

    <p>
    Here's the post-substitution device block.
    <blockquote><tt>
    Device<br>
    Name nmos<br>
    Prefix M<br>
    Body active_layer&poly_layer<br>
    ...<br>
    End
    </tt></blockquote>

!!SEEALSO
techfile

!! 062016
!!KEYWORD
ext:fmtlib
!!TITLE
Extraction System: Format Library File
!!HTML
    <i>Xic</i> provides a mechanism for user-specified formatting of
    <a href="xic:pnet">physical</a> and <a
    href="xic:enet">electrical</a> netlist output.
    Such formatting is generated by
    <a href="xicscript">scripts</a> found in a file named
    "<tt>xic_format_lib</tt>".  This file need not exist if user
    formatting is not required.

    <p>
    An example <tt>xic_format_lib</tt> file is included in the
    distributions.  This provides two examples each, for physical and
    electrical output.  In either case, the first example is the
    Cadence Design Exchange Format (DEF), which is an
    industry-standard ASCII netlist format.  The second format in each
    case is a simple example, not a "real" format.  The example
    library is found in the startup directory, and can be used as-is
    or as a starting point for customization.  The example format
    scripts include instructive comments.

    <p>
    The <tt>xic_format_lib</tt> file s searched for in the library <a
    href="xicpaths">search path</a>, and the first such file found
    will be used.

    <p>
    There are three types of script that can appear in the file: 
    those for generating netlists from physical data, those that
    generate netlists from electrical data, and those that format the
    output of LVS runs (this is not supported yet).

    <p>
    Blank lines, and lines that start with the '#' character, are
    ignored.  There are four keywords (outside of the scripts)
    that are recognized:
    <blockquote>
      <tt>PhysFormat</tt> <i>name</i><br>
      <tt>ElecFormat</tt> <i>name</i><br>
      <tt>LvsFormat</tt> <i>name</i><br>
      <tt>EndScript</tt>
    </blockquote>

    <p>
    One of the first three of these keywords and its argument should
    appear on its own line ahead of a script, and "<tt>EndScript</tt>"
    should appear on its own line following a script.  The <i>name</i>
    is the name of the format, which will appear on command or menu
    buttons or is given to script functions to indicate that the
    following script is to be used for formatting.  This should be a
    short alpha-numeric word or phrase, and must be unique among
    keywords of a given type.  If the <i>name</i> contains white
    space, it should be double-quoted.

    <p>
    The script lines can contain any of the script library functions
    and operators.  All local variables are static.  The script can
    call functions that have been previously defined in a regular
    <a href="scr:library">library file</a>.

    <p>
    When the script is executed:
    <ul>
    <li>The "standard output" is to the file being generated, and not
    to the console window as for normal execution.
    <li>The script will be called for each cell in the hierarchy, to
    a depth given in the invoking command.  On each call, the "current
    cell" is set to the cell being processed.
    </ul>

    <p>
    When the script is executing, the following predefined variables
    are available for use in the script.

    <blockquote>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><th>Name</th> <th>Type</th> <th>Description</th></tr>
    <tr><td><tt>_cellname</tt></td>  <td>string</td>
      <td>name of the cell being output</td></tr>
    <tr><td><tt>_viewname</tt></td>  <td>string</td>
      <td>"physical" or "electrical"</td></tr>
    <tr><td><tt>_techname</tt></td>  <td>string</td>
      <td><tt>TechnologyName</tt> value from technology file</td></tr>
    <tr><td><tt>_num_nets</tt></td>  <td>integer</td>
     <td>number of wire nets in cell</td></tr>
    <tr><td><tt>_mode</tt></td>      <td>integer</td>
     <td>0 if physical, 1 if electrical</td></tr>
    <tr><td><tt>_list_all</tt></td>  <td>integer</td>
     <td>1 if <b>list all cells</b> active, 0 otherwise</td></tr>
    <tr><td><tt>_bottom_up</tt></td> <td>integer</td>
     <td>1 if <b>list bottom-up</b> active, 0 otherwise</td></tr>
    <tr><td><tt>_show_geom</tt></td> <td>integer</td>
     <td>1 if <b>include geometry</b> active, 0 otherwise</td></tr>
    <tr><td><tt>_show_wire_cap</tt></td> <td>integer</td>
     <td>1 if <b>show wire cap</b> active, 0 otherwise</td></tr>
    <tr><td><tt>_ignore_labels</tt></td> <td>integer</td>
     <td>1 if <b>ignore labels</b> active, 0 otherwise</td></tr>
    </table>
    </blockquote>

    <p>
    The script will use functions that iterate through the cell and
    print the desired information in an order and format desired.  The
    function library is being expanded to provide flexibility.

!!SEEALSO
xic:extmenu

!!REDIRECT xic:viext    xic:excfg#viext
!!REDIRECT xic:group    xic:excfg#group
!!REDIRECT xic:nodes    xic:excfg#nodes
!!REDIRECT xic:tshow    xic:excfg#tshow
!!REDIRECT xic:tedit    xic:excfg#tedit
!!REDIRECT xic:tfind    xic:excfg#tfind

!! 103113
!!KEYWORD
xic:excfg
!!TITLE
Extraction Setup
!!HTML
    <img src="screenshots/exsetup1.png" align=right>

    <table border=0>
    <tr><td valign=top><b>jump to</b></td> <td>
    <a href="xic:excfg#viop"><b>The Views and Operations Page</b></a><br>
    <a href="xic:excfg#net"><b>The Net Config Page</b></a><br>
    &nbsp;&nbsp;<a href="xic:excfg#via"><b>Via Detection</b></a><br>
    &nbsp;&nbsp;<a href="xic:excfg#gplane"><b>Ground Plane Handling</b></a><br>
    <a href="xic:excfg#device"><b>The Device Config Page</b></a><br>
    <a href="xic:excfg#misc"><b>The Misc Config Page</b></a>
    </td></tr></table>

    <p>
    <b>Keyword</b>: <tt>excfg</tt>

    <p>
    The <b>Extraction Setup</b> panel appears in response to pressing
    the <b>Setup</b> button in the <b>Extract Menu</b>.  The panel has
    four tabbed pages:  <b>Views and Operations</b>, <b>Net and Cell
    Config</b>, <b>Device Config</b>, and <b>Misc Config</b>.  These
    will be described in the sections that follow.

    <p>
    Common to all pages are two buttons which will invalidate or
    initiate extraction.  This is usually done automatically -
    extraction is invalidated if the design changes somehow, and
    recomputed when needed.  The buttons can force recomputation which
    may be useful on occasion.

    <dl>
    <dt><b>Clear Extraction</b><dd>
    Pressing this button will clear the internal validation flags,
    which will cause <i>Xic</i> to recompute extraction when
    extraction results are next needed.  This is normally done
    automatically if the layout or schematic changes, or a setup
    variable is changed.
    </dl>

    <dl>
    <dt><b>Do Extraction</b><dd>
    Pressing this button will perform the full extraction and
    association, if necessary.  This is normally done automatically
    when needed within commands.  Once done, flags are set indicating
    the validity of the current extraction data structures, avoiding
    recomputation unless something changes, or <b>Clear Extraction</b>
    is pressed.
    </dl>

!! 110613
    <a name="viop"></a>
    <h2>The Views and Operations Page</h2>

    At the top of the page is the <b>Show</b> group, containing check
    boxes that make visible certain features related to extraction.

    <a name="viext"></a>
    <dl>
    <dt><b>Extraction View</b><dd>
    When the <b>Extraction View</b> check box is active, the display
    in physical-mode windows is based on features as known to the
    extraction system.  Although similar to the normal display, there
    are important differences:

    <ol>
    <li>Only the conducting layers are shown.
    <li>The features from internally-flattened subcells are shown as part
    of the parent cell.
    <li>The geometry shown represents the processing from the
    <a href="Conductor"><tt>Conductor</tt></a> <tt>Exclude</tt> directive.
    <li>The visible geometry includes ground-plane processing.
    </ol>

    <p>
    This viewing mode is compatible with most other commands, however
    when active, editing is prevented.  Object and subcell selection
    works in the normal way, however only visible objects can be
    selected, which includes the "phony" objects created by the
    extraction system and not present in the actual geometry database.
    </dl>

    <a name="group"></a>
    <dl>
    <dt><b>Groups</b><dd>
    The <b>Groups</b> check box causes the group number of each
    conducting object to be displayed in physical windows.  This is
    similar to the <b>Nodes</b> check box, and is mutually exclusive
    with that check box.
    </dl>

    <a name="nodes"></a>
    <dl>
    <dt><b>Nodes</b><dd>
    The <b>Nodes</b> check box causes the associated node name of each
    conducting object to be displayed in physical windows.  This is
    similar to the <b>Groups</b> check box, and is mutually exclusive
    with that check box.
    </dl>

    <a name="tshow"></a>
    <dl>
    <dt><b>All Terminals</b><dd>
    The <b>All Terminals</b> check box displays the terminals in the
    physical layout which correspond to terminals in the electrical
    schematic.  Electrical devices and subcircuits may have terminals
    associated with their nodes.  These terminals are used to identify
    the connection points in the physical database.  During
    association, the terminals are automatically placed at the
    appropriate point in the physical cell.

    <p>
    Should association fail, unplaced terminals are grouped in an
    array to the lower left of the physical cell's bounding box.  Also
    potentially visible after failure, to the right of the physical
    layout, are any unassigned subcircuit labels.

    <p>
    This check box is mutually exclusive with the <b>Cell Terminals
    Only</b> check box.
    </dl>

    <dl>
    <dt><b>Cell Terminals Only</b><dd>
    This is similar to the <b>All Terminals</b> display mode, however
    only the cell's connection points are shown, not the connection
    points of devices or subcells.  This check box is mutually
    exclusive with the <b>All Terminals</b> check box.
    </dl>

    The <b>Terminals</b> group provides buttons which initiate commands and
    modes related to terminal placement and parameters.

    <dl>
    <dt><b>Reset Terms</b><dd>
    Pressing this button will move all device and subcircuit terminals
    out of the layout, and array them outside the lower left of the
    cell.  The instance connection points will become undefined.  This
    operation cannot be undone except by re-running extraction.  If
    the <b>Recursive</b> check box is checked, this operation will be
    performed recursively on all cells in the hierarchy.

    <p>
    The cell's contact terminals that have been explicitly placed by
    the user, and consequently have the <a
    href="FIXED"><tt>FIXED</tt></a> flag set that locks the position,
    are not touched by this operation.

    <p>
    This capability is mostly for debugging.  It may be entertaining
    to make all terminals visible, then press this button.  Zooming
    out will reveal the terminals arrayed outside the lower left
    corner of the cell.  Then, on pressing <b>Do Extraction</b>, the
    terminals will snap back to their locations within the layout. 
    The locations of these terminals are set by <i>Xic</i>, unlike the
    cell connection terminals which can be placed by hand.

    <p>
    The same capability is available from the <a
    href="!ptrms"><b>!ptrms</b></a> text-mode command.
    </dl>

    <dl>
    <dt><b>Reset Subcircuits</b><dd>
    Pressing this button will move all of the subcircuit marker labels
    to an array outside of the upper right of the layout.  This will
    undefine the subcell associations with the schematic.  This
    operation can not be undone except by re-running extraction.  If
    the <b>Recursive</b> check box is checked, this operation will be
    performed recursively on all cells in the hierarchy.

    <p>
    This capability is mostly for debugging.  It may be entertaining
    to make terminals visible (which also makes the instance label
    marks visible), then press this button.  Zooming out will reveal
    the instance marks arrayed outside the upper right corner of the
    cell.  Then, on pressing <b>Do Extraction</b>, the marks will snap
    back to their locations within the layout.  The locations of these
    marks are set by <i>Xic</i>, and presently they can not be
    manually placed.

    <p>
    The same capability is available from the <a
    href="!ptrms"><b>!ptrms</b></a> text-mode command.
    </dl>

    <dl>
    <dt><b>Recursive</b><dd>
    When this check box is checked, the <b>Reset Terms</b> and
    <b>Reset Subcircuits</b> buttons will act recursively in the
    hierarchy of the (physical) current cell.  If not set, the
    operations are performed in the current cell only.
    </dl>

    <a name="tedit"></a>
    <dl>
    <dt><b>Edit Terminals</b><dd>
    In electrical mode, this button has the same effect as the
    <a href="xic:subct"><b>subct</b></a> button in the electrical side
    menu.  A command is entered enabling the user to define and edit
    the current cell's connection terminals.

    <p>
    In physical mode, the <b>Edit Terminals</b> button makes visible
    the current cell's contact terminals, if any have been assigned
    with the <b>subct</b> command.  These terminals are automatically
    placed during association (if possible) however this command
    allows manual placement and editing of properties of the
    terminals.

    <p>
    Terminals are moved and selected for editing using the same mouse
    and keyboard operations as in the <b>subct</b> command.  One can
    click twice or drag the terminals to a new location.  Multiple
    terminals can be selected and moved (unlike in electrical mode) by
    dragging over them with the mouse pointer, which displays a
    rectangle.  The selected terminals are ghost-drawn and attached to
    the mouse pointer, during the move operation.  In this state,
    pressing either the <b>Backspace</b> or <b>Esc</b> keys will
    deselect the terminals and abort the pending move.  Terminals can
    not be deleted or created in this command, these operations must
    be done in the <b>subct</b> command.

    <p>
    If the <b>Shift</b> key is held while the user clicks on a
    terminal, or the user double-clicks on a terminal, including the
    case of a "move" to the same location, the <a
    href="xic:edtrm"><b>Terminal Edit</b></a> pop-up appears, just as
    in the <b>subct</b> command.  The entries and effects are the same
    as are described for that command.

    <p>
    It is usually not necessary to place terminals manually. 
    Exceptions are cells with ambiguous connection points.  For
    example, suppose a cell contains a single resistor, with cell
    contacts "C1" and "C2" to the resistor.  <i>Xic</i> will assign
    the physical locations of the terminals arbitrarily, which may not
    be the locations expected in a parent cell.  For example, if the
    physical resistor is a vertical strip, a parent cell may expect C1
    above C2, whereas <i>Xic</i> might have assigned the reverse.  The
    user can move the terminals to the proper locations, bypassing the
    assignment in <i>Xic</i>, and the locations are made permanent
    when the cell is saved.

    <p>
    If association fails to place a terminal, or it is placed in the
    wrong location, then manual placement should be used.  If the new
    location is over a conductor, that node/group association is
    assumed before the association operation (so it had better be
    correct, or association will not be correct).

    <p>
    The cell terminals have a <a href="FIXED"><tt>FIXED</tt></a> flag
    which will be saved in cell files if set, the purpose of which is
    to prevent <i>Xic</i> from reassigning the physical location of
    the terminal.  This flag will be set whenever the terminal is
    moved by the user.  Once moved, the terminal should always remain
    in that location (which had better be correct for extraction/LVS
    to succeed).

    <p>
    The state of the flag is indicated by the check box in the
    <b>Terminal Edit</b> pop-up with label "Location locked by user
    placement".  This flag can be set or unset with the check box.

    <p>
    When a terminal is placed, <i>Xic</i> searches through the
    conductor groups that touch the terminal for a suitable object to
    associate with the terminal.  The object must touch the terminal,
    be on a <tt>Routing</tt> layer, and match the layer hint given to
    the terminal, if any.  The hint layer can be supplied with the
    <b>Terminal Edit</b> pop-up, and is otherwise the last layer that
    the terminal was associated with (if any).  If no object can be
    found that matches the hint, the hint is ignored and any
    <tt>Routing</tt> layer will be used.  If an association is made,
    the layer name is printed near the terminal marker.  If not, no
    layer name will be printed, and the terminal no longer has a hint. 
    If the cell has not yet been associated, the layer name label may
    not appear.  The actual association will be made the next time the
    cell is processed, which occurs when entering most of the
    extraction commands.  In particular, activating the <b>All
    Terminals</b> or <b>Cell Terminals Only</b> check boxes is a
    benign way to force a recalculation of all associations.  Better
    still is the <b>Do Extraction</b> button at the bottom of the
    panel.
    </dl>

    <a name="tfind"></a>
    <dl>
    <dt><b>Find Terminal</b><dd>
    The <b>Find Terminal</b> button brings up the <a
    href="xic:nodmp"><b>Node (Net) Name Mapping</b></a> panel, which
    can also be brought up from the electrical side menu.  In physical
    mode, the net naming operations are unavailable, however the
    facility for locating nets and terminals is always available.
    </dl>

    Below the <b>Terminal</b> group are the <b>Select Unassociated</b>
    buttons.  These can be used after extraction to identify the
    objects that failed to associate.  These are objects in physical
    mode that have no identified electrical counterpart, and
    vice-versa.

    <p>
    The command works in physical and electrical modes.  Display
    windows will highlight the appropriate unassociated objects for
    the window's display mode.

    <p>
    The highlighting is removed on a <a href="xic:desel">deselect</a>
    operation, with the menu button or otherwise.  Mostly, the objects
    are simply selected, however objects such as physical devices use
    other highlighting methods.

    <dl>
    <dt><b>Groups/Nodes</b><dd>
    Highlight nets and net objects (object groups) that are not
    associated between layout and schematic.
    </dl>

    <dl>
    <dt><b>Devices</b><dd>
    Highlight device symbols and layout elements that are not
    associated between layout and schematic.
    </dl>

    <dl>
    <dt><b>Subckts</b><dd>
    Highlight subcircuit symbols and placements that are not
    associated between layout and schematic.
    </dl>

    <p>
    This functionality is also available from the <a
    href="!ushow"><b>!ushow</b></a> text-mode command.

!! 071820
    <a name="net"></a>
    <h2>The Net Config Page</h2>

    <img src="screenshots/exsetup2.png" align=right>
    This page provides control over aspects of net identification and
    naming.

    <p>
    At the top of the page is an input area and four check boxes. 
    These relate to the <a href="ext:netname">net naming
    capability</a> using text labels in physical mode.

    <dl>
    <dt><b>Net label purpose name</b><dd>
    This group provides a text entry area and an <b>Apply</b> button. 
    The <b>Apply</b> button must be active for the control to have any
    effect.

    <p>
    The text entered is the name of the <a href="layers">purpose</a>
    to be assumed for <a href="ext:netname">net naming labels</a>. 
    This tracks the <a href="PinPurpose"><b>PinPurpose</b></a>
    variable.  Pressing <b>Apply</b> will set the variable to the text
    name provided, which can be empty.  Pressing <b>Apply</b> again
    will unset the variable reverting to the default purpose name of
    "<tt>pin</tt>", but the text in the entry area will be retained.

    <p>
    If the purpose name is set to an empty string, the
    "<tt>drawing</tt>" purpose is assumed.  One could equivalently
    give the name explicitly.  This is not really recommended as it
    can be inefficient.  In this case, the label, and presumably its
    metal, would both reside on the same layer with the default
    purpose.  For example, a label on a routing layer named
    "<tt>M2</tt>" placed over an object on <tt>M2</tt> would name the
    net containing the object.  For efficiency, it is better to use a
    separate purpose.  In the default case, the label would be on a
    layer purpose pair named "<tt>M2:pin</tt>" in this example.
    </dl>

    <dl>
    <dt><b>Net label layer</b><dd>
    This works similarly to <b>Net label purpose name</b>, though sets
    the <a href="PinLayer"><b>PinLayer</b></a> variable.  This is set
    to a layer name (or layer-purpose pair name) on which all net
    labels must reside.  When set, the purpose mechanism is not used. 
    This is for compatibility with older cell libraries, and is
    otherwise not recommended.
    </dl>

    <dl>
    <dt><b>Find old-style net (term name) labels</b><dd>
    Earlier releases of <i>Xic</i> recognized "term labels" in the
    layout as identifying the conductor groups associated with cell
    terminals.  These are labels, optionally created by the user. 
    They must be created on a conducting layer, and placed over an
    object on the same layer.

    <p>
    If this box is checked, <i>Xic</i> will search for these labels,
    and treat them as net labels.  These labels are formally identical
    to net labels if the <b>Net label purpose name</b> is applied as
    an empty string, or the purpose name "<tt>drawing</tt>".  In this
    case, the search for term labels, which is a separate search from
    the search for net labels, would be redundant.

    <p>
    This check box links to the set/unset status of the <a
    href="FindOldTermLabels"><b>FindOldTermLabels</b></a> variable.
    </dl>

    <dl>
    <dt><b>Ignore net name labels</b><dd>
    If this check box is checked, existing net name labels will be
    ignored.  This is probably only useful for debugging.  The <a
    href="IgnoreNetLabels"><b>IgnoreNetLabels</b></a> variable tracks
    the state (set or not set) of this check box.
    </dl>

    <dl>
    <dt><b>Update net name labels after association</b><dd>
    When checked, net name labels will be updated, and new net name
    labels possibly created, after association completes.  The label
    text is obtained from corresponding electrical net names.

    <p>
    <b>WARNING:  don't use this feature unless you understand the
    potential consequences</b>.  It is essential that association be
    correct when labels are created or updated.  Incorrect labels in a
    layout will prevent correct association and will cause LVS errors.
    These would probably need to be removed or corrected by hand.

    <p>
    To use this, once LVS passes for a cell, one can clear extraction
    with the <b>Clear Extraction</b> button, check this check box,
    then press <b>Do Extraction</b>.  The layout will now contain the
    new and updated labels.  Uncheck this check box, and save the
    cell.  This should only be done as a final step when creating a
    new cell, not while the cell is likely to change.

    <p>
    The presence of the net labels should reduce the time needed to
    associate the cell.  Otherwise the added labels are redundant.

    <p>
    The <a href="UpdateNetLabels"><b>UpdateNetLabels</b></a> variable
    tracks the state (set or not set) of this check box.
    </dl>

    <dl>
    <dt><b>Merge groups with matching net names</b><dd>
    If two physically unconnected conductor groups have the same
    logical <a href="ext:netname">net name</a>, if this box is checked
    the groups will be logically merged and treated as a single group. 
    This allows successful top-level LVS of cells containing split
    nets.  Below the top level, split nets are detected by other means
    so checking this box is not required for successful LVS if the
    top-level contains no split nets.

    <p>
    The group names that apply are obtained from net name labels, or
    from cell terminals that have been placed by the user.  By
    default, net name matching is case-insensitive, though this can be
    changed with the <a
    href="NetNamesCaseSens"><b>NetNamesCaseSens</b></a> variable.  The
    name matching also treats as equivalent various subscripting
    delimiters, as listed in the description of the <a
    href="Subscripting"><b>Subscripting</b></a> variable.

    <p>
    The <a href="MergeMatchingNamed"></b>MergeMatchingNamed</b></a>
    variable tracks the state of this check box.
    </dl>

    <a name="via"></a>
    <h2>Via Detection</h2>

    Below the check boxes mentioned above is the <b>Via Detection</b>
    group.  This controls how vias are searched for and identified. 
    As most layouts contain large numbers of vias, the algorithms used
    to detect vias can have a significant impact on extration time. 
    The default settings provide the least testing and the speediest
    performance, however they assume that a certain layout methodology
    has been followed.  If all vias in the layout are separate cell
    instances, and the via masters contain patches of the two
    conductors along with the via layer, then the default settings
    will always apply.  <b>If this is not the case, it is possible for
    connections to be missed, the user must understand the rest of
    this section</b>.

    <p>
    The recognition algorithm is as follows.

    <ol>
    <li>An object on a via layer is found, usually by iterating
    through the spatial database over a region.
    <p>
    <li>If the object is not a box object, and the <b>Assume convex
    vias</b> check box is checked, it is replaced temporarily by a box
    of half the width/height of the bounding box.  This is for
    efficiency - the geometrical computations are much faster for box
    objects.  In practice, a via is almost always a square, but other
    shapes, mostly circular approximations, are occasionally seen.  In
    particular, in superconductive electronics we often use circular
    vias concentric with circular Josephson junctions.  If the check
    box is not set, the via shape is decomposed into a trapezoid list.

    <p>
    <li>We look for objects on the upper and lower conductor layers
    whose intersection intersects the assumed via shape with nonzero
    area.  If found, a connection is indicated.
    </ol>

    <p>
    The initial "grouping" phase establishes networks of metal objects
    in the cells, which contact by proximity or through vias.  The
    next "extraction" phase modifies the network to account for device
    connections, and establishes connections to and between
    subcircuits.  In this process, "wire-only" subcircuits are
    logically flattened into the parent cells.  There are two things
    to keep in mind about this flattening process.

    <ol>
    <li>Only conductors are promoted into the parent cell.  In
    particular, via material is not promoted, and must be accessed
    through the original cell hierarchy.

    <p>
    <li>Consider a via cell, consisting of metal caps and a via
    pattern.  The metal caps are connected, trivially.  When the metal
    caps are promoted, they will tie together any contacting metal in
    the parent cell.  Thus, we never have to recognize the via again,
    it has imposed its connectivity constraint and logically
    disappeared.
    </ol>

    <p>
    Connecting to and between subcells is a complicated and labor
    intensive operation.  We have to iterate through all wire nets of
    all subcells, and test for connectivity.  Connectivity can occur
    by direct contact, or, conceivably by a via.  However, if we know
    that all of the vias are separate cells as described, we know that
    they have all been flattened away, and the hugely expensive test
    of looking for via connections between nets can be skipped
    entirely.  If in the original layout a via (cell) is making the
    connection, in extraction the proximity test will discover the
    promoted, shorted via caps, and make the connection.

    <p>
    What if not all vias are in separate cells?  In theory, the via
    material, and the two connected metal objects, may each occur in
    any subcell at any hierarchy level.  In the most general case, we
    would need to search the entire hierarchy depth for via material,
    which can be painfully slow.  However, other rules can apply.  For
    example, to make a contact, one could place a square of via
    material on the current cell, over the metal layer intersection
    area of nets contained in the cell or subcells.  If this method is
    used to connect between subcircuits, then this test must be
    enabled, however the search depth can remain at zero.  If the via
    material is found in a subcell, then the search depth would have
    to be set appropriately.

    <p>
    The <b>Via Detection</b> group contains the following elements.

    <dl>
    <dt><b>Assume convex vias</b><dd>
    This applies when checking connectivity through a via during
    extraction.  When set, vias that are not rectangular are assumed
    to be convex polygons, and connectivity testing is performed in a
    small rectangular region near the center of the bounding box. 
    This is specifically for circular vias, as found in
    superconductive electronics.  This simplifies testing and might
    speed extraction when circular vias are present.  It should
    <b>not</b> be used if vias can take arbitrary polygonal shapes. 
    This will have no effect on rectangular vias.

    <p>
    This sets/tracks the state of the <a
    href="ViaConvex"><b>ViaConvex</b></a> variable.
    </dl>

    <dl>
    <dt><b>Via search depth</b><dd>
    If we have intersecting areas of top and bottom conductor, and we
    are searching for an area of via material that would connect the
    two metal objects, this sets the depth in the current cell
    hierarchy to search.  The default is zero, indicating to search
    the current cell only.  Generally, layout methodology can easily
    ensure that this value can be safely zero, but there may be cases
    that require extraction where such methodology was not practiced. 
    In such a case, where the methodology is completely unknown, this
    value should be set to a large number (internally it is limited to
    40, the maximum cell hierarchy depth) which will ensure that all
    via-induced connections are found.  This can dramatically increase
    extraction time.

    <p>
    This tracks the value of the variable <a
    href="ViaSearchDepth"><b>ViaSearchDepth</b></a>, and defaults to
    zero if the variable is not set.
    </dl>

    <dl>
    <dt><b>Check for via connections between subcells</b><dd>
    By default, it is assumed that connections between subcells will
    be made by touching metal only.  This includes the case where the
    metal is from a flattened wire-only cell, as would be provided by
    via cells as described previously.  One can easily adapt layout
    methodology where this is true.  Otherwise, this box can be
    checked, which will cause explicit testing for the presence of
    vias between subcircuit nets.  This is a very expensive operation.

    <p>
    This tracks the whether or not the <a
    href="ViaCheckBtwnSubs"><b>ViaCheckBtwnSubs</b></a> variable is
    set.
    </dl>

    <a name="gplane"></a>
    <h2>Ground Plane Handling</h2>

    The <b>Ground Plane Handling</b> group controls how the extraction
    system treats a <a href="ext:gplane">ground plane</a>.  The is
    only required if the technology file defines a ground plane layer,
    which is unlikely to be true in semiconductor processing.  The
    ground plane handling features were included specifically for
    Josephson junction process support, but can be applied to other
    technologies should the need arise.

    <dl>
    <dt><b>Assume clear-field ground plane is global</b><dd>
    If a clear-field ground plane has been identified in the <a
    href="ext:setup">technology file</a>, when this box is checked, all
    areas of this layer are assigned group 0, the ground group.  When
    not checked, only the largest area group in the top-level cell is
    assigned group 0.  This tracks the <a
    href="GroundPlaneGlobal"><b>GroundPlaneGlobal</b></a> variable.
    </dl>

    <dl>
    <dt><b>Invert dark-field ground plane for multi-nets</b><dd>
    If a dark-field fround plane layer has been identified in the <a
    href="ext:setup">technology file</a>, if this box is checked, the
    ground plane layer will be polarity inverted internally for
    extraction purposes.  The inverted layer will be used to establish
    connectivity.  This tracks the state of the <a
    href="GroundPlaneMulti"><b>GroundPlaneMulti</b></a> variable.
    </dl>

    <dl>
    <dt><b>Inversion method menu</b><dd>
    When using an inverted gound plane, this menu provides a choice of
    methods.  The default is to invert in each cell, then clip out the
    area occupied by subcells.  The second choice will create the
    inverted layer in the top-level cell only, using the entire
    hierarchy as the source for geometry to invert.  The third choice
    is similar, but will create the inverted layer in each cell, using
    as the source all geometry in that cell and its subcell hierarchy. 
    This tracks the state of the <a
    href="GroundPlaneMethod"><b>GroundPlaneMethod</b></a> variable.
    </dl>

!! 063014
    <a name="device"></a>
    <h2>The Device Config Page</h2>

    <img src="screenshots/exsetup3.png" align=right>
    This page contains controls that correspond to device-related
    extraction variables.

    <dl>
    <dt><b>Device Block</b><dd>
    Pressing the <b>Device Block</b> button produces a drop-down list
    of <a href="ext:deviceblock">device blocks</a> from the technology
    file, plus three additional buttons:  <b>New</b>, <b>Delete</b>,
    and <b>Undelete</b>.  The device blocks are listed in order of
    their definition, as the block name followed by the prefix, if
    any.  Pressing <b>New</b> or any of the device block name entries
    brings up a <a href="texteditor">text editor</a> loaded with the
    indicated block, or empty for <b>New</b>.  The text for the device
    block can be entered into the editor.  Adding a block with the
    same name and prefix (or lack of a prefix) as an existing block
    will overwrite the existing block.  Saving with the <b>Save</b>
    button in the editor will update an existing block or add a new
    block to the internal device list.  The <b>Save</b> button in the
    editor <i>does not</i> save to disk.  The <a
    href="xic:updat"></b>Save Tech</b></a> command can be used to
    generate a new technology file which will contain the new block,
    or the <b>Save As</b> button in the editor can be used to save the
    block as a file.

    <p>
    To delete a device block, press the <b>Delete</b> button in the
    <b>Device Block</b> menu, then select a device block from the same
    menu.  That block will be removed from the menu.  The name will
    disappear from the menu, and it is removed from consideration in
    extraction.  The block can be restored with the <b>Undelete</b>
    menu entry, but only one deletion is remembered.
    </dl>

    <dl>
    <dt><b>Don't merge series devices</b><dd>
    If checked, series-connected devices will never be merged during
    extraction, overriding any <tt>Merge</tt> directive in the
    corresponding <a href="ext:deviceblock">device blocks</a> of the
    technology file.  This tracks the state of the <a
    href="NoMergeSeries"><b>NoMergeSeries</b></a> variable.

    <p>
    Similar devices may be series-merged if the common connection has
    no other connection.  It is occasionally useful to suppress
    merging to individually measure the components of segmented
    devices, or in cells where the common contact may not have a
    connection that is currently in scope.
    </dl>

    <dl>
    <dt><b>Don't merge parallel devices</b><dd>
    When checked, parallel-connected devices are never merged during
    extraction, overriding any <tt>Merge</tt> directive in the <a
    href="ext:deviceblock">device blocks</a> of the technology file. 
    This tracks the state of the <a
    href="NoMergeParallel"><b>NoMergeParallel</b></a> variable.

    <p>
    If is occasionally useful to suppress parallel merging to
    individually measure segments of a multi-component device.
    </dl>

    <dl>
    <dt><b>Include devices with terminals shorted</b><dd>
    By default, if an extracted device is found to have all terminals
    shorted together, it is ignored.  If this check box is checked,
    such devices are kept, allowing their parameters to be reported. 
    This tracks the state of the <a
    href="KeepShortedDevs"><b>KeepShortedDevs</b></a> variable.
    </dl>

    <dl>
    <dt><b>Don't merge devices with terminals shorted</b><dd>
    When including devices with all terminals shorted, checking this
    box will prevent such devices from being merged as parallel
    devices, if parallel merging is enabled for the device type.  This
    tracks the state of the <a
    href="NoMergeShorted"><b>NoMergeShorted</b></a> variable.
    </dl>

    <dl>
    <dt><b>Skip device parameter measurement</b><dd>
    When this box is checked, device parameter measurement will not be
    performed during extraction.  This may save time if the user is
    interested only in topology.  This tracks the state of the <a
    href="NoMeasure"><b>NoMeasure</b></a> variable.
    </dl>

    <dl>
    <dt><b>Use measurement results cache property</b><dd>
    When this box is checked, the extraction system will read and
    update (creating if necessary) the <a
    href="measures"><b>measures</b></a> property (property number
    7106) which is used to <a href="ext:meascache">cache</a>
    measurement results.  The measurement of device parameters can be
    time consuming, and the caching can speed up the extraction
    process significantly.  However, using the measurement cache may
    require user intervention to maintain coherency.  If a device
    layout changes, the user will have to manually update the cache in
    order to obtain updated parameters.  With this box not checked,
    the default condition will force actual computation of device
    parameters, and avoid all use of the caching mechanism.  This is
    appropriate while a cell is under development, to avoid cache
    coherency issues.

    <p>
    The <a href="UseMeasurePrpty"><b>UseMeasurePrpty</b></a>
    variable tracks the state of this check box.
    </dl>

    <dl>
    <dt><b>Don't read measurement results from property</b><dd>
    This setting is ignored unless <b>Use measurement results cache
    property</b> is checked.  When this box is checked, the extraction
    system will not read the <a href="measures"><b>measures</b></a>
    property (property number 7106) which is used to <a
    href="ext:meascache">cache</a> measurement results.  When
    measurement results are required, they will be computed.  The
    property will still be updated, after association, provided that
    <b>Use measurement results cache property</b> is checked.  Thus,
    by setting this check box and forcing association, one can get a
    fresh set of measurement results into the <tt>measures</tt>
    properties.

    <p>
    The <a href="NoReadMeasurePrpty"><b>NoReadMeasurePrpty</b></a>
    variable tracks the state of this check box.
    </dl>

    <p>
    The remaining controls apply to the numerical solver used to
    extract resistance and (microstripline) inductance.

    <p>
    The default mode of the solver is to divide the device body into a
    grid such that the number of grid cells is fixed, independent of
    device size.  This gives a predictable and constant measurement
    time per device, however it may provide less accuracy than other
    methods.

    <p>
    One can also choose to use a fixed grid size, in which case
    physically larger devices will take longer to extract, but
    computed values may be more accurate.

    <p>
    A third choice is to tile the structure, if possible, by using the
    largest grid such that all body and contact boundaries fall on
    grid.  This is likely to provide the best accuracy if tiling
    succeeds.

    <dl>
    <dt><b>Set/use fixed grid size</b><dd>
    If the check box is checked, the solver will use a fixed grid size
    as given in the numeric entry area.  When checked, other controls
    in this group are grayed and their states ignored.  This tracks
    the state and value of the <a
    href="RLSolverDelta"><b>RLSolverDelta</b></a> variable.
    </dl>

    <dl>
    <dt><b>Try to tile</b><dd>
    When checked, the solver will try to use a grid that falls on
    every edge of the contacts and device body.  This tracks the state
    of the <a href="RLSolverTryTile"><b>RLSolverTryTile</b></a>
    variable.
    </dl>

    <dl>
    <dt><b>Maximum tile count per device</b><dd>
    When tiling is enabled, this entry area will set the maximum number
    of tiles allowed in a device.  This tracks the state of the <a
    href="RLSolverMaxPoints"><b>RLSolverMaxPoints</b></a> variable,
    and defaults to 50,000.
    </dl>

    <dl>
    <dt><b>Set fixed per-device grid cell count</b><dd>
    This entry area supplies a number of grid cells to use per device. 
    In this mode, the time required for extraction is close to
    constant, independent of device size.  This mode is used when not
    tiling, and not using a fixed grid size.  This tracks the state of
    the <a href="RLSolverGridPoints"><b>RLSolverGridPoints</b></a>
    variable, and the default value is 1000;
    </dl>

!! 091614
    <a name="misc"></a>
    <h2>The Misc Config Page</h2>

    <img src="screenshots/exsetup4.png" align=right>
    This page contains some miscellaneous settings and controls, to be
    described.  The topmost controls on this page apply to cell
    handling.

    <dl>
    <dt><b>Cell flattening name keys</b><dd>
    This group contains a text entry area and an <b>Apply</b> button. 
    When the <b>Apply</b> toggle button is in the pressed state, the
    <a href="FlattenPrefix"><b>FlattenPrefix</b></a> variable is set
    to the text in the entry area.  When the <b>Apply</b> button is
    not pressed, the text in the text area is retained, but the
    <b>FlattenPrefix</b> variable is unset.

    <p>
    This is one means by which the user can force a physical cell to
    always be logically <a href="ext:exthier">flattened</b></a> in the
    extraction system.  It is a bit archaic, as the extraction system
    will do most required flattening automatically, and use of the <a
    href="prpty:flatten"><b>flatten</b></a> property is the
    recommended way to force instance flattening.
    </dl>

    <dl>
    <dt><b>Extract opaque cells, ignore OPAQUE flag</b><dd>
    Checking this will cause the extraction system to ignore the
    OPAQUE flag applied to subcells, and attempt to extract the
    contents as for a normal cell.  This tracks the state of the <a
    href="ExtractOpaque"><b>ExtractOpaque</b></a> variable.
    </dl>

    <dl>
    <dt><b>Be very verbose on prompt line during extraction</b><dd>
    When set, during extraction lots of progress messages are
    displayed on the prompt line.  However, this can actually slow
    down the process considerably, particularly if running remotely. 
    By default, the messages are much more terse, and there is very
    little progress indication.
    </dl>

    <dl>
    <dt><b>Global exclude layer expression</b><dd>
    This group provides an <b>Apply</b> button and text entry area. 
    The text entry area should contain the name of a layer, or <a
    href="xic:lexpr">layer expression</a>.  When the <b>Apply</b>
    button is pressed, the <a
    href="GlobalExclude"><b>GlobalExclude</b></a> variable will be set
    with the text from the entry.  When the <b>Apply</b> button is
    unset, the text is ignored, and the <b>GlobalExclude</b> variable
    is unset.

    <p>
    If an expression is given and active, any object that touches an
    area where the layer expression is "dark" will be ignored in
    extraction, as if it didn't exist.

    <p>
    For example, one might create a layer named "<tt>NOEX</tt>". 
    Then, if the layout contains features that should be ignored by
    the extraction system, one can enclose the features in
    <tt>NOEX</tt> boxes, and if "<tt>NOEX</tt>" is entered into the
    text entry area and the <b>Apply</b> button pressed, the marked
    features will be ignored.
    </dl>

    The <b>Association</b> group contains settings that apply during
    the association operation, when electrical and physical matching
    occurs.

    <dl>
    <dt><b>Don't run symmetry trials in association</b><dd>
    When checked, the <a href="ext:assoc">association</a> computation
    will not break symmetry and run symmetry trials.  This is mostly
    for debugging.  The <a href="NoPermute"><b>NoPermute</b></a>
    variable tracks the state of this check box.
    </dl>

    <dl>
    <dt><b>Logically merge physical contacts for split net handling</b><dd>
    When set, some additional association logic is employed to detect
    and account for split nets in instance placements.  A "split net"
    is a logical net consisting of two or more disjoint physical
    conductor groups.  The disjoint parts of the net are connected
    when instances are placed, through parent cell metalization.  If
    the schematic shows the net fully connected in the master, LVS
    will fail on the parent unless this check box is checked.

    <p>
    The <a href="MergePhysContacts"><b>MergePhysContacts</b></a> variable
    tracks the state of this check box.
    </dl>

    <dl>
    <dt><b>Apply post-association permutation fix</b><dd>
    Checking this check box enables additional <a
    href="ext:assoc">association</a> logic.  It applies when there is
    perfect topological matching between layout and schematic, but <a
    href="xic:lvs">LVS</a> is failing due to different permutations of
    permutable subcell contacts being assumed in the electrical and
    physical parts.  Checking the box will enforce the electrical
    permutation on the physical solution, which will allow LVS to pass
    if the permutation difference was the only issue.

    <p>
    This should no longer be needed, as the two-pass association
    algorithm in current use should resolve these cases automatically. 
    This check box should therefor not be checked in general, but it
    is possible that it might allow successful LVS in some obscure
    case.

    <p>
    The <a href="SubcPermutationFix"><b>SubcPermutationFix</b></a>
    variable tracks the state of this check box.
    </dl>

    <dl>
    <dt><b>Maximum association loop count</b><dd>
    This sets the maximum number of "loops" allowed around the
    association logic.  There is no reason to touch this unless
    directed by Whiteley Research.  The <a
    href="MaxAssocLoops"><b>MaxAssocLoops</b></a> variable tracks this
    entry.
    </dl>

    <dl>
    <dt><b>Maximum association iterations</b><dd>
    This sets the maximum number of iterations allowed per loop. 
    There is no reason to touch this unless directed by Whiteley
    Research.  The <a href="MaxAssocIters"><b>MaxAssocIters</b></a>
    variable tracks this entry.
    </dl>

!!SEEALSO
xic:extmenu

!! 090914
!!KEYWORD
xic:exsel
!!TITLE
Net Selections
!!HTML
    <img src="screenshots/pathsel.png" align=right>

    <b>jump to</b> <a href="xic:exsel#resis"><b>Resistance Measurement</b></a>

    <p>
    <b>Keyword</b>: <tt>exsel</tt>

    <p>
    The <b>Net Selections</b> button in the <b>Extract Menu</b> brings
    up the <b>Path Selection Control</b> panel.  This panel enables
    extraction-specific selection modes for groups, nodes, and
    connected conductor paths (wire nets).  It is separate and
    distinct from the normal object and subcell selection.  Command
    buttons in the panel replace menu buttons and modes found in other
    commands in earlier releases of <i>Xic</i>, in particular the
    group/node selection found in the <b>View Extraction</b> mode, and
    the <b>Show Paths</b> and <b>Quick Paths</b> commands found in the
    <b>Extract Menu</b> of <i>Xic</i> releases 3.1.4 and earlier are
    now available from this panel.

    <p>
    There are three basic selection modes available, which are set
    from the top row of buttons in the panel.  Similar to normal
    selections, one clicks on an object in a drawing window.  The
    object must be on a visible and selectable layer.  Other selection
    specifications as found in the <a href="xic:selcp"><b>Selection
    Control Panel</b></a> apply as well.  In particular, one can
    choose the types of objects that are selectable, and the search-up
    mode.  In search-up mode, layers are searched from bottom to top,
    rather than the default top to bottom, in physical mode.  This
    affects the conductor chosen if the user clicks over more than one
    conductor layer.

    <dl>
    <dt><b>Select Group/Node</b><dd>
    When active, clicking on a conducting object in the current cell
    in a physical window will highlight all objects of the current
    cell in that conductor group.  In electrical windows displaying
    the same cell, the corresponding node connections and wires will
    be highlighted.  Clicking on a connection point or wire in an
    electrical window will highlight that node, and also highlight the
    corresponding group in physical windows.

    <p>
    Physical objects are "conducting" if the <a
    href="Conductor"><tt>Conductor</tt></a> keyword was applied
    (directly or by inference) to the layer of the object.

    <p>
    If the <b>Select Path</b> button is also pressed while in this
    mode, the conducting path, as it recurses into subcells, will also
    be shown in physical windows.

    <p>
    Pressing the <b>p</b> key will toggle the state of the <b>Select
    Path</b> button and the display of recursive conductor paths.

    <p>
    With the mouse pointer in a physical window, typing a group number
    followed by <b>Enter</b> will switch to the display of that group
    and corresponding node.  Similarly, in an electrical window,
    entering a node name or number followed by <b>Enter</b> will
    switch the display to the entered node and corresponding group. 
    However, entering a name will probably trigger all kinds of
    accelerators, including those for this command, so there is a
    trick.  Type a single or double quote character, followed by the
    node name.  The quote character will inhibit recognition of
    accelerators.  Since the keypress buffer length is only 16
    characters, long node names can't be entered in this manner, the
    equivalent node number can be entered or some other method used to
    select the node.

    <p>
    In electrical mode, the command works with the <a
    href="xic:nodmp"><b>Node Mapping Editor</b></a> when visible.  The
    currently selected node will always be highlighted in the node
    list panel of the editor.  Selecting a node in the editor will
    highlight that node/group in the display windows.
    </dl>

    <dl>
    <dt><b>Select Path</b><dd>
    When the <b>Select Group/Node</b> button is also pressed, physical
    windows will display the conducting path of the currently selected
    group descending into subcells.  Otherwise, this button initiates
    a different command for displaying conductor paths recursively. 
    This mode is available in physical mode only.  Clicking on a
    conducting object will highlight the conductor path containing
    that object.  There is no selection or indication of the
    corresponding electrical node, nor will clicking in an electrical
    window have any effect in this mode.  The clicked-on object need
    not be in the current cell (as is required for group/node
    selection), but must be within the search depth.  The path
    generation algorithm makes use of the extraction system, and
    observes extracted devices and exclude directives as provided to
    the extraction system.

    <p>
    Only one path can be shown at a time.  Clicking on another object
    will rebuild a path from the second object, erasing the original
    path, or it is possible to select a sub-path, if that feature is
    enabled. 

    <p>
    If a dark-field ground plane is used, clicking on the painted
    areas (holes in the ground plane) will select the ground group, as
    will clicking on any other object which is connected to ground
    (group 0).
    </dl>

    <dl>
    <dt><b>"Quick" Path</b><dd>
    This command is similar to the <b>Select Path</b> command, but
    does not use the extraction system, except for establishing
    conducting layers and connections through vias.  In particular,
    there is no information about devices and other extraction
    constraints established at higher levels.  It may be useful for
    tracing wire nets, while skipping the sometimes lengthly
    extraction operation.

    <p>
    The <b>"Quick" Paths</b> algorithm, unlike <b>Show Paths</b>, will
    ignore layers that are set invisible.

    <p>
    Since extraction is not used, there is no concept of devices, so
    that results may not be as expected, and not be as seen with the
    <b>Show Paths</b> mode.  For example, consider MOS devices. 
    Since, the source and drain are connected to a common area of the
    "active" layer, which is (usually) a <tt>Conductor</tt>, the
    simple algorithm used in this mode will interpret the source
    and drain as being connected together, since it does not recognize
    the MOS device.  As a consequence, all wire nets are likely
    shorted together in this mode!

    <p>
    In order to get meaningful results, it may be necessary in this
    case to temporarily remove the <tt>Conductor</tt> keyword from the
    active layer.  This can be accomplished with the <a
    href="xic:lpedt"><b>Tech Parameter Editor</b></a> in the
    <b>Attributes Menu</b>.
    </dl>

    <p>
    The remaining buttons and controls in the panel provide options or
    modes while the selections are active.

    <dl>
    <dt><b>"Quick" Path ground plane handling</b><dd>
    This menu applies only to the <b>"Quick" Path</b> selection mode,
    and sets the ground plane handling method.  This tracks the
    setting of the <a
    href="QpathGroundPlane"><b>QpathGroundPlane</b></a> variable.  If
    a <a href="GroundPlaneClear">dark-field ground plane</a> has been
    specified in the technology file, the implied connectivity to
    ground is similar to that in force for the extraction system. 
    There are three choices for handling the ground plane.

    <dl>
    <dt><b>Use ground plane if available</b><dd>
    This is the default.  If an inverted ground plane has already been
    created and is current, it will be used when determining paths. 
    If the ground plane does not have a current inversion, the absence
    of the layer will imply a ground contact, as in extraction without
    the <a href="GroundPlaneClear"><tt>MultiNet</tt></a> keyword. 
    This choice avoids the sometimes lengthly inversion computation,
    but makes use of the inversion if it has already been done.  The
    inversion is performed during extraction.
    </dl>

    <dl>
    <dt><b>Create and use ground plane</b><dd>
    If the extraction system would use an inverted ground plane, it
    will be created if not already present and current.  The path
    selection will include the inverted layer.
    </dl>

    <dl>
    <dt><b>Never use ground plane</b><dd>
    The <b>"Quick" Path</b> mode will never use the inverted ground plane.
    </dl>
    </dl>

    <dl>
    <dt><b>Search path depth</b><dd>
    This control and associated buttons apply when the <b>Select
    Path</b> or <b>"Quick" Path</b> modes are in effect.  It
    determines the depth to recurse to when the conductor path is
    being constructed.  If 0, only objects in the current (top-level)
    cell will be considered.  The depth can be entered directly, or by
    clicking the up/down buttons, or by pressing the <b>0</b> or
    <b>All</b> buttons.

    <p>
    While the command is active, the expansion depth can also be
    changed with the <b>-</b>, <b>+</b>, <b>n</b>, and <b>a</b> keys. 
    These decrement, increment, set to 0, and set to maximum, the
    depth, respectively.

    <p>
    When the depth changes, the path, if one is being shown, will be
    redrawn, if possible (the original object must be above the new
    depth).
    </dl>

    <dl>
    <dt><b>"Quick" Path use Conductor</b><dd>
    If this check box is not checked, only objects on layers with the
    <a href="Routing"><tt>Routing</tt></a> attribute applied will be
    considered for inclusion in the extracted path.  If checked,
    objects on layers with the <a
    href="Conductor"><tt>Conductor</tt></a> attribute will be allowed. 
    The <tt>Routing</tt> attribute implies <tt>Conductor</tt>, but may
    be more restrictive.

    <p>
    The <a href="QpathUseConductor"><b>QpathUseConductor</b></a>
    variable tracks the state of this check box.
    </dl>

    <dl>
    <dt><b>Blink highlighting</b><dd>
    <b>Accelerator: h</b><br>
    When this box is checked, the highlighting in physical windows
    will blink.  When unset, the highlighting will use the static
    highlighting color.  Associated highlighting in electrical windows
    will always blink.

    <p>
    With a path being displayed, pressing the <b>h</b> key will
    toggle the blinking status.
    </dl>

    <dl>
    <dt><b>Enable sub-path selection</b><dd>
    This check box enables sub-path selection while in the <b>Select
    Path</b> or <b>"Quick" Path</b> modes.

    <p>
    When a path is displayed, the user can click on two objects in the
    path, and only the "sub-path" connecting the two objects will be
    highlighted.  If the two objects are connected in multiple ways,
    the algorithm will select one (which may not be the most direct). 
    If <b>Shift</b> is held while clicking on an object in the path, the
    object will be deselected and not considered as part of the path. 
    This can be used to coerce a desired sub-path.  When a sub-path is
    displayed, clicking on any non-selected object will display the
    full path containing that object.
    </dl>

    <dl>
    <dt><b>Load Antenna file</b><dd>
    <b>Accelerator: f</b><br>
    This button applies to the <b>Select Path</b> mode only.  Pressing
    this button will load a previously-generated antenna report file
    (from the <a href="!antenna"><b>!antenna</b></a> command) for the
    current cell, and ask the user for a net number found in the file. 
    The conductor path corresponding that that net number will be
    highlighted.

    <p>
    Pressing the <b>f</b> key while in <b>Select Paths</b> mode will
    also query an antenna report file in a similar manner.
    </dl>

    <dl>
    <dt><b>To trapezoids</b><dd>
    <b>Accelerator: t</b><br>
    Pressing this button will decompose the geometric objects which
    comprise the currently shown physical conductor path into
    trapezoids.  This has no effect on "real" objects in the database
    or in the extraction system, only the temporary objects used to
    display the selected path.

    <p>
    This can be useful in conjunction with the sub-path selection
    capability, to enable breaking a path by deselecting parts of an
    object that are separate as trapezoids.  It may also be useful as
    a prelude to the <b>Save</b> operations in some cases.

    <p>
    Pressing the <b>t</b> key with a path displayed will also
    convert the path to trapezoid representation.
    </dl>

    <dl>
    <dt><b>Save path to file</b><dd>
    <b>Accelerator: s</b><br>
    If a physical conductor path is being displayed, this button
    enables saving the objects that comprise the path to a native cell
    file.  Only the selected objects will be exported.  If the path
    has been converted to trapezoids, the trapezoid representation
    will be exported.  Pressing the button brings up a small pop-up
    where the user can give a cell/file name.  The resulting file can
    be read into <i>Xic</i> at a later time for further processing, or
    for conversion to another file format.

    <p>
    By default, the via layers are not included in the file, only the
    conductors.  The two check boxes below the button allow saving the
    vias and other associated layers as well.

    <p>
    Pressing the <b>s</b> key with a path displayed will also save
    the path to a file in a similar manner.
    </dl>

    <dl>
    <dt><b>Path file contains vias</b><dd>
    This check box applies when the <b>Save path to file</b> button is
    used.  When checked, the via objects that connect layers will be
    included in the generated path.  If not checked, only the metal
    layers that constitute the path will be included in the file.  The
    via layers are those that have the <a href="Via"><tt>Via</tt></a>
    keyword defined in the technology file.  The file will included
    the objects on the via layers, clipped to the intersection area of
    the two associated conductors.
    </dl>

    <dl>
    <dt><b>Path file contains via check layers</b><dd>
    This check box applies when <b>Save path to file</b> is used, and
    the <b>Path file contains vias</b> check box is checked.

    <p>
    The <a href="Via"><tt>Via</tt></a> keyword line in the technology
    file contains an optional layer expression, which must be "true"
    for an actual connection to be indicated.  For example

    <blockquote>
    <tt>Via SBST MET1 DIFF&PPLS</tt>
    </blockquote>

    <p>
    This line would indicate that the layer containing this line forms
    a via between conductors SBST and MET1 only in the presence of
    layers DIFF and PPLS.

    <p>
    When this check box is checked, the file will contain the layers
    needed for the checking expression (DIFF and PPLS), clipped to the
    via layer objects.  If not checked, the file will contain only the
    vias that meet the check criteria, but the layers needed for
    checking (DIFF and PPLS) will not appear.

    <p>
    With this box checked, the file can be loaded into <i>Xic</i> and
    extraction run, and the (single) net will be completely
    identified.  This may not be the case if check layers are missing,
    and certainly won't be the case if via layers are omitted.
    </dl>

    <p>
    The two via inclusion check boxes track the state of the <a
    href="PathFileVias"><b>PathFileVias</b></a> variable.  If this
    variable is set as a boolean (i.e., to no value), then vias will
    be included, and check layers will not be included.  If the
    variable is set to any text, the check layers will also be
    included.

    <a name="resis"></a>
    <h2>Resistance Measurement</h2>

    The <b>Resistance Mesaurement</b> buttons allow the user to
    measure the resistance between two points of the currently
    highlighted path.

    <p>
    Caveat:  This is a new capability.  The algorithm seems to have
    difficulty with some, usually complex, paths, meaning that a
    "pivot too small" or other error message will appear indicating
    lack of a solution.

    <p>
    All layers used in the path should have a sheet resistance
    specified.  If no sheet resistance is specified, a value of 1
    ohm/square is assumed.  The sheet resistance can be specified
    directly with the <tt>Rsh</tt> keyword, or can be obtained if
    <tt>Rho</tt> or <tt>Sigma</tt> and <tt>Thickness</tt> have been
    given.  If <tt>Rsh</tt> is not given, the value is taken as
    <tt>1e6*</tt><tt>Rho</tt>/<tt>Thickness</tt>, where <tt>Rho</tt>
    has units of ohm-meter and <tt>Thickness</tt> is given in microns. 
    The conductivity <tt>Sigma</tt> is equal to 1.0/<tt>Rho</tt>. 
    These keywords can be set in the <a href="ext:setup">technology
    file</a>, or with the <a href="xic:lpedt"><b>Tech Parameter
    Editor</b></a> in the <b>Attributes Menu</b>.

    <p>
    To perform a measurement, the <b>Define Terminals</b> button
    should be used first to define two terminal locations.  With the
    button pressed, drag mouse button 1 to define a rectangular area
    over some part of the displayed path.  A box will be shown.  Note
    that one must drag, with the mouse button pressed, to define the
    terminal area.  Simply clicking has no effect.  Repeat the process
    over another part of the displayed path, and a second box will be
    shown.  These boxes represent the equipotential terminal areas
    assumed in the solver.

    <p>
    Once the terminals have been defined, pressing the <b>Measure</b>
    button should display the measured resistance on the prompt line. 
    Diagnostic messages from the solver will be printed in the
    console window.

    <p>
    The algorithm does not include contact resistance between
    different metal layers.

!!SEEALSO
xic:extmenu

!! 103013
!!KEYWORD
xic:dvsel
!!TITLE
Device Selections
!!HTML
    <img src="screenshots/devsel.png" align=right>
    <b>Keyword</b>: <tt>dvsel</tt>

    <p>
    The <b>Device Selections</b> button in the <b>Extract Menu</b>
    brings up the <b>Show/Select Devices</b> panel, from which devices
    can be made visible, and certain operations can be performed. 
    There are three basic control groups.

    <p>
    The top control group contains a window which lists all of the
    devices extracted from the physical layout of the current cell. 
    The listing has three colums.  The <b>Name</b> and <b>Prefix</b>
    columns provide the values supplied in the technology file <a
    href="ext:deviceblock">device block</a> for the device.  The third
    column gives the range of index values assigned for the device
    instances extracted.  Each instance of a device has a unique index
    in this range.

    <p>
    The list is actually shown in response to pressing the <b>Update
    List</b> button.  This will perform extraction/association on the
    current cell, if necessary, and list the devices found.  With
    entries listed, the buttons above the listing become active. 
    These buttons allow devices to be highlighted in the display
    windows.

    <p>
    Devices are highlighted is all windows showing the physical layout
    of the current cell.  In addition, the correspoiding electrical
    devices are also highlighted in windows showing the electrical
    schematic of the current cell.

    <p>
    Lines in the listing can be selected by clicking on the text.  The
    buttons and other controls above the listing have the following
    functions.

    <dl>
    <dt><b>Show All</b><dd>
    All devices will be highlighted in the drawing windows.
    </dl>

    <dl>
    <dt><b>Erase All</b><dd>
    Erase all device highlighting in the drawing windows.
    </dl>

    <dl>
    <dt><b>Show</b><dd>
    The devices corresponding to the current selection in the list
    will be highlighted in the drawing windows.  These are the devices
    that match the <b>Name</b> and <b>Prefix</b> selected, and whose
    indices are matched in the <b>Indices</b> entry text.
    </dl>

    <dl>
    <dt><b>Erase</b><dd>
    The devices corresponding to the current selection in the list
    will be un-highlighted in the drawing windows.  These are the
    devices that match the <b>Name</b> and <b>Prefix</b> selected, and
    whose indices are matched in the <b>Indices</b> entry text.
    </dl>

    <dl>
    <dt><b>Indices</b><dd>
    This is a text entry area where the user can provide a list of
    index integers and ranges to specify the index values of devices
    to highlight or un-highlight with the <b>Show</b> and <b>Erase</b>
    buttons.  If the entry contains no text, all indices are used. 
    The text consists of space or comma separated integers, or ranges
    of integers where the minimum and maximum values are separated by
    a hyphen (minus sign).  For example:  "<tt>1,2-5,7,9-12</tt>".
    </dl>

    <p>
    The second basic control group appears below the devices list, and
    enables devices to be selected by clicking on the device structure
    in the drawing windows.  The command mode in initiated by pressing
    the <b>Enable Select</b> button.  When in this mode, clicking on a
    device in a physical window showing the current cell will apply
    blinking highlighting to the device.  The corresponding electrical
    device (if any) will also be shown with blinking highlighting in
    windows showing the electrical schematic of the current cell.  In
    such windows, electrical device symbols can be clicked on, which
    will select the corresponding physical device.

    <p>
    Only one device can be selected at a time.

    <p>
    When the mode is active, the two check boxes to the right of the
    <b>Enable Select</b> button become active.  When checked,
    information about new selections will be presented.

    <dl>
    <dt><b>Show computed parameters of the selected device</b><dd>
    When this box is checked, when a device is selected, the
    parameters extracted for the device will be printed on the prompt
    line.  The format of the output is defined in the <a
    href="ext:deviceblock">device block</a> following the
    <tt>Cmput</tt> keyword.
    </dl>

    <dl>
    <dt><b>Show elec/phys comparison of selected device</b><dd>

    <p>
    When this check box is active, clicking on a device will show a
    comparison of the extracted parameters and the corresponding
    electrical values for the device obtained from the schematic.

    <p>
    If one clicks on a device with the <b>Shift</b> key held, the
    electrical device properties will be set from the parameters
    extracted from the corresponding physical device.  In an electical
    window showing the device symbol, the device property labels will
    appear or change when the properties are set or updated.

    <p>
    The physical device must be specified in a <a
    href="ext:deviceblock"> device block</a>, and have at least one
    parameter with the <tt>LVS</tt> keyword specified.
    </dl>

    <p>
    The third basic control group allows electrical parameters for the
    current layer to be measured for a rectangular region.  If also
    allows rectangular regions to be painted, and can be used as an
    alternative to the <a href="xic:box"><b>box</b></a> command in the
    side menu.  Unlike the other two basic control groups, this group
    is only active in physical mode.

    <p>
    Electrical information is applied to layers in the <a
    href="ext:setup">technology file</a> with the <tt>Rsh</tt> keyword
    for resistance (or alternatively <tt>Rho</tt> or <tt>Sigma</tt>
    along with <tt>Thickness</tt>), the <tt>Capacitance</tt> keyword
    for capacitance, and the <tt>Tline</tt> keyword for transmission
    line parameters.  The electrical specifications may be added or
    edited with the <a href="xic:lpedt"><b>Edit Tech Params</b></a>
    command in the <b>Attributes Menu</b>.

    <p>
    When the <b>Enable Measure Box</b> button is pressed, the command
    mode becomes active.  The user can drag or click twice in physical
    windows to define a rectangular area.  This area will be outlined
    with a highlighting box.  During the creation, and after the box
    is created, the electrical parameters, if any, from the current
    layer are applied to the box dimensions, and the electrical
    parameters are displayed.

    <p>
    Once the box is created, pressing the <b>Paint Box</b> button, or
    pressing the <b>p</b> key, will paint the highlighting box with
    the current layer, creating a box object in the cell.

    <p>
    This is useful for creating simple rectangular resistors, for
    example, as the readout facilitates creating the proper size for
    the desired resistance.  The command can also be used to measure
    the values of existing rectangular resistors.

    <p>
    The mouse operations can be repeated, as long as the command
    remains active.  Only one highlighting rectangle is available at a
    time.

!!SEEALSO
xic:extmenu

!! 030715
!!KEYWORD
xic:sourc
!!TITLE
Source SPICE File
!!HTML
    <img src="screenshots/sourcesp.png" align=right>
    <b>Keyword</b>: <tt>sourc</tt>

    <p>
    The <b>Source SPICE</b> button in the <b>Extract Menu</b> allows
    electrical information in a schematic to be updated or generated
    by reading a SPICE file.  Pressing <b>Source SPICE</b> brings up a
    small <b>Source SPICE File</b> pop-up containing an entry area for
    the name of a SPICE file to read, and three check boxes.  The
    entry area is active as a drop receiver, so that the <a
    href="filesel"><b>File Selection</b></a> panel (or another file
    manager program) can be used to locate the file, and the name can
    be dragged into the entry area.  The <b>Go</b> button will
    actually initiate the operation.

    <p>
    Node <a href="xic:nodmp">name mapping</a> is turned on after the
    operation completes.  Since a schematic produced in this way has
    every node name defined by a terminal, using the defined names,
    which correspond to the original SPICE file, is convenient. 

    <p>
    The three choice buttons are:

    <dl>
    <dt><b>all devs</b><dd>
    If set, all devices in the cell which match a name in the SPICE
    file will be updated.  If not set, only the devices that have
    names that were set explicitly by the user (by applying a name
    property) are updated.
    </dl>
    <dl>
    <dt><b>create</b><dd>
    If set, devices specified in the SPICE file that are not found in
    the schematic are created.  If not set, only the properties of
    existing devices are updated.  If the current cell is empty,
    <b>create</b> is taken as set.

    </dl>
    <dl>
    <dt><b>clear</b><dd>
    If set, the electrical part of a cell is cleared before reading the
    SPICE input.  This implies <b>create</b>.
    </dl>

    <p>
    If <b>create</b> is set, or the target cell is empty, this command
    will create a schematic hierarchy from the SPICE file.  The
    function may be used as follows:  open a new cell and go to
    electrical mode.  Use the <b>Source SPICE</b> button to read in a
    SPICE file.  The devices and subcircuits referenced in the file
    will be arrayed in the drawing, each with the appropriate
    properties applied.  Named terminals are placed at each device
    contact point, which establish connectivity (wires are not used). 
    The drawing can be used for simulation or any purpose just as a
    schematic entered in the standard way.  The created schematic can
    be modified by the user to replace the named terminals with wires
    and reset the device locations, to make a 'real' schematic that is
    aesthetically decent.

    <p>
    Subcircuits are created as needed.  They must be written out later
    (e.g., with the <a href="xic:sv"><b>Save</b></a> command).  If a
    file exists in the search path with the same name as a subcircuit,
    it is ignored, as the subcircuit cells are created internally. 
    When writing, therefore, it is possible to replace an existing
    cell file, but the previous version is retained with a
    <tt>.bak</tt> extension.

    <p>
    Devices are instantiated as needed, and given an assigned name
    from the SPICE file.
 
    <p>
    If <b>create</b> is not active, no new devices or subcells will be
    instantiated in a non-empty cell, though devices in the drawing
    with names which match those in the SPICE file will have their
    properties updated.  Properties of existing devices are updated
    whether or not <b>create</b> is active.  Similarly, if a
    subcircuit already exists, its devices will be updated, but no new
    devices will be created in the subcircuit. 

    <p>
    If <b>all devs</b> is not set, only devices that have been
    assigned a name by the user will have properties updated.  Devices
    with internally assigned names are skipped.  This is to avoid
    problems due to the fact that internally assigned names will
    change when the circuit is edited, and updating from an
    out-of-sync SPICE file could be a disaster.

    <p>
    If <b>clear</b> is set, then the electrical part of the cell and
    subcells will be cleared before the SPICE information is read. 
    This ensures that the cells contain only information supplied in
    the SPICE file.

    <p>
    In order to determine if a semiconductor device is a p-type or
    n-type, <i>Xic</i> will look for a corresponding model in the
    source file, or the <a href="modlib">model library</a> if not
    found.  If still not found, if the model name starts with "n" or
    "p", or if the model name contains "n" but not "p" or
    <i>vice-versa</i>, <i>Xic</i> will infer the type.  If none of
    this succeeds, the operation is aborted, and the user must provide
    access to the device model.

    <p>
    <i>Xic</i> will also test the consistency of MOS models defined in
    the <a href="ext:deviceblock">technology file</a> (used when
    extracting physical data) and the MOS model assumed for use in the
    <a href="devlib">device library</a> (usually the
    <tt>device.lib</tt> file).  If the node count differs, a warning
    will be issued.  The warning indicates that LVS will fail.  See
    the discussion in the description of the <a
    href="DeviceKey"><tt>DeviceKey</tt></a> global device library
    property for more information.

    <p>
    All "dotcards" that are not otherwise handled are written verbatim
    in the top-level schematic as labels on the SPTX layer.  Recall
    that the labels on this layer are <a
    href="spicetext">"spicetext"</a> labels, so that the label text is
    included in SPICE output generated from the cell.  Labels will not
    be created if a label with matching text already exists.

    <p>
    There is no inclusion of text from <tt>.include</tt> or
    <tt>.lib</tt> lines or similar, these become labels on the SPTX
    layer in the top-level schematic.

    <p>
    Subcircuit calls that have no subcircuit definition will be
    written as spicetext labels, and a warning will be given.  It is
    likely that they are resolved at simulation-time through
    <tt>.include</tt> or <tt>.lib</tt> inclusions.

    <p>
    All <tt>.model</tt> lines found in the SPICE source are written to
    a file in the current directory named
    "<i>cellname</i><tt>_models.inc</tt>", where <i>cellname</i> is
    the top-level cell name.  In the schematic of the top-level cell,
    a label is created on the SPTX layer containing a
    <tt>.include</tt> line for the models file (if the label does not
    already exist).  Models that are defined within subcircuits are
    given a new hierarchical name to ensure uniqueness.

    <p>
    Nested subcircuit definitions are handled by assigning a new
    hierarchical name to the subcircuit (cell) which is unique.

    <p>
    Parameter definitions from <tt>.param</tt> lines, subcircuit
    definitions, and subcircuit instances are applied verbatim as
    <b>param</b> properties of cells and instances, or as labels on
    the SPTX layer for <tt>.param</tt> lines, within the cell
    corresponding to the subcircuit where found.

    <p>
    Although parameterization of subcell instances is allowed and
    works fine for simulation and other purposes, these parameters are
    effectively ignored in <a href="xic:lvs">LVS</a>.  LVS requires
    that a unique master be created for each instantiation parameter
    set, and the parameterized instances be replaced by instances of
    the appropriate master.

    <p>
    Each of the option buttons has a corresponding <a
    href="!set"><b>!set</b></a> variable.  If the variable is changed
    while the pop-up is visible, the pop-up will be updated. 
    Conversely, changing the state of the option buttons will set or
    unset the corresponding variables.  The pop-up check box will be
    checked if the corresponding variable is set.  The names of the
    corresponding variables are given in the table below.

    <p>
    <blockquote>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><td><b>all devs</b></td>
     <td><a href="SourceAllDevs"><b>SourceAllDevs</b></a></td></tr>
    <tr><td><b>create</b></td>
     <td><a href="SourceCreate"><b>SourceCreate</b></a></td></tr>
    <tr><td><b>clear</b></td>
     <td><a href="SourceClear"><b>SourceClear</b></a></td></tr>
    </table>
    </blockquote>

    <p>
    There are two additional variables that are used by this command. 
    These specify the names of the ground and terminal devices, as
    provided by the device library file, that this command will use. 
    Generally, it is not necessary to set these variables, as the
    defaults should always be appropriate.  The user may, however,
    prefer to use an alternative terminal style, or may have a custom
    device library with different names for these devices from those
    found in the <tt>device.lib</tt> file distributed with
    <i>Xic</i>.

    <dl>
    <dt><a href="SourceGndDevName"><b>SourceGndDevName</b></a><dd>
    This variable specifies the name of the ground terminal device to
    use.  If not set, the name "<tt>gnd</tt>" will be assumed.  If
    this variable is set to a name, a ground device of that name must
    appear in the device library file.
    </dl>

    <dl>
    <dt><a href="SourceTermDevName"><b>SourceTermDevName</b></a><dd>
    This variable specifies the name of the terminal device to use. 
    If not set, the name "<tt>tbar</tt>" will be assumed, if that
    name is found for a terminal device in the device library.  If
    not found, the name "<tt>vcc</tt>" will be assumed.  If this
    variable is set to a name, that name must match the name of a
    terminal device in the device library file.
    </dl>

!!SEEALSO
xic:extmenu
xic:prpty

!! 113009
!!KEYWORD
xic:exset
!!TITLE
Source Physical
!!HTML
    <img src="screenshots/sourceph.png" align=right>
    <b>Keyword</b>: <tt>exset</tt>

    <p>
    The <b>Source Physical</b> button in the <b>Extract Menu</b> will
    update the electrical part of a design from parameters extracted
    from the physical part.  The command works by writing a temporary
    SPICE file from the physical database, then updating the
    electrical database from the SPICE file.  When the <b>Source
    Physical</b> button is pressed, a small <b>Source Physical</b>
    pop-up appears, which is similar to the pop-up seen with the <a
    href="xic:sourc"><b>Source SPICE</b></a> command, but has no text
    entry area, and has an additional <b>Depth</b> choice menu which
    sets the depth into the hierarchy to process.  The <b>Go</b>
    button initiates the operation.

    <p>
    Node <a href="xic:nodmp">name mapping</a> is turned on after the
    operation completes.  Since a schematic produced in this way has
    every node name defined by a terminal, using the defined names,
    which correspond to the physical group numbers, is convenient. 

    <p>
    The first three check boxes have similar functions as in the
    <b>Source SPICE</b> command.  The remaining check box enables
    inclusion of wire-net capacitors.

    <dl>
    <dt><b>all devs</b><dd>
    If set, all devices in the cell will be considered for updating If
    not set, only the devices that have names that were set explicitly
    by the user (by applying a name property) are updated.
    </dl>

    <dl>
    <dt><b>create</b><dd>
    If set, missing devices are created.  If not set, only the
    properties of existing devices are updated.
    </dl>

    <dl>
    <dt><b>clear</b><dd>
    If set, the electrical part of a cell is cleared before updating.
    This implies <b>create</b>.
    </dl>

    <dl>
    <dt><b>include wire cap</b><dd>
    If set, capacitors that represent routing net capacitance will be
    updated, or created if they don't exist and <b>create</b> is set. 
    These capacitors are given a special name prefix "<tt>C@NET</tt>"
    which has significance to <i>Xic</i>, i.e., it identifies them as
    routing capacitances.  The capacitors are added between the wire
    nets and ground.  In order for wire capacitance to be computed,
    the <tt>Capacitance</tt> keyword must be supplied in the <a
    href="ext:setup">technology file</a> for the routing layers.
    </dl>

    <dl>
    <dt><b>ignore labels</b><dd>
    From some tools, cell terminals may be indicated by the presence
    of a label on a <a href="Routing"><tt>Routing</tt></a> layer,
    positioned such that the label reference point touches an object
    on the same layer.  Such labels, if found, will be used to
    generate a terminal list for the top-level cell in the extracted
    hierarchy, if the existing electrical cell contains no terminals
    (or the electrical cell doesn't exist).  If this box is checked,
    such labels will always be ignored.
    </dl>

    <p>
    Each of the option buttons has a corresponding <a
    href="!set"><b>!set</b></a> variable.  If the variable is changed
    while the pop-up is visible, the pop-up will be updated. 
    Conversely, changing the state of the option buttons will set or
    unset the corresponding variables.  The pop-up check box will be
    checked if the corresponding variable is set, unless the variable
    name has a "No" prefix, in which case the logic is reversed.  The
    names of the corresponding variables are given in the table below.

    <p>
    <blockquote>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><td><b>all devs</b></td>
     <td><a href="NoExsetAllDevs"><b>NoExsetAllDevs</b></a></td></tr>
    <tr><td><b>create</b></td>
     <td><a href="NoExsetCreate"><b>NoExsetCreate</b></a></td></tr>
    <tr><td><b>clear</b></td>
     <td><a href="ExsetClear"><b>ExsetClear</b></a></td></tr>
    <tr><td><b>include wire cap</b></td>
     <td><a href="ExsetIncludeWireCap"><b>ExsetIncludeWireCap</b></a></td></tr>
    <tr><td><b>ignore labels</b></td>
     <td><a href="ExsetNoLabels"><b>ExsetNoLabels</b></a></td></tr>
    </table>
    </blockquote>

!!SEEALSO
xic:extmenu

!! 062016
!!KEYWORD
xic:pnet
!!TITLE
Dump Phys Netlist
!!HTML
    <img src="screenshots/dumpph.png" align=right>
    <b>Keyword</b>: <tt>pnet</tt>

    <p>
    The <b>Dump Phys Netlist</b> button in the <b>Extract Menu</b>
    creates a netlist file from the physical connectivity information
    in the current cell.  Upon pressing this button, a small <b>Dump
    Phys Netlist</b> pop-up appears, which provides a number of format
    options.  The options include the names from the
    <tt>PnetFormat</tt> blocks in the <a href="ext:fmtlib">format
    library file</a>, if any.  The format library provides a mechanism
    for user-specified formatting of netlist output.  The supplied
    <tt>xic_format_lib</tt> file contains a formatter for the Cadence
    DEF (Design Exchange Format) format, as well as a simple example
    format.

    <p>
    There are three built-in format choices:  <b>net</b>, <b>devs</b>,
    and <b>spice</b>.  Any combination of the formats can be selected,
    and the output will contain a block for each selected format, for
    each cell.

    <p>
    In addition, there are a number of options which modify the
    presentation.  These include <b>list all cells</b> and <b>list
    bottom-up</b>, which apply to all formats, and <b>show
    geometry</b> and <b>include wire cap</b>.  The latter options are
    enabled when <b>net</b> and <b>spice</b> are enabled,
    respectively, or when a format library choice is active.

    <p>
    The format options will be described in more detail below.
    Below the format check boxes there is a <b>Depth</b> choice menu
    which allows setting of the depth into the hierarchy to process. 
    The user is given the option of creating the netlist to an
    arbitrary depth in the hierarchy.  If the given depth is greater
    than zero, the subcells above the indicated depth will also be
    added to the file.  If "all" is selected, the full hierarchy
    will be output.

    <p>
    Below the depth menu is a text entry area for the name of the file
    to be generated.  The default name is the base name of the current
    cell, suffixed with "<tt>.physnet</tt>", to be created in the
    current directory.  The entry area is sensitive as a receiver for
    drag/drop.

    <p>
    Any combination of the format options may be selected.  The states
    of the option check boxes track the status of the variables
    described below.  The listing from the <b>Dump Phys Netlist</b>
    command will have a field of output for each selected format, from
    each cell.  Pressing the <b>Go</b> button will produce the output
    file.

    <p>
    The format option check boxes are described below.  The first two
    are options that apply to all formats.

    <dl>
    <dt><b>list all cells</b>
    <dd>Subcells that are wire-only or otherwise internally flattened
    or ignored are normally not listed.  If set, these cells are included
    in the listing, which may be useful for debugging.
    </dl>

    <dl>
    <dt><b>list bottom-up</b>
    <dd>When the depth is larger than zero, this check box controls
    the ordering of cells in the file.  When selected, the deepest
    cells (the "leaf cells") are listed ahead of their parent cells,
    thus the current cell will be listed last.  When not selected, the
    listing is top-down.  The current cell is listed first, followed
    by subcells.
    </dl>

    <p>
    The next three rows of option check boxes specify the internal
    formats and options for these formats.

    <dl>
    <dt><b>net</b>
    <dd>A netlist consisting of the terminal names associated with
    each conductor group is generated.
    </dl>

    <dl>
    <dt><b>show geometry</b>
    <dd>If this is selected, the <b>net</b> part of the output file
    will include a listing of the physical objects that comprise the
    wire net.  This includes objects from the present cell, and
    objects that have been promoted from wire-only subcells.  The
    objects may not exactly correspond to the physical objects, for
    example if the <tt>Conductor Exclude</tt> directive is given.  The
    objects are listed in a modified CIF syntax, where units
    correspond to internal <a href="xicdb#units">database units</a>.
    </dl>

    <dl>
    <dt><b>devs</b>
    <dd>A list of extracted devices, with information about the
    device, including <tt>Measure</tt> results, is generated.
    </dl>

    <dl>
    <dt><b>spice</b>
    <dd>A list of the SPICE lines for extracted devices which have a
    <tt>Spice</tt> specification in the <a
    href="ext:deviceblock">device block</a> is generated.
    </dl>

    <dl>
    <dt><b>include wire cap</b>
    <dd>When active, the SPICE listing will contain capacitors for
    nonzero computed wire net capacitance.  These capacitors are given
    a special prefix "<tt>C@NET</tt>" which has significance to
    <i>Xic</i>, when applying LVS.  The capacitors are added between
    the wire nets and ground.  In order for wire capacitance to be
    computed, the <tt>Capacitance</tt> keyword must be supplied in the
    <a href="ext:setup">technology file</a> for the routing layers.
    </dl>

    <dl>
    <dt><b>ignore labels</b><dd>
    From some tools, cell terminals may be indicated by the presence
    of a label on a <a href="Routing"><tt>Routing</tt></a> layer,
    positioned such that the label reference point touches an object
    on the same layer.  Such labels, if found, will be used to
    generate a terminal list for the top-level cell in the listed
    hierarchy, if the existing electrical cell contains no terminals
    (or the electrical cell doesn't exist).  If this box is checked,
    such labels will always be ignored.
    </dl>

    <dl>
    <dt><b>devs verbose</b><dd>
    This check box is active when the <b>devs</b> check box is
    checked.  When checked, it enables printing of additional
    information in the device report in the output file.  At present,
    it will print information about the individual components of
    multi-component (series or parallel merged) devices.
    </dl>

    <p>
    Additional option buttons, if any, correspond to formats specified
    in the format library file.  If selected, a text block containing
    the output from the format generator will be appended to the file,
    for each cell.  The following are available from the stock
    distribution format library file.

    <dl>
    <dt><b>DEF</b>
    <dd>This uses the formatting script in the <tt>xic_format_lib</tt>
    file to generate DEF output.  DEF is a common portable netlisting
    format.  See the comments in the <tt>xic_format_lib</tt> file in
    the startup directory for more information.
    </dl>

    <dl>
    <dt><b>phys-example</b>
    <dd>This uses the formatting script in the <tt>xic_format_lib</tt>
    file to generate output in a simple example format.
    </dl>

    <p>
    Each of the option buttons that correspond to an internal format
    or option (not the formats from the library) has a corresponding
    <a href="!set"><b>!set</b></a> variable.  If the variable is
    changed while the pop-up is visible, the pop-up will be updated. 
    Conversely, changing the state of the option buttons will set or
    unset the corresponding variables.  The pop-up check box will be
    checked if the corresponding variable is set.  The names of the
    corresponding variables are given in the table below.

    <p>
    <blockquote>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><td><b>list all cells</b></td>
     <td><a href="PnetListAll"><b>PnetListAll</b></a></td></tr>
    <tr><td><b>list bottom-up</b></td>
     <td><a href="PnetBottomUp"><b>PnetBottomUp</b></a></td></tr>
    <tr><td><b>net</b></td>
     <td><a href="PnetNet"><b>PnetNet</b></a></td></tr>
    <tr><td><b>show geometry</b></td>
     <td><a href="PnetShowGeometry"><b>PnetShowGeometry</b></a></td></tr>
    <tr><td><b>devs</b></td>
     <td><a href="PnetDevs"><b>PnetDevs</b></a></td></tr>
    <tr><td><b>spice</b></td>
     <td><a href="PnetSpice"><b>PnetSpice</b></a></td></tr>
    <tr><td><b>include wire cap</b></td>
     <td><a href="PnetIncludeWireCap"><b>PnetIncludeWireCap</b></a></td></tr>
    <tr><td><b>ignore labels</b></td>
     <td><a href="PnetNoLabels"><b>PnetNoLabels</b></a></td></tr>
    <tr><td><b>devs verbose</b></td>
     <td><a href="PnetVerbose"><b>PnetVerbose</b></a></td></tr>
    </table>
    </blockquote>

!!SEEALSO
xic:extmenu

!! 062016
!!KEYWORD
xic:enet
!!TITLE
Dump Elec Netlist
!!HTML
    <img src="screenshots/dumpel.png" align=right>
    <b>Keyword</b>: <tt>enet</tt>

    <p>
    The <b>Dump Elec Netlist</b> button in the <b>Extract Menu</b>
    creates a netlist file from the electrical connectivity
    information in the current cell.  Upon pressing this button, a
    small <b>Dump Elec Netlist</b> pop-up appears, which provides a
    number of format options.  The options include the names from the
    <tt>EnetFormat</tt> blocks in the <a href="ext:fmtlib">format
    library file</a>, if any.  The format library provides a mechanism
    for user-specified formatting of netlist output.  The provided
    <tt>xic_format_lib</tt> file provides a formatter for Cadence DEF
    (Design Exchange Format) format, and a simple example format.

    <p>
    There are two built-in format choices:  <b>net</b> and
    <b>spice</b>.  Any combination of the formats can be selected, and
    the output will contain a block for each selected format, for each
    cell.  In addition, there is one format option, <b>list
    bottom-up</b>, which applies to all formats.

    <p>
    The format options will be described in more detail below.  Below
    the format check boxes there is a <b>Depth</b> choice menu which
    allows setting of the depth into the hierarchy to process.  The
    user is given the option of creating the netlist to an arbitrary
    depth in the hierarchy.  If the given depth is greater than zero,
    the subcells above the indicated depth will also be added to the
    file.  If "all" is selected, the full hierarchy will be output.

    <p>
    Below the depth menu is a text entry area for the name of the file
    to be generated.  The default name is the base name of the current
    cell, suffixed with "<tt>.elecnet</tt>", to be created in the
    current directory.  The entry area is sensitive as a receiver for
    drag/drop.

    <p>
    Any combination of the format options may be selected.  The states
    of the option check boxes track the status of the variables
    described below.  The listing from the <b>Dump Elec Netlist</b>
    command will have a field of output for each selected format, from
    each cell.  Pressing the <b>Go</b> button will produce the output
    file.

    <p>
    The format option check boxes are described below.  The first
    option applies to all formats.

    <dl>
    <dt><b>list bottom-up</b>
    <dd>When the depth is larger than zero, this check box controls
    the ordering of cells in the file.  When selected, the deepest
    cells (the "leaf cells") are listed ahead of their parent cells,
    thus the current cell will be listed last.  When not selected, the
    listing is top-down.  The current cell is listed first, followed
    by subcells.
    </dl>

    <p>
    The next two option check boxes specify the internal formats.

    <dl>
    <dt><b>net</b>
    <dd>A netlist consisting of the terminal names associated with
    each wire net is generated.
    </dl>

    <dl>
    <dt><b>spice</b>
    <dd>A SPICE listing is generated.
    </dl>

    <p>
    Additional option buttons, if any, correspond to formats specified
    in the format library file.  If selected, a text block containing
    the output from the format generator will be appended to the file,
    for each cell.  The following are available from the stock
    distribution format library file.

    <dl>
    <dt><b>DEF</b>
    <dd>This uses the formatting script in the <tt>xic_format_lib</tt>
    file to generate DEF output.  DEF is a common portable netlisting
    format.  See the comments in the <tt>xic_format_lib</tt> file in
    the startup directory for more information.
    </dl>

    <dl>
    <dt><b>elec-example</b>
    <dd>This uses the formatting script in the <tt>xic_format_lib</tt>
    file to generate output in a simple example format.
    </dl>

    <p>
    Each of the option buttons that correspond to an internal format
    or option (not the formats from the library) has a corresponding
    <a href="!set"><b>!set</b></a> variable.  If the variable is
    changed while the pop-up is visible, the pop-up will be updated. 
    Conversely, changing the state of the option buttons will set or
    unset the corresponding variables.  The pop-up check box will be
    checked if the corresponding variable is set.  The names of the
    corresponding variables are given in the table below.

    <p>
    <blockquote>
    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><td><b>list bottom-up</b></td>
     <td><a href="EnetBottomUp"><b>EnetBottomUp</b></a></td></tr>
    <tr><td><b>net</b></td>
     <td><a href="EnetNet"><b>EnetNet</b></a></td></tr>
    <tr><td><b>spice</b></td>
     <td><a href="EnetSpice"><b>EnetSpice</b></a></td></tr>
    </table>
    </blockquote>

    <p>
    If the variable <a href="CheckSolitary"><b>CheckSolitary</b></a>
    is set (with the <a href="!set"><b>!set</b></a> command) then
    warnings are issued if nodes are encountered with one connection
    only.

!!SEEALSO
xic:extmenu

!! 030412
!!KEYWORD
xic:lvs
!!TITLE
Dump LVS
!!HTML
    <img src="screenshots/dumplvs.png" align=right>

    <table border=0>
    <tr><td valign=top><b>jump to</b></td> <td>
    <a href="xic:lvs#param"><b>Parameterization Limitation</b></a><br>
    <a href="xic:lvs#nophys"><b>Using the nophys Property</b></a><br>
    <a href="xic:lvs#output"><b>LVS Output File Format</b></a><br>
    &nbsp;&nbsp;&nbsp;&nbsp;
    <a href="xic:lvs#nodemap"><b>Conductor group and electrical node mapping</b></a><br>
    &nbsp;&nbsp;&nbsp;&nbsp;
    <a href="xic:lvs#fterms"><b>Formal terminal group associations</b></a><br>
    &nbsp;&nbsp;&nbsp;&nbsp;
    <a href="xic:lvs#physdev"><b>Physical device associations</b></a><br>
    &nbsp;&nbsp;&nbsp;&nbsp;
    <a href="xic:lvs#physsubc"><b>Physical subcircuit associations</b></a><br>
    &nbsp;&nbsp;&nbsp;&nbsp;
    <a href="xic:lvs#uncon"><b>Checking for unconnected physical subcircuits</b></a><br>
    &nbsp;&nbsp;&nbsp;&nbsp;
    <a href="xic:lvs#termrefs"><b>Checking per-group/node terminal references</b></a><br>
    &nbsp;&nbsp;&nbsp;&nbsp;
    <a href="xic:lvs#summary"><b>Summary</b></a>
    </td></tr></table>

    <p>
    <b>Keyword</b>: <tt>lvs</tt>

    <p>
    The <b>Dump LVS</b> (Dump Layout Vs.  Schematic) button in the
    <b>Extract Menu</b> compares the netlists obtained from the
    physical and electrical data for the hierarchy of the current
    cell, and lists topological and electrical differences.  When the
    <b>Dump LVS</b> button is pressed, a small <b>LVS</b> pop-up
    appears, which contains a field for setting the name of the output
    file, and has provision for setting the depth into the hierarchy
    to compare.  The default name for the output file is the base name
    of the current cell, with a "<tt>.lvs</tt>" extension, and this
    will be written in the current directory unless a path is given to
    the file name.  Entering 0 for the depth compares the current cell
    only, 1 compares the current cell and immediate subcells, and so
    on.  The user is given a chance to view the output file upon
    completion.

    <p>
    If computed wire capacitance is included in the electrical data,
    the capacitors will be recognized by virtue of having a special
    name prefix "<tt>C@NET</tt>" and treated specially.  Unlike other
    devices, there is no corresponding physical device.  If found, the
    values will be compared with the corresponding computed net
    capacitance in the physical data, and an error will be reported if
    the two numbers differ by 1 percent or more.  Wire net capacitance
    is considered only for the capacitors that are found in the
    electrical data, i.e., if they are missing no error is generated.

    <p>
    When the LVS data are printed out, the hierarchy of the
    electrical (schematic) part is used as the basis.  This means that
    <ol>
    <li>any physical structures that are not connected to the
    top-level cell (directly or indirectly) and are not represented in
    the schematic are ignored.
    <li>the reverse is not true: anything in the schematic that doesn't
    have a physical counterpart is an error.
    </ol>

    <p>
    Thus, the schematic is favored, as anything not in the schematic
    and not connected physically is considered to be a "test
    structure" and is generally ignored.  One of the reasons for this
    behavior is the potential existence of test cells and structures
    that might contain real devices or circuits, which aren't
    connected to anything but are used for process analysis. 
    Generally, one would expect these to be ignored for LVS purposes.

    <p>
    However, unconnected physical subcells (cell instances) that
    contain extracted devices or subcircuits are explicitly checked
    for and listed.  If the <b>fail if unconnected physical
    subcells</b> check box in the <b>LVS</b> panel is checked, the
    presence of unconnected physical subcircuits will force LVS
    failure of the cell.  This check box tracks the state of the <a
    href="LvsFailNoConnect"><b>LvsFailNoConnect</b></a> variable.

    <a name="param"></a>
    <h2>Parameterization Limitation</h2>

    Although electrical subcircuit instance parameterization is
    allowed and works fine when generating simulation files for SPICE,
    it is ignored in LVS.  The LVS system implicitly assumes that a
    cell and its instances are precisely similar, that an instance of
    a cell is in all respects defined by the master cell of the
    instance.  Instance parameterization is therefor not recognized
    (but parameters defined in the cell itself are fine).

    <p>
    One has similar issues with parameterized physical cells.  With
    parameterized cells, a unique master is created for each unique
    set of instantiation parameters used in the design.  The template
    cell "instance" is not really an instance of the template cell,
    but is actually an instance of a master created for a particular
    parameter set.

    <p>
    Within LVS, each physical template master would correspond to an
    electrical master, and likewise there would be correspondence
    between instances.  Presently, all of this must be configured
    manually.  Work is ongoing to fully support parameterization
    through SPICE, physical and electrical cells, and LVS, in a
    transparent manner.

    <a name="nophys"></a>
    <h2>Using the nophys Property</h2>

    <p>
    The <a href="prpty:nophys"><b>nophys</b></a> property can be
    applied to electrical devices and subcircuits, causing them to be
    ignored in the extraction system, notably in LVS.  Devices that
    have no physical representation, such as voltage sources, have
    this property set by default.

    <p>
    By "ignoring" these devices, the device terminals are considered
    as open circuits.  However, there are times when it would be
    useful to consider these devices as shorted.  For example, suppose
    that one wishes to include parasitic series inductance in a
    resistor during simulation.  However, this inductance would cause
    LVS to fail, since the series inductor added to the schematic has
    no explicit physical counterpart.

    <p>
    It is possible to configure the <b>nophys</b> property to indicate
    that when the electrical netlist is generated for use by the
    extraction system, the flagged <b>nophys</b> devices will be
    forced to have all terminals connected to the same net, i.e., the
    terminals are effectively shorted together.  Thus, the inductor in
    the example above, if given this property, would disappear
    properly during LVS.  However, when generating a SPICE netlist for
    simulation, these devices will be included in the netlist.

    <p>
    There are a number of aspects to using the <b>nophys</b> property.

    <ol>
    <li>The cached internal electrical netlist can be in one of two
     states, respecting shorted <b>nophys</b> or not.  If there are no
     shorted <b>nophys</b> devices, both representations are the same. 
     Functions that require one representation or another will
     invisibly rebuild this when needed.

    <p>
    <li>All operations in the extraction system, including the
     <b>Extract Menu</b> functions and extraction script functions,
     will respect the shorted <b>nophys</b> property.  This includes
     the SPICE format listings from electrical data in the <b>Extract
     Menu</b>.

     <p>
     The <a href="xic:run"><b>run</b></a>, <a
     href="xic:deck"><b>deck</b></a>, and other similar functions in
     the side menu that relate to SPICE simulation will <i>never</i>
     respect the <b>nophys</b> property, these devices will be treated
     as other devices.

    <p>
    <li>In electrical mode, <b>nophys</b> devices are shown in a
     different color on-screen (yellow by default, the "Terminal
     Color").

    <p>
    <li>The <a href="xic:prpty"><b>Property Editor</b></a> will query
     the user whether to set the shorted option when a <b>nophys</b>
     property is added.

    <p>
    <li>There is a <b>Use nophys</b> button in the <a
     href="xic:nodmp"><b>Node Name Mapping</b></a> editor from the side
     menu.  This button selects whether or not to respect shorted
     <b>nophys</b> devices in the node listings.  Shorted devices can
     obviously change the node numbering.

    <p>
    <li>The string stored in the <b>nophys</b> property can either be
     "<tt>nophys</tt>" or "<tt>shorted</tt>".  <i>Xic</i> sets these
     values according to the state.

    <p>
    <li>There is an <a href="IncludeNoPhys"><tt>IncludeNoPhys</tt></a>
     script function which can be used with the existing electrical
     netlist access functions to provide the <b>nophys</b> recognition
     state desired.
    </ol>

    <a name="output"></a>
    <h2>LVS Output File Format</h2>

    For each cell comparison, the LVS system reports four levels of
    success.
    <dl>
    <dt>CLEAN<dd>
      Everything was measurable and matched.
    </dl>
    <dl>
    <dt>PASSED - AMBIGUITY<dd>
      There were device parameters which could not be compared, but
      all comparisons that were done matched.

      <p>
      In the electrical schematic, if component values are
      parameterized (i.e., use a token defined in a <tt>.param</tt>
      line or similar), or perhaps use <tt>WRspice</tt> shell
      expansion, the value was unavailable.  In earlier releases, a
      value was available only if it was a numeric constant. 
      <i>Xic</i> now provides limited parameter substitution during
      LVS (see below).
    </dl>
    <dl>
    <dt>PASSED - PARAM DIFFS<dd>
      There were device parameters that differ outside of the
      tolerance between electrical and physical.  So actually, only
      the circuit topological check passed.
    </dl>
    <dl>
    <dt>FAILED<dd>
      Differences in circuit topology were detected.
    </dl>

    <p>
    The overall result for the run is the lowest level in this
    hierarchy reported for any cell.

    <p>
    The parameter database and substitution code was imported from
    <i>WRspice</i> for use during LVS and elsewhere.  However, not all
    capability can be provided.

    <ol>
    <li>Parameters given in subcircuit call lines are ignored in LVS,
     making LVS meaningless if these are given in the schematic. 
     Parameterized instances must be remastered to unique master cells
     for the current LVS system.

     <li>There is presently no support for macros defined in
     <tt>.param</tt> lines.  However, single-quoted expressions are
     fully supported, all math operations and all relevant functions
     are available.
     </ol>

     Parameter expansion works as follows:
     <ol>
     <li>When an LVS run starts, the parameters defined in the
     top-level cell as <b>param</b> properties, and all parameters
     defined in <tt>.param</tt> lines found in labels on the SPTX
     layer in the top level cell, are placed in a table.

     <p>
     In addition, the labels on the SPTX layer are searched for
     <tt>.option</tt> lines, and these lines are searched for a
     <tt>parhier</tt> option, and if found, its setting is saved. 
     This option can be set to one of "<tt>global</tt>" (the default
     if not found) or "<tt>local</tt>".

     <li>When comparing devices in the top-level cell, the parameter
     table is used to parameter substitute the <b>value</b> and
     <b>param</b> property strings.  The resulting string should
     provide numerical values for comparison to the extracted physical
     values.

     <li>When comparing in a subcell/subcircuit, the subcircuit
     <b>param</b> properties and <tt>.param</tt> labels are tabulated
     as for the top-level cell.  This is merged with the top-level
     table, and is used to expand the <b>param</b> and <b>value</b>
     property strings of devices in the cell.

     <p>
     If the <tt>parhier</tt> option was found, and it was set to
     <tt>local</tt>, then parameters defined in the subcircuit table
     will override conflicting definitions in the top level table.  If
     <tt>parhier</tt> wasn't found or was set to <tt>global</tt>, the
     reverse is true - top-level definitions will override conflicting
     definitions in the subcell.
    </ol>

    The output file produced by LVS contains a block of lines for each
    cell in the hierarchy where there is both electrical and physical
    information.  Each block may contain several tables, which provide
    information about the cell and the electrical/physical
    associations.  These tables are described below.

    <a name=nodemap"></a>
    <h4>Conductor group and electrical node mapping</h4>

    <i>Xic</i> assigns an integer to every physical wire net (called a
    "group") and to every electrical wire net (called a "node", as in
    SPICE).  These numbers are in general different.  In addition, a
    node may have a text name that was assigned by the user.

    <p>
    This table displays the group to node and node to group mappings. 
    The entries under the "node" heading display the internal node
    number in parentheses, followed by the actual node name (which
    will simply be the number again if no node name was assigned).

    <a name="fterms"></a>
    <h4>Formal terminal group associations</h4>

    In this listing, the first column is the terminal name, the second
    column is the associated group number (you can find the electrical
    node from the group/node mapping table).  If association failed for
    the terminal, i.e., <i>Xic</i> was unable to place the terminal in
    the layout, the word "UNINITIALIZED" will appear in the third
    column.  This will cause LVS to fail for the cell.

    <a name="physdev"></a>
    <h4>Physical device associations</h4>

    If the physical cell contains devices, then this table will
    appear.  Each device of a given type in the schematic is assigned
    a number, and devices extracted from the physical layout are
    assigned a (generally different) number.

    <p>
    An entry appears for each device extracted from the physical data. 
    The first line for the device contains the device name and the
    physical index number.  If the device has an electrical
    counterpart, the electrical device type (same as the physical
    name) and electrical name are printed on the same line, following
    a colon.  The electrical name uses the SPICE convention.  This
    line is followed by a listing of the device terminals, one line
    per terminal.  The terminal name and group number are to the left
    of the colon.  If the group is associated, the associated
    electrical node number (in parentheses) and name are given to the
    right of the colon.  These lines are optionally followed by a
    listing of extracted parameter values for the device.  The actual
    format and displayed parameter set is defined in the corresponding
    device block in the technology file.

    <a name="physsubc"></a>
    <h4>Physical subcircuit associations</h4>

    If the physical cell contains subcells, then this table will
    appear.  The first column gives that name of a subcell found in
    the physical cell.  If the cell is actually an array, each element
    of the array will be listed, with the array indices in parentheses
    following the name.  The second column is the internal index
    assigned to the subcell for physical mode.  If there is a
    corresponding electrical subcell, the electrical subcell type and
    name will be shown, following a colon.  The subcell type is the
    same as the physical subcell name.  The subcell name is the
    subcircuit name in the schematic.  This usually follows the SPICE
    convention of using 'X' as the leading character.  This is
    followed by a listing of the subcircuit terminals, one line per
    terminal.  The physical group numbers in the cell and subcell are
    printed to the left of the colon.  To the right of the colon, the
    electrical node numbers (in parentheses) and names in the
    electrical cell and subcell are printed.  If a group number is not
    associated, the corresponding node number is shown as "-1" and
    node the name is "???".

    <a name="uncon"></a>
    <h4>Checking for unconnected physical subcircuits</h4>

    Physical subcells that contain extracted devices or subcells that
    have no connection to the circuit may be present.  Since the
    electrical hierarchy is used for recursion, these are not detected
    in the traversal, since they have no representation in the
    schematic and no connection to the circuit.  However they are
    checked for explicitly.  If any such subcells are found, they will
    be listed, but otherwise ignored, unless the <a
    href="LvsFailNoConnect"><b>LvsFailNoConnect</b></a> variable is
    set, in which case LVS will fail on the presence of such cells.

    <a name="termrefs"></a>
    <h4>Checking per-group/node terminal references</h4>

    For each group/node association, <i>Xic</i> will compare the list
    of terminals connected to the physical group with the list of
    terminals connected to the electrical node.  The lists should be
    the same.  This header may be followed by a list of terminal
    referencing errors.  Possible errors are device, subcircuit, and
    formal terminals that are connected to the physical group but not
    the electrical node, or vice-versa.  Such errors will cause LVS to
    fail for the cell.

    <a name="summary"></a>
    <h4>Summary</h4>

    The final table, which always appears, is the summary.  This will
    report nonassociations, and will indicate whether the cell passed
    or failed the LVS test.

    <p>
    A pass indication is reported for a cell if all of the following
    are true:
    <ol>
    <li>All electrical nets, devices, and subcircuits are associated,
    meaning that <i>Xic</i> has identified the corresponding object in
    the physical layout.
    <li>No associated physical device or subcircuit is connected to an
    unassociated group.
    <li>No unassociated physical device or subcircuit has a connection
    to an associated group other than the ground group (0).
    <li>Parameter value comparisons between corresponding electrical
    and physical devices match.
    </ol>

    <p>
    Note that having unassociated physical groups, devices, or subcircuits
    does not automatically cause failure.  Unassociated groups (random
    pieces of conductor material) do no harm, but all groups connected to
    associated devices or subcircuits must be associated (have a
    corresponding node in the schematic).  It is also possible to have
    unassociated physical devices or subcircuits, but none of these can
    have a connection to associated groups other than the ground group
    (the ground group is used when a ground plane layer is specified). 
    Thus, the physical layout can have structure not represented in the
    schematic, but only if this structure is topologically disjoint from
    the associated circuit.

!!SEEALSO
xic:extmenu

!! not in manual
!!KEYWORD
ext:examples
!!TITLE
Extraction Examples
!!HTML
    Below are a few examples of how extraction is set up and employed.
    The example layout files, and the descriptions, can also be found
    under the "examples" directory in the main <i>Xic</i> installation
    tree (usually under <tt>/usr/local/xictools/xic</tt>).

    <p>
    The <a href="ext:examp1">first example</a> illustrates parameter
    extraction.

    <p>
    The <a href="ext:examp2">second example</a> illustrates the
    configuration whereby different parts of a device reside in
    different cells, and how to make special device cells
    "transparent" with respect to the extracted hierarchy.

    <p>
    The <a href="ext:examp3">third example</a> illustrates extraction
    of a schematic from a layout, and LVS (layout vs. schematic)
    testing.

    <p>
    The <a href="ext:examp4">fourth example</a> is similar to the third,
    but there is a complication that must be dealt with.

!!SEEALSO
xic:extmenu

!! not in manual
!!KEYWORD
ext:examp1
!!TITLE
Extraction Example: extest.gds
!!HTML
    The <tt>extest.gds</tt> file contains a layout for the Hypres
    technology file containing a number of device structures which
    test and illustrate the extraction capabilities.  The file must be
    used with the <tt>xic_tech.hyp</tt> file distributed with release
    2.2.16a or later.

    <p>
    If you are running <i>Xic</i> with a different technology file,
    you will have to exit <i>Xic</i>, and restart using the command
    <blockquote>
    <tt>xic -Thyp</tt>
    </blockquote>
    You can type "<tt>!help ext:examp1</tt>" as a short cut to get back
    to this topic.  In this case, though the help window appears, you
    are not in "help mode" so the comments below about exiting help
    mode don't apply.

    <p>
    OK, now that we are back again, and running with the Hypres
    technology file, here are some illustrative procedures, assuming
    that Xic 2.3.0 or later is running.

    <ul>
    <li>Open the <a
    href="$EXAMPLES/extest.gds"><tt>extest.gds</tt></a> file in
    physical mode.  If clicking on the reference doesn't work, you can
    type "op /<i>path_to_examples</i>/extest.gds" as an accelerator,
    or use the <b>Open</b> button in the <b>File Menu</b>, or the
    <b>File Select</b> button in the <b>File Menu</b>.  Note that if
    help mode is active, you should hold down the <b>Shift</b> key
    when pressing menu buttons, to have the command execute rather
    than present help.

    <p>
    <li>Press the <b>Esc</b> key to exit Help mode.  In Help mode,
    selecting menu items brings up a help topic.  This is no longer
    true after <b>Esc</b> is pressed.  The status line should contain
    "Mode: Idle".

    <p>
    <li>Open the <b>Extract Menu</b> and select <b>Dump Phys
    Netlist</b>.  In the pop-up that appears, select 'all' in the
    <b>Depth</b> option menu, then press <b>Go</b>.  After a few
    seconds, the pop-up will disappear and a new pop-up will ask
    whether to view the netlist file.  Select <b>Yes</b>.  A file
    browser will appear with the netlist file loaded.  Note that by
    default there are three sections per cell:  the netlist, an
    extracted device list, and a SPICE text listing of extracted
    devices and subcircuits.  Each of these fields can be enabled or
    suppressed with the buttons in the initial pop-up.  The format of
    the SPICE device lines is set with the <tt>Spice</tt> keyword in
    the device block of the technology file.

    <p>
    <li>Press the <b>Show Groups</b> button in the <b>Extract
    Menu</b>.  Note that for inductors, the underlying (M2) conductor
    is split by the LX layer, providing separate groups for the
    inductor terminals (LC areas).  This is the result of using
    <tt>Conductor Exclude LX</tt> in the M2 layer block in the
    technology file.

    <p>
    <li>In the <b>Extract Menu</b>, select <b>Device Selections</b>. 
    In the <b>Show/Select Devices</b> panel that appears, press the
    <b>Enable Select</b> button, and select the <b>Show computed
    parameters of selected device</b> check box.

    <p>
    Then, click on the various resistor, inductor, and Josephson
    junction devices.  The prompt line should indicate a value for the
    device.  See the help on <a href="ext:deviceblock">device
    blocks</a> for the <tt>Cmput</tt> keyword for how to set what is
    printed in this mode.

    <p>
    <li>Switch to electrical mode (the <b>Electrical</b> button in the
    <b>View Menu</b>).  A schematic corresponding to part of the
    physical layout is shown.

    <p>
    <li>In the <b>Show/Select Devices</b> panel, press <b>Enable
    Select</b> again to reactivate, and select the <b>Show elec/phys
    comparison of selected device</b> check box.  Then, click on one
    of the device symbols.  A text box will appear, showing a
    comparison of the physical extracted parameters and the values
    from the corresponding device in the schematic.

    <p>
    If you click on a device with the <b>Shift</b> key held, the
    electrical device properties will be set from the parameters
    extracted from the corresponding physical device.  The label will
    appear or change when the property is updated.

    <p>
    <li>The <b>Source Physical</b> button in the <b>Extract Menu</b>
    can be used to update the properties of all devices in the
    schematic.

    <p>
    <li>The device comparison and <b>Source Physical</b> commands also
    work from physical mode, device comparison by clicking on physical
    device structures.  The properties update can be verified by
    opening an electrical mode sub-window and observing the label
    changes.
    </ul>

    <p>
    Notes:
    <blockquote>
    To see how to incorporate these features, see the help for the
    extraction system and device blocks, and look at the blocks in the
    supplied technology files.
    </blockquote>
    <blockquote>
    Extraction can be rather compute-intensive, so there may be a
    noticeable delay for complex circuits or structures (like the
    spiral in the test file).
    </blockquote>

!! not in manual
!!KEYWORD
ext:examp2
!!TITLE
Extraction Example: hyt.gds
!!HTML
    Some layout styles make extensive use of subcells for vias and
    common device features such as resistor contacts.  In other cases,
    a subcell may encapsulate single or multiple devices, yet it is
    desirable that these subcells, in all cases, be transparent with
    respect to extraction.  "Transparent" means that the subcell is
    not included in the extracted hierarchy, and the subcell contents
    behave in all respects as if it were part of the parent cell.

    <p>
    In the case of simple vias, and other cells which do not contain
    entire devices, terminals, or subcircuits that contain entire
    devices or terminals, there are no special requirements as these
    are reflected into the parent automatically.

    <p>
    First consider the case where resistor contacts are defined in
    subcells, while the resistor body, or a portion of it, is in the
    current cell.  In order to extract these devices, the
    <tt>Depth</tt> keyword must be used in the defining technology
    file device block for the resistor.  In the situation described,
    the depth value should be set to 1, which tells the extraction
    package to look in the current cell and the first level of
    subcells for resistor geometry.  Other, more complicated
    hierarchical situations can be accommodated by setting the depth
    value to larger than one, depending on the maximum level of
    hierarchy necessary to extract all of the geometry needed to
    recognize the device.

    <p>
    Use of Depth larger than 0 may increase computation time since an
    additional test is required to eliminate extracted devices in the
    parent cell that come entirely from subcells.

    <p>
    If the resistor end subcells do not contain other devices,
    terminals, or subcells that contain devices or terminals, the
    extraction package needs no further configuration to extract and
    process these resistors.  The same applies to any device similarly
    defined.

    <p>
    In order to make devices encapsulated in subcells transparent, one
    must apply a special prefix to the names of all such subcells,
    and set the <b>FlattenPrefix</b> variable to this prefix. 
    The prefix can be any text token that contains characters valid in
    a cell name.  The <b>Rename</b> command in the <b>Cells
    Listing</b> pop-up can be used to supply to prefix to the
    appropriate cells in an existing design.  The
    <b>FlattenPrefix</b> variable can be set with the <a
    href="!set"><b>!set</b></a> command.

    <p>
    Cells with the prefix will be temporarily flattened into the
    parent before extraction is performed.  Thus, devices in these
    cells will appear in the parent cell.

    <p>
    As an example, one can load the <tt>hyt.gds</tt> file, using the
    Hypres technology file (<tt>-Thyp</tt>).  The technology file
    supplied with Xic-2.4.16 and later contains the necessary
    "<tt>Depth 1</tt>" keyword in the device block for resistor
    definition.  This keyword must be present for the example to work. 
    If you have a custom or old technology file and wish to use this
    feature, you should update your technology file "res" device block
    similarly.

    <p>
    If you are running <i>Xic</i> with a different technology file,
    you will have to exit <i>Xic</i>, and restart using the command
    <blockquote>
    <tt>xic -Thyp</tt>
    </blockquote>
    You can type "<tt>!help ext:examp2</tt>" as a short cut to get back
    to this topic.  In this case, though the help window appears, you
    are not in "help mode" so the comments below about exiting help
    mode don't apply.

    <p>
    OK, now that we are back again, and running with the Hypres
    technology file with the "<tt>Depth 1</tt> keyword in the "res"
    device block, here are some illustrative procedures.

    <ul>
    <li>Open the <a href="$EXAMPLES/hyt.gds"><tt>hyt.gds</tt></a> file
    in physical mode.  If clicking on the reference doesn't work, you
    can type "op /<i>path_to_examples</i>/hyt.gds" as an accelerator,
    or use the <b>Open</b> button in the <b>File Menu</b>, or the
    <b>File Select</b> button in the <b>File Menu</b>.  Note that if
    help mode is active, you should hold down the <b>Shift</b> key
    when pressing menu buttons, to have the command execute rather
    than present help.

    <p>
    <li>Press the <b>Esc</b> key to exit Help mode.  In Help mode,
    selecting menu items brings up a help topic.  This is no longer
    true after <b>Esc</b> is pressed.  The status line should contain
    "Mode: Idle".

    <p>
    The layout consists of a resistor whose ends are defined in
    subcells named "hyend", a piece of conductor in a subcell named
    "hynull", and a Josephson junction in subcell "hyjj".  Use the
    <b>Expand</b> command in the <b>View Menu</b> to turn on/off the
    detail.

    <p>
    <li>Press the <b>Show Groups</b> button in the <b>Extract
    Menu</b>.  If <b>Show groups</b> was already active, press the
    button twice.  Note that the continuity of the conductor nets is
    established through the subcells hynull and hyend, as the adjacent
    metal pieces are given the same group numbers.

    <p>
    <li>Now switch to electrical mode (press <b>Electrical</b> under
    the <b>View Menu</b>).  There is no schematic.  Press the
    <b>Source Physical</b> button in the <b>Extract Menu</b>.  In the
    resulting pop-up select "all" in the <b>Depth</b> menu, and press
    <b>Go</b>.  This will create a schematic from the layout.  The
    schematic should consist of a resistor, connected to a subcell
    that contains a junction.  This is exactly what we have in the
    physical layout.  You may have to use <b>Expand</b> to see the
    subcell boundary.

    <p>
    <li>Now suppose that the junction in intended to be part of the
    parent cell, i.e., the junction is in a subcell for layout
    convenience, but this should be invisible in the extracted
    circuit.  To effect this change, press the <b>Cells List</b>
    button in the <b>File Menu</b>.  A list of cells will appear. 
    Click on "hyjj" in the list - it will become highlighted, and
    press the <b>Rename</b> button at the top of the pop-up.  Into the
    dialog which appears, enter "zzjj" and press <b>Apply</b>.  This
    procedure changes the name of the "hyjj" cell (all instances) to
    "zzjj".  The "zz" is chosen to be a unique prefix for transparent
    cells.  This prefix can be any string (but must be valid as part
    of a cell name).

    <p>
    <li>Next, enter into the prompt line "<tt>!set FlattenPrefix
    zz</tt>" (without the quotes).  This tells <i>Xic</i> to logically
    flatten any cells whose name starts with "zz" during extraction.

    <p>
    <li>To see the effect, in electrical mode, the electrical data can
    be extracted again.  Press the <b>Source Physical</b> button,
    however this time make sure that the <b>Clear</b> button in the
    pop-up is selected, and press <b>Go</b>.  This will clear the
    electrical cells and re-extract the contents.  In this case, the
    schematic consists of a resistor and a connected junction, and no
    subcells.
    </ul>

!! not in manual
!!KEYWORD
ext:examp3
!!TITLE
Extraction Example: chip.gds
!!HTML
    The <tt>chip.gds</tt> file contains a former student's cmos test
    chip design, and uses the <tt>xic_tech.scmos</tt> technology file. 
    This is a physical design only.

    <p>
    If you are running <i>Xic</i> with a different technology file,
    you will have to exit <i>Xic</i>, and restart using the command
    <blockquote>
    <tt>xic -Tscmos</tt>
    </blockquote>
    You can type "<tt>!help ext:examp3</tt>" as a short cut to get back
    to this topic.  In this case, though the help window appears, you
    are not in "help mode" so the comments below about exiting help
    mode don't apply.

    <p>
    OK, now that we are back again, and running with the scmos
    technology file, here are some illustrative procedures.

    <ul>
    <li>Open the <a href="$EXAMPLES/chip.gds"><tt>chip.gds</tt></a>
    file in physical mode.  If clicking on the reference doesn't work,
    you can type "op /<i>path_to_examples</i>/chip.gds" as an
    accelerator, or use the <b>Open</b> button in the <b>File
    Menu</b>, or the <b>File Select</b> button in the <b>File
    Menu</b>.  Note that if help mode is active, you should hold down
    the <b>Shift</b> key when pressing menu buttons, to have the
    command execute rather than present help.

    <p>
    <li>Press the <b>Esc</b> key to exit Help mode.  In Help mode,
    selecting menu items brings up a help topic.  This is no longer
    true after <b>Esc</b> is pressed.  The status line should contain
    "Mode: Idle".

    <p>
    <li>Go to electrical mode.  The display window is empty.

    <p>
    <li>Select the <b>Source Physical</b> button in the <b>Extract
    Menu</b>.  In the pop-up that appears, select "all" in the
    <b>Depth</b> menu, and press <b>Go</b>, After a few seconds, a
    schematic should appear.  It is not a "normal" schematic, but
    electrically it matches the physical design from which it was
    extracted.  The entire hierarchy has been extracted.

    <p>
    <li>Open the <b>Extract Menu</b> and press the <b>Dump LVS</b>
    button.  In the resulting pop-up, select "all" in the <b>Depth</b>
    menu, and press <b>Go</b>.  After a few seconds, a pop-up will
    appear indicating that there were no LVS errors, and asking
    whether the user wishes to view the comparison results.  Press
    <b>Yes</b>, and a file browser will appear loaded with the result
    file.  You can browse the file to see the detailed results of the
    comparison.  Since the file was extracted from the physical
    layout, there is no surprise that the tests pass.
    </ul>

!! not in manual
!!KEYWORD
ext:examp4
!!TITLE
Extraction Example: amd2901.gds.gz
!!HTML
    This file was produced in ancient times by the free
    <a href="http://www-asim.lip6.fr/recherche/alliance">
    Alliance</a> LSI development system.

    <p>
    The CIF output from that system was read into <i>Xic</i>, using a
    modified technology file (available upon request).  It was then
    rewritten as a gds file.

    <p>
    Note that the gds file is compressed with <tt>gzip</tt>
    (<tt>.gz</tt> suffix).  There is no need to decompress, <i>Xic</i>
    can read gzipped gds files directly.

    <p>
    The file has a problem, though.  The Alliance system uses the same
    via layer for contacts to poly and active, whereas the <i>Xic</i>
    scmos (and MOSIS design rules) as distributed expects separate via
    layers for the two contact types (note added:  this is no longer
    necessarily true).  The result is that the gds file has no CPP,
    but uses CCA for contacts to poly.

    <p>
    There are many ways to fix this problem.  Here we illustrate one
    solution, which is not necessarily the easiest but displays some
    unique features of <i>Xic</i>.

    <p>
    In the examples directory is a script named "<tt>fixvia.scr</tt>". 
    This script will automatically convert all CCA vias over CPG to
    CCP.  This is the kind of special-purpose script to which one has
    to resort at times, and is worth studying.

    <p>
    If you are running <i>Xic</i> with a technology file different
    than the scmos technology file supplied with <i>Xic</i>, you will
    have to exit <i>Xic</i>, and restart using the command
    <blockquote>
    <tt>xic -Tscmos</tt>
    </blockquote>
    You can type "<tt>!help ext:examp4</tt>" as a short cut to get back
    to this topic.  In this case, though the help window appears, you
    are not in "Help mode" so the comments below about exiting help
    mode don't apply.

    <p>
    OK, now that we are back again, and running with the scmos
    technology file, here are some illustrative procedures.

    <ul>
    <li>Open the <a
    href="$EXAMPLES/amd2901.gds.gz"><tt>amd2901.gds.gz</tt></a> file
    in physical mode.  If clicking on the reference doesn't work, you
    can type "<tt>op
    /</tt><i>path_to_examples</i><tt>/amd2901.gds.gz</tt>" as an
    accelerator, or use the <b>Open</b> button in the <b>File
    Menu</b>, or the <b>File Select</b> button in the <b>File
    Menu</b>.  Note that if help mode is active, you should hold down
    the <b>Shift</b> key when pressing menu buttons, to have the
    command execute rather than present help.

    <p>
    <li>Press the <b>Esc</b> key to exit Help mode.  In Help mode,
    selecting menu items brings up a help topic.  This is no longer
    true after <b>Esc</b> is pressed.  The status line should contain
    "<tt>Mode: Idle</tt>".

    <p>
    <li>Since the <tt>fixvia</tt> script in the examples is probably
    not in the script search path, it likely won't have a button in
    the user menu.  It can still be executed, by using the <a
    href="!exec"><b>!exec</b></a> command, or with the debugger.  The
    precedure for running in the debugger will be described.  You can
    probably avoid this procedure, if the examples are installed in
    the "usual" place, by just clicking <a
    href="$EXAMPLES/fixvia.scr">here</a>.  This will execute the
    script, if it can be found.  If the main window flashes, it
    worked.  If the link doesn't work, or you want to do it the hard
    way, follow the procedure below.

    <p>
    <li>Press the <b>Debugger</b> button in the <b>User Menu</b>.
    On the debugger panel, press the <b>Open</b> button in the
    <b>File</b> menu, and enter
    "<tt>/usr/local/xictools/xic/examples/fixvia.scr</tt>", or
    whatever the path is to the fixvia script.  Note that if you can
    cut and paste from this window, but the quote marks may have to
    be removed from the pasted text.  The script text should become
    visible in the window.

    <p>
    <li>Press the <b>Run</b> button in the <b>Execute</b> menu.  The
    script cycles through all of the subcells, fixing the vias.  If
    the interactive DRC is active (the <b>Enable Interactive</b> button
    in the <b>DRC</b> menu is active), there will be a lengthly error
    list, since the scmos technology file expects a different via
    size.  This can be ignored here.

    <p>
    <li>You can dismiss the debugger and the error window.  The design
    now should have the correct via types.

    <p>
    <li>The gds file has no electrical information.  To extract
    electrical information, press the <b>Source Physical</b> button in
    the <b>Extract Menu</b>.  In the resulting pop-up, select "all" in
    the <b>Depth</b> menu, then press <b>Go</b>.  The extraction takes
    a few seconds.

    <p>
    <li>When finished, press the <b>Dump LVS</b> button in the
    <b>Extract Menu</b>.  Select "all" in the <b>Depth</b> menu in the
    pop-up that appears, then press <b>Go</b>.  This will compare the
    extracted schematic with the physical layout.  There should be no
    errors, but it may be instructive to view the resulting file by
    selecting <b>Yes</b> in the pop-up that appears when comparison is
    finished.

    <p>
    <li>The schematic can be viewed by pressing the <b>Electrical</b>
    button in the <b>View Menu</b>.  By adding a few sources, this
    schematic could in principle be simulated with SPICE.  The
    <b>Deck</b> button in the side menu will generate a SPICE file of
    the entire chip.
    </ul>

    <p>
    Now that you have addressed the via problem the hard (but
    instructional) way, you should know that there is a simpler
    approach.  Use the <b>Save Tech</b> button in the <b>Attributes
    Menu</b> to produce a local copy of the scmos technology file. 
    Then, with a text editor, add the following line to the block of
    lines that follow "<tt>PhysLayer CCA</tt>":
    <blockquote>
    <tt>Via CPG CMF</tt>
    </blockquote>
    There is already a <tt>Via</tt> line in this block, and you can
    add the new line just below it.  You now have a custom technology
    file suitable for Alliance output.  Change the name of the
    modified technology file to something like
    "<tt>xic_tech.ali</tt>".  Then, after starting <i>Xic</i> with the
    command "<tt>xic -Tali</tt>", the <tt>amd2901.gds</tt> file can be
    read in, and LVS should work directly.

