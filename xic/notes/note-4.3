
----- Begin 4.3.X (Post-Production)

Changes relative to final 4.2 release (4.2.16).

Lots of small things fixed, revealed by valgrind runs.

fixed no name assignment in the Node (Net) Name Mapping panel.  Operation
would fail if names are case-insensitive (the default) and new name contained
lower case.

undoc:
avoid OA warning when opening "chip1b_top.gds nand", tries to open as
OA lib/cell.

----- switch to git code control ------

The commit notes will in large measure replace this file, at least with
respect to documenting small changes.

reversed direction of Ctrl-mouse wheel zoom, to match prevailing standard.

Porting to Fedora-25, which uses gcc-6.
Nasty problem, I have used "this" to check for a null object throughout the
program.  I.e., if (this == 0), it was assumed that one could go ahead and
do useful things without referencing the object.  This would work for simple
objects, without polymorphism.  However, calling a methon on a null object
pointer is technically undefined.  Clang would work, but emit a warning
for (this == 0), which was shut up by ((void*)this == 0).  Gcc-6 will
issue a warning even with the (void*), but allows a new local variable
to be set to this and subsequently tested.  However, it gets worse.
Gcc-6 will seg fault when calling a method through a null pointer, unless
-fno-delete-null-pointer-checks is set.  So, a lot of refactoring is needed.

Begins the process of making sure that no null object pointers are
dereferenced, looks like lots of work.

__attribute__((deprecated)) can be temporarily added to a function
that tests this==0, causing the calls to emit a warning on compilation. 
The calling object can be tested at these locations.

Any method that uses this under the assumption that it may be null needs
attention, e.g. linked lists with things like
for (x = this; x; x = x->next), and the ubiquitous free function.

Remedies:
-  Make the functions static, and pass the pointer.  This is probably
   the easiest/safest approach.  But, some structs will end up with
   all or mostly static methods.  The syntax becomes a bit ugly and
   cluttered.  Did a lot of this.

- Define a macro that will test for a null pointer before a call,
  something like
#define ZCK(foo, bar, baz) (foo ? foo->bar : baz)
#define ZCK(foo, bar) if (foo) foo->bar
   Wrap calls in the macro.  Never did this, too ugly.

-  Find the method calls and add an explicit test for null pointer.
   Did a lot of this.

Fedora networking gave trouble with xic/wrspice ipc.
Set SIGIO to SIG_IGN in Xic and WRspice.  This signal is generated when a
socket status changes.  Maybe some day use this, but for now ignore them
or the program will terminate.

IPC fails if the host name can't be resolved, which was the default.
1.  In VirtualBox, make sure network mapping is set to "Bridge", default
is "NAT" which won't work.
2.  In Fedora Network setup, create a connection that uses the correct
addresses and is manual.
3.  Change the /etc/hostname file.
4.  I also changed the "hosts" in /etc/nsswitch.conf to "files dns",
not sure this was needed.

In the Spice Cmd operation, error messages weren't being handled, fixed.
This was a core leak, too.

Numerous fixes to std via handling internally.

Grid panel changed visually, new screenshot needed in help.

The Color Selection panel was changed and updated to allow setting
opposite-mode colors.  Needs new screen shot.

New environment variable XT_GUI_COMPRESS.  When set, don't allow space
around button contents.  Such space can cause side menu button images to
be truncated on low-res displays.

The !dumpcds command will now output a GDSII layer mapping file in
addition to the tech and drf files.

Done:  Allow !join to join electrical wires.  In memory design from Cadence,
all electrical wire segments are individual wires.  Maybe a join-all-wires
command?
New !jw [-l] command.
Without arg, take the latest selected wire, and join it recursively
to other existing similar wires that share an endpoint.  With -l,
join if possible all wires on the current layer.

!select layer:
1) a hyphen ('-') is now a stand-in for the current layer, but not in
regular expressions.
2) the layer alias name (lppName) is now also tested against the regular
expression.

ToDo: std vias should be handled transparently in all CHD operations.  Vias
are ignored in display mode, compare mode (probably).
DONE, perhaps a bit more checking needed.

Ctrl-click on selected standard via instance now pops up the standard
via parameter setting panel, allowing instance to be changed.  This
panel has visual changes, new screen shot needed.  Slightly different
between via creation mode (from menu) and via update mode.

Made program separable from mozy, which is gnu-tainted.
edit
  mrouter_if.cc (help, setup)
fileio
  fio.cc (httpget upd, net file open)
gtkxic
  gtkmain.cc (htm help, form submit handler)
main
  help_menu.cc (help, initializer, rid this)
  init.cc (help, initialize)
  main_txtcmds.cc (help upd, !helpxxx and !update.!passwd,!proxy cmds)
  main_variables.cc (help, help-related variables)
  oa_if.cc (help, initialization)
bin
  xic.cc (upd, check for updates)

ToDo: Amir Jafari-Salim, Hypres
Hot key to terminate wire creation (polys too).
DONE.  Enter now terminates wires and polys being created.  Also, if the
clicl is within PixelDelta pixels of the target, the wire or poly will be
terminated.  This helps ensure termination with ultra-fine grid setting.

Get rid of XIC_LIBRARY_PATH, doesn't work.
NO.  Xic now starts from a wrapper in xictools/bin, which calls xic
binary in xictools/xic/bin.  the XIC_LIBRARY_PATH is prepended to the
LIBRARY_PATH in the wrapper.

OpenAccess support is back.  The plug-in is supplied with RHEL5-7
releases.  Not for commercial use.

Print panel alterred to provide a Line Width entry for the PS line
draw driver.
The PSlineDraw variable is no longer recognized.

--- release 4.3.1

Removing update checking from program.  This will be handled externally.
remove from docs:
XT_NO_CHECK_UPDATE
XT_UPD_DEBUG
NoCheckUpdate
InstallCmdFormat
!update -> pops up update page in help
!passwd -> (undocumented) prints message about no password needed
!proxy  -> (undocumented) prints "use Options/Set Proxy in help window"

--- release 4.3.2

Fixed seg fault in fio_library.cc when open_cell has null cbin.

FIXED: library references weren't being followed through CHD, e.g.,
expanded cells were blank in display mode.

Selection changes:  A new pop-up applies when there are three or more
cell instances potentially in a selection operation (point or area)
and no selectable geometry.  The Select Instances panel produces a
list of instances with a clickable yes/no to toggle selected status of
each listed instance.  When the selection mechanism is used to choose
instances for some other purpose, the same pop-up, laabelled "Choose
Instances" appears.  The pop-up is modal in either case, meaning all
but the pop-up is locked out while the pop-up is visible.

Fixed! Info command leaving dead object copies in the selection list,
instability results.

Fixed: Script parser, parse of string constants was not expanding
backslash escapes correctly, a\\b would be a\<backspace> instead
of a\b.

Fixed: Logo script function ignored LogoPixelSize variable.

Fixed:  Logo creation, no more caching the width/height of xpm data. 
This causes trouble if the user reuses the same xpm file name but
changes the content.

New system to generate and track instance names in physical mode. 
Each cell instance has a name consisting of the master name, colon
separator, and a 0-based index number in database order.  The index
number is increased by the size of the array when numbering array
instances, to leave space for indexing individual components.  The
instance name is used in the Select/Choose Instances panel, and in the
label of unexpanded physical instances in the drawing windows, and in
the extraction system.  Instance numbers are regenerated when needed,
after a modification which changes the instance list of a cell.
They are stable and reproducible as long as the containing cell and
its hierarchy are unmodified.

In the Xiv feature set, pressing Esc twice now deselects all, same as
in Xic.

Script functions updated:
GetInstanceName()  (support physical instance names)
SetInstanceName()  (descr change)
GetInstanceIdNum() (check sequence validity, descr updated)
GetInstanceAltId() (check sequence validity, return index(). descr updated)
ListSubcells()     (descr change)

New boolean variable NoInstnameLabels
When set, unexpanded instances in physical drawing windows will use master
name (as before) instead of instance name.

--- release 4.3.3

New boolean variables:
NoFlattenStdVias
NoFlattenPCells
Corresponding check boxes in the Flatten pop-up.
When set, indicated cells will be moved to the top of the flattened
hierarchy but remain as instances.  Otherwise (as previously) the
geometry is simply copied as for any other cell type.
These apply when flattening using file operations/CHD, but only
when the master cells are NOT in the source file.

New NoFlattenLabels variable
When set, labels in subcells are ignored, avoids creating wire nets
with conflicting net labels.

!netext -w 0,0,0,0 means to use cell BB (no area constraint).
!netext now takes -vs option, where if not gridding and no area constraint,
standard via cells will be retained.
!netext:  grid no longer mandatory if no -w, -g 0 is default which means
use full cell area.
Cells for named nets now have a "NXNAME" property 7149, and string is
the net name.
Fixed bug which caused stage 3 to fail, finding no nets, if the ground
group 0 was not used.
NXNAME label correctly copied in stage 3?  Sort of bad, but hard to
fix since output is streaming.  When flattening, all NXNAME properties
found in grid cells will be applied to top.  When not flattening, need
to check the primary cell and subcells for properties.

Added flattening/windowing from the Import panel.

Check if scaling works: pcells/vias, flattening import.  Yes, the scaling
is applied to std via and pcell instance placements.

Bug fixed: Selections panel type filtering was being ignored.

When reading into db using Import panel, scaling of pcells, std vias, and
library gates should be correct in all cases, with these masters created
or read in with unit scaling.  The instances are scaled.

WriteAllCells variable renamed KeepLibMastgers.  With
KeepStdViaSubMasters, KeepPcellSubMasters, added 3 check boxes to
Format Conversion panel.

Checked conversion and write scaling, other operations:  scaling
with std vias/pcells/libgates.  We probably never want to scale masters,
but need to scale instances.  Works from import/export/convert
panels.

Revised main database, it had trouble when there are large numbers of
identical objects, elements could get out of order.

--- release 4.3.4

The IPC to WRspice was broken in multiple ways in Windows.
1.  The default path to WRspice was assuming that there was a wrspice.exe file
in xictools/bin, which is no longer true.  CreateProcess does not work with
.bat files.  The default path is now ...xictools/xic/bin/wrspice.exe.
2.  The default path was not set at all since the registry query returned
"wrspice.current", had to strip ".current" to match progname.
3.  The links of executable files into xictools/bin were "junction" links.
These don't execute from cmd.exe, but run find from a Cygwin shell.  These
are now actually symbolic links and run fine from a DOS box, at least with
the current Windows 10.

The tech fill will now be found if saved in a subcirectory named "techfiles"
in the current directory.

--- release 4.3.5

If a file named ".xic_ignore" exists in a "models" directory, the directory
content will be ignored.

Chris Ayala, unresolved library devices issue
Hi Steve,

I’ve forgotten to thank you for your previous reply, so thank you so much for
+getting back to me!

1. This is good to know, although I’m not sure how to actually set those
variables. Is it simply something like NoAskOverwrite = 1?

2. This solution worked great. Is it best practice to place instances of cells
from a library via Library List->Open desired library->Contents->Select cell
from listing->Place? (and then with listing window still open, continue to
place other cells as needed)? Before using the .lib file, I just went over to
the Place button, entered the name of the cell, and placed it but this only
worked because I launched xic from the directory where I saved all the cells.
Now that I used the lib file to reference the directory containing the
collection of cells, the Place button still works and the tool can still find
the cell but xic complains of missing basic elements such as jj, ind, etc. But
if I do place via the Library List->Contents->Listing, it works perfectly fine.
I’m just wondering what is different about these two “placing” actions.

Name property change  (ifdef NEWNMP)
1.  New separate CDp_sname and CDp_cname properties for cells/instances,
    CDp_cname derives from CDp_sname.
2.  No longer a "subckt" flag, but new "macro" flag, saved in CDp_sname.
    Logic about the same, with macro flag being !subckt, when name starts
    with X.
3.  NEW:  the macro flag can be set for devices as well as subcircuits.
    With devices, it replaces the separate P_MACRO property.  Old
    files with macro properties read fine, the macro properties are
    removed.  They can be regenerated in output if the new
    WriteMacroProps variable is set.  This is required for backward
    compatibility to 4.3.5 and earlier.
4.  The macro flag in instances is inherited from the master and is no
    longer settable from the instance name property string.
5.  The property string syntax has changed a bit, but is backwards
    compatible except for macro properties.
    master:
    if macro flag set: prefix macro
    else if X: prefix 0 subckt
    else: prefix
    The "x 0 subckt" is for backward compatibility, just "x" would be
    sufficient for 4.3.6 and later.
    Also for backward compatibility, the reader takes "X anything" (two tokens)
    as "X macro".
    instance:
    prefix number [subckt [x y]]
    The "subckt" appears if prefix is x and macro not set.  Coordinates
    additionally appear if physical label was placed (in extraction).
6.  If a macro property is read, an info window appears telling the
    user to set WriteMacroProps if backwards compatibility is needed. 
    Save design without setting variable to shut this up.

!mklib updated with new -d option to handle Directory entries, for native
cell collections.

New !preload command and RegisterSubMaster function, registers Xic pcell
sub master files so will resolve when reading data via library mechanism.
Avoids cell name uncertainty.

Bug fixed in pcell parameter compare function, infinite loop.  Potential
bug fixed in OpenImport with null cbin, would seg fault.

FIX Place button in Content window of OA Libs panel requires library
to be open or place fails with uninformative error message. DONE

--- release 4.3.6
--- release 4.3.7

--- release 4.3.8

ToDo: handle via/pc masters in archive (DONE for pcells, check this)

Chris Ayala:  "Glued contacts" when moving schematic device, meaning
wires stretch(?).

TODO: Skip overwrite prompt based on cell source and modification status?

idea:
Extraction change?  always flatten devices, but never promote device
in flatten (it will be discovered at higher level).  Skip device cells
when checking lower levels when recognizing.  Then, overlapping devices
whould be handled properly.

update OA/Xic properties and mapping in docs, e.g., XICP_PARTNAME

Somehow, I'd like to keep standard vias in the net files.  This would be
straightforward when not gridding.  Is there a "nice" way to grid?
One possibility:  at the end, replace physical geometry with standard
via instances:

For each net cell
  For each stdvia in hierarchy that overlaps net
    clip cell via layers around stdvia bb
    add stdvia instance to net cell
  done
done

Implement:
1) keep stdvia instances when not gridding or otherwise area
   constraining. DONE
2) implement a post-processing function as above.

On Debian, to avoid GTK warnings about not finding "adwaita" theme on startup:
sudo apt install gnome-themes-extra
